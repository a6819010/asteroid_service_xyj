/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.youguu.asteroid.rpc.thrift.gen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 券商开户量统计
 */
public class SecAccountRecordThrift implements org.apache.thrift.TBase<SecAccountRecordThrift, SecAccountRecordThrift._Fields>, java.io.Serializable, Cloneable, Comparable<SecAccountRecordThrift> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SecAccountRecordThrift");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField AK_FIELD_DESC = new org.apache.thrift.protocol.TField("ak", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SEC_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("secNo", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField CREATETIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createtime", org.apache.thrift.protocol.TType.I64, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SecAccountRecordThriftStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SecAccountRecordThriftTupleSchemeFactory());
  }

  public int id; // required
  public String phone; // required
  public String ak; // required
  public int secNo; // required
  public long createtime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    PHONE((short)2, "phone"),
    AK((short)3, "ak"),
    SEC_NO((short)4, "secNo"),
    CREATETIME((short)5, "createtime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // PHONE
          return PHONE;
        case 3: // AK
          return AK;
        case 4: // SEC_NO
          return SEC_NO;
        case 5: // CREATETIME
          return CREATETIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __SECNO_ISSET_ID = 1;
  private static final int __CREATETIME_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AK, new org.apache.thrift.meta_data.FieldMetaData("ak", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEC_NO, new org.apache.thrift.meta_data.FieldMetaData("secNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATETIME, new org.apache.thrift.meta_data.FieldMetaData("createtime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SecAccountRecordThrift.class, metaDataMap);
  }

  public SecAccountRecordThrift() {
  }

  public SecAccountRecordThrift(
    int id,
    String phone,
    String ak,
    int secNo,
    long createtime)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.phone = phone;
    this.ak = ak;
    this.secNo = secNo;
    setSecNoIsSet(true);
    this.createtime = createtime;
    setCreatetimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SecAccountRecordThrift(SecAccountRecordThrift other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetPhone()) {
      this.phone = other.phone;
    }
    if (other.isSetAk()) {
      this.ak = other.ak;
    }
    this.secNo = other.secNo;
    this.createtime = other.createtime;
  }

  public SecAccountRecordThrift deepCopy() {
    return new SecAccountRecordThrift(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.phone = null;
    this.ak = null;
    setSecNoIsSet(false);
    this.secNo = 0;
    setCreatetimeIsSet(false);
    this.createtime = 0;
  }

  public int getId() {
    return this.id;
  }

  public SecAccountRecordThrift setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getPhone() {
    return this.phone;
  }

  public SecAccountRecordThrift setPhone(String phone) {
    this.phone = phone;
    return this;
  }

  public void unsetPhone() {
    this.phone = null;
  }

  /** Returns true if field phone is set (has been assigned a value) and false otherwise */
  public boolean isSetPhone() {
    return this.phone != null;
  }

  public void setPhoneIsSet(boolean value) {
    if (!value) {
      this.phone = null;
    }
  }

  public String getAk() {
    return this.ak;
  }

  public SecAccountRecordThrift setAk(String ak) {
    this.ak = ak;
    return this;
  }

  public void unsetAk() {
    this.ak = null;
  }

  /** Returns true if field ak is set (has been assigned a value) and false otherwise */
  public boolean isSetAk() {
    return this.ak != null;
  }

  public void setAkIsSet(boolean value) {
    if (!value) {
      this.ak = null;
    }
  }

  public int getSecNo() {
    return this.secNo;
  }

  public SecAccountRecordThrift setSecNo(int secNo) {
    this.secNo = secNo;
    setSecNoIsSet(true);
    return this;
  }

  public void unsetSecNo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SECNO_ISSET_ID);
  }

  /** Returns true if field secNo is set (has been assigned a value) and false otherwise */
  public boolean isSetSecNo() {
    return EncodingUtils.testBit(__isset_bitfield, __SECNO_ISSET_ID);
  }

  public void setSecNoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SECNO_ISSET_ID, value);
  }

  public long getCreatetime() {
    return this.createtime;
  }

  public SecAccountRecordThrift setCreatetime(long createtime) {
    this.createtime = createtime;
    setCreatetimeIsSet(true);
    return this;
  }

  public void unsetCreatetime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createtime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatetime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreatetimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case PHONE:
      if (value == null) {
        unsetPhone();
      } else {
        setPhone((String)value);
      }
      break;

    case AK:
      if (value == null) {
        unsetAk();
      } else {
        setAk((String)value);
      }
      break;

    case SEC_NO:
      if (value == null) {
        unsetSecNo();
      } else {
        setSecNo((Integer)value);
      }
      break;

    case CREATETIME:
      if (value == null) {
        unsetCreatetime();
      } else {
        setCreatetime((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case PHONE:
      return getPhone();

    case AK:
      return getAk();

    case SEC_NO:
      return Integer.valueOf(getSecNo());

    case CREATETIME:
      return Long.valueOf(getCreatetime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case PHONE:
      return isSetPhone();
    case AK:
      return isSetAk();
    case SEC_NO:
      return isSetSecNo();
    case CREATETIME:
      return isSetCreatetime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SecAccountRecordThrift)
      return this.equals((SecAccountRecordThrift)that);
    return false;
  }

  public boolean equals(SecAccountRecordThrift that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_phone = true && this.isSetPhone();
    boolean that_present_phone = true && that.isSetPhone();
    if (this_present_phone || that_present_phone) {
      if (!(this_present_phone && that_present_phone))
        return false;
      if (!this.phone.equals(that.phone))
        return false;
    }

    boolean this_present_ak = true && this.isSetAk();
    boolean that_present_ak = true && that.isSetAk();
    if (this_present_ak || that_present_ak) {
      if (!(this_present_ak && that_present_ak))
        return false;
      if (!this.ak.equals(that.ak))
        return false;
    }

    boolean this_present_secNo = true;
    boolean that_present_secNo = true;
    if (this_present_secNo || that_present_secNo) {
      if (!(this_present_secNo && that_present_secNo))
        return false;
      if (this.secNo != that.secNo)
        return false;
    }

    boolean this_present_createtime = true;
    boolean that_present_createtime = true;
    if (this_present_createtime || that_present_createtime) {
      if (!(this_present_createtime && that_present_createtime))
        return false;
      if (this.createtime != that.createtime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SecAccountRecordThrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAk()).compareTo(other.isSetAk());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAk()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ak, other.ak);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSecNo()).compareTo(other.isSetSecNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secNo, other.secNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatetime()).compareTo(other.isSetCreatetime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatetime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createtime, other.createtime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SecAccountRecordThrift(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("phone:");
    if (this.phone == null) {
      sb.append("null");
    } else {
      sb.append(this.phone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ak:");
    if (this.ak == null) {
      sb.append("null");
    } else {
      sb.append(this.ak);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("secNo:");
    sb.append(this.secNo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createtime:");
    sb.append(this.createtime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SecAccountRecordThriftStandardSchemeFactory implements SchemeFactory {
    public SecAccountRecordThriftStandardScheme getScheme() {
      return new SecAccountRecordThriftStandardScheme();
    }
  }

  private static class SecAccountRecordThriftStandardScheme extends StandardScheme<SecAccountRecordThrift> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SecAccountRecordThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phone = iprot.readString();
              struct.setPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ak = iprot.readString();
              struct.setAkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SEC_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.secNo = iprot.readI32();
              struct.setSecNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CREATETIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createtime = iprot.readI64();
              struct.setCreatetimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SecAccountRecordThrift struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.phone != null) {
        oprot.writeFieldBegin(PHONE_FIELD_DESC);
        oprot.writeString(struct.phone);
        oprot.writeFieldEnd();
      }
      if (struct.ak != null) {
        oprot.writeFieldBegin(AK_FIELD_DESC);
        oprot.writeString(struct.ak);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SEC_NO_FIELD_DESC);
      oprot.writeI32(struct.secNo);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATETIME_FIELD_DESC);
      oprot.writeI64(struct.createtime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SecAccountRecordThriftTupleSchemeFactory implements SchemeFactory {
    public SecAccountRecordThriftTupleScheme getScheme() {
      return new SecAccountRecordThriftTupleScheme();
    }
  }

  private static class SecAccountRecordThriftTupleScheme extends TupleScheme<SecAccountRecordThrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SecAccountRecordThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetPhone()) {
        optionals.set(1);
      }
      if (struct.isSetAk()) {
        optionals.set(2);
      }
      if (struct.isSetSecNo()) {
        optionals.set(3);
      }
      if (struct.isSetCreatetime()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetPhone()) {
        oprot.writeString(struct.phone);
      }
      if (struct.isSetAk()) {
        oprot.writeString(struct.ak);
      }
      if (struct.isSetSecNo()) {
        oprot.writeI32(struct.secNo);
      }
      if (struct.isSetCreatetime()) {
        oprot.writeI64(struct.createtime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SecAccountRecordThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.phone = iprot.readString();
        struct.setPhoneIsSet(true);
      }
      if (incoming.get(2)) {
        struct.ak = iprot.readString();
        struct.setAkIsSet(true);
      }
      if (incoming.get(3)) {
        struct.secNo = iprot.readI32();
        struct.setSecNoIsSet(true);
      }
      if (incoming.get(4)) {
        struct.createtime = iprot.readI64();
        struct.setCreatetimeIsSet(true);
      }
    }
  }

}

