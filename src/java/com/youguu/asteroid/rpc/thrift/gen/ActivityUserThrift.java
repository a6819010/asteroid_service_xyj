/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.youguu.asteroid.rpc.thrift.gen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 活动抽奖用户
 */
public class ActivityUserThrift implements org.apache.thrift.TBase<ActivityUserThrift, ActivityUserThrift._Fields>, java.io.Serializable, Cloneable, Comparable<ActivityUserThrift> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ActivityUserThrift");

  private static final org.apache.thrift.protocol.TField BROKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField BROKER_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerUserId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("ctime", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ActivityUserThriftStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ActivityUserThriftTupleSchemeFactory());
  }

  public int brokerId; // required
  public String brokerUserId; // required
  public int taskId; // required
  public long ctime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BROKER_ID((short)1, "brokerId"),
    BROKER_USER_ID((short)2, "brokerUserId"),
    TASK_ID((short)3, "taskId"),
    CTIME((short)4, "ctime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BROKER_ID
          return BROKER_ID;
        case 2: // BROKER_USER_ID
          return BROKER_USER_ID;
        case 3: // TASK_ID
          return TASK_ID;
        case 4: // CTIME
          return CTIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BROKERID_ISSET_ID = 0;
  private static final int __TASKID_ISSET_ID = 1;
  private static final int __CTIME_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BROKER_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BROKER_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CTIME, new org.apache.thrift.meta_data.FieldMetaData("ctime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ActivityUserThrift.class, metaDataMap);
  }

  public ActivityUserThrift() {
  }

  public ActivityUserThrift(
    int brokerId,
    String brokerUserId,
    int taskId,
    long ctime)
  {
    this();
    this.brokerId = brokerId;
    setBrokerIdIsSet(true);
    this.brokerUserId = brokerUserId;
    this.taskId = taskId;
    setTaskIdIsSet(true);
    this.ctime = ctime;
    setCtimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ActivityUserThrift(ActivityUserThrift other) {
    __isset_bitfield = other.__isset_bitfield;
    this.brokerId = other.brokerId;
    if (other.isSetBrokerUserId()) {
      this.brokerUserId = other.brokerUserId;
    }
    this.taskId = other.taskId;
    this.ctime = other.ctime;
  }

  public ActivityUserThrift deepCopy() {
    return new ActivityUserThrift(this);
  }

  @Override
  public void clear() {
    setBrokerIdIsSet(false);
    this.brokerId = 0;
    this.brokerUserId = null;
    setTaskIdIsSet(false);
    this.taskId = 0;
    setCtimeIsSet(false);
    this.ctime = 0;
  }

  public int getBrokerId() {
    return this.brokerId;
  }

  public ActivityUserThrift setBrokerId(int brokerId) {
    this.brokerId = brokerId;
    setBrokerIdIsSet(true);
    return this;
  }

  public void unsetBrokerId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BROKERID_ISSET_ID);
  }

  /** Returns true if field brokerId is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerId() {
    return EncodingUtils.testBit(__isset_bitfield, __BROKERID_ISSET_ID);
  }

  public void setBrokerIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BROKERID_ISSET_ID, value);
  }

  public String getBrokerUserId() {
    return this.brokerUserId;
  }

  public ActivityUserThrift setBrokerUserId(String brokerUserId) {
    this.brokerUserId = brokerUserId;
    return this;
  }

  public void unsetBrokerUserId() {
    this.brokerUserId = null;
  }

  /** Returns true if field brokerUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerUserId() {
    return this.brokerUserId != null;
  }

  public void setBrokerUserIdIsSet(boolean value) {
    if (!value) {
      this.brokerUserId = null;
    }
  }

  public int getTaskId() {
    return this.taskId;
  }

  public ActivityUserThrift setTaskId(int taskId) {
    this.taskId = taskId;
    setTaskIdIsSet(true);
    return this;
  }

  public void unsetTaskId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TASKID_ISSET_ID);
  }

  /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskId() {
    return EncodingUtils.testBit(__isset_bitfield, __TASKID_ISSET_ID);
  }

  public void setTaskIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TASKID_ISSET_ID, value);
  }

  public long getCtime() {
    return this.ctime;
  }

  public ActivityUserThrift setCtime(long ctime) {
    this.ctime = ctime;
    setCtimeIsSet(true);
    return this;
  }

  public void unsetCtime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CTIME_ISSET_ID);
  }

  /** Returns true if field ctime is set (has been assigned a value) and false otherwise */
  public boolean isSetCtime() {
    return EncodingUtils.testBit(__isset_bitfield, __CTIME_ISSET_ID);
  }

  public void setCtimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CTIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BROKER_ID:
      if (value == null) {
        unsetBrokerId();
      } else {
        setBrokerId((Integer)value);
      }
      break;

    case BROKER_USER_ID:
      if (value == null) {
        unsetBrokerUserId();
      } else {
        setBrokerUserId((String)value);
      }
      break;

    case TASK_ID:
      if (value == null) {
        unsetTaskId();
      } else {
        setTaskId((Integer)value);
      }
      break;

    case CTIME:
      if (value == null) {
        unsetCtime();
      } else {
        setCtime((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BROKER_ID:
      return Integer.valueOf(getBrokerId());

    case BROKER_USER_ID:
      return getBrokerUserId();

    case TASK_ID:
      return Integer.valueOf(getTaskId());

    case CTIME:
      return Long.valueOf(getCtime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BROKER_ID:
      return isSetBrokerId();
    case BROKER_USER_ID:
      return isSetBrokerUserId();
    case TASK_ID:
      return isSetTaskId();
    case CTIME:
      return isSetCtime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ActivityUserThrift)
      return this.equals((ActivityUserThrift)that);
    return false;
  }

  public boolean equals(ActivityUserThrift that) {
    if (that == null)
      return false;

    boolean this_present_brokerId = true;
    boolean that_present_brokerId = true;
    if (this_present_brokerId || that_present_brokerId) {
      if (!(this_present_brokerId && that_present_brokerId))
        return false;
      if (this.brokerId != that.brokerId)
        return false;
    }

    boolean this_present_brokerUserId = true && this.isSetBrokerUserId();
    boolean that_present_brokerUserId = true && that.isSetBrokerUserId();
    if (this_present_brokerUserId || that_present_brokerUserId) {
      if (!(this_present_brokerUserId && that_present_brokerUserId))
        return false;
      if (!this.brokerUserId.equals(that.brokerUserId))
        return false;
    }

    boolean this_present_taskId = true;
    boolean that_present_taskId = true;
    if (this_present_taskId || that_present_taskId) {
      if (!(this_present_taskId && that_present_taskId))
        return false;
      if (this.taskId != that.taskId)
        return false;
    }

    boolean this_present_ctime = true;
    boolean that_present_ctime = true;
    if (this_present_ctime || that_present_ctime) {
      if (!(this_present_ctime && that_present_ctime))
        return false;
      if (this.ctime != that.ctime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ActivityUserThrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBrokerId()).compareTo(other.isSetBrokerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerId, other.brokerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrokerUserId()).compareTo(other.isSetBrokerUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerUserId, other.brokerUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCtime()).compareTo(other.isSetCtime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCtime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ctime, other.ctime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ActivityUserThrift(");
    boolean first = true;

    sb.append("brokerId:");
    sb.append(this.brokerId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("brokerUserId:");
    if (this.brokerUserId == null) {
      sb.append("null");
    } else {
      sb.append(this.brokerUserId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskId:");
    sb.append(this.taskId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ctime:");
    sb.append(this.ctime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ActivityUserThriftStandardSchemeFactory implements SchemeFactory {
    public ActivityUserThriftStandardScheme getScheme() {
      return new ActivityUserThriftStandardScheme();
    }
  }

  private static class ActivityUserThriftStandardScheme extends StandardScheme<ActivityUserThrift> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ActivityUserThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BROKER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.brokerId = iprot.readI32();
              struct.setBrokerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BROKER_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brokerUserId = iprot.readString();
              struct.setBrokerUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TASK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.taskId = iprot.readI32();
              struct.setTaskIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ctime = iprot.readI64();
              struct.setCtimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ActivityUserThrift struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BROKER_ID_FIELD_DESC);
      oprot.writeI32(struct.brokerId);
      oprot.writeFieldEnd();
      if (struct.brokerUserId != null) {
        oprot.writeFieldBegin(BROKER_USER_ID_FIELD_DESC);
        oprot.writeString(struct.brokerUserId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
      oprot.writeI32(struct.taskId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CTIME_FIELD_DESC);
      oprot.writeI64(struct.ctime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ActivityUserThriftTupleSchemeFactory implements SchemeFactory {
    public ActivityUserThriftTupleScheme getScheme() {
      return new ActivityUserThriftTupleScheme();
    }
  }

  private static class ActivityUserThriftTupleScheme extends TupleScheme<ActivityUserThrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ActivityUserThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBrokerId()) {
        optionals.set(0);
      }
      if (struct.isSetBrokerUserId()) {
        optionals.set(1);
      }
      if (struct.isSetTaskId()) {
        optionals.set(2);
      }
      if (struct.isSetCtime()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetBrokerId()) {
        oprot.writeI32(struct.brokerId);
      }
      if (struct.isSetBrokerUserId()) {
        oprot.writeString(struct.brokerUserId);
      }
      if (struct.isSetTaskId()) {
        oprot.writeI32(struct.taskId);
      }
      if (struct.isSetCtime()) {
        oprot.writeI64(struct.ctime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ActivityUserThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.brokerId = iprot.readI32();
        struct.setBrokerIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.brokerUserId = iprot.readString();
        struct.setBrokerUserIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.taskId = iprot.readI32();
        struct.setTaskIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ctime = iprot.readI64();
        struct.setCtimeIsSet(true);
      }
    }
  }

}

