/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.youguu.asteroid.rpc.thrift.gen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 券商开户
 */
public class SecAccountAndTradeThrift implements org.apache.thrift.TBase<SecAccountAndTradeThrift, SecAccountAndTradeThrift._Fields>, java.io.Serializable, Cloneable, Comparable<SecAccountAndTradeThrift> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SecAccountAndTradeThrift");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SEC_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("secNo", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField OS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("osType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField ORDERS_FIELD_DESC = new org.apache.thrift.protocol.TField("orders", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField JSON_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonStr", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SecAccountAndTradeThriftStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SecAccountAndTradeThriftTupleSchemeFactory());
  }

  public int id; // required
  public String name; // required
  public int secNo; // required
  public int osType; // required
  public int type; // required
  public int orders; // required
  public String jsonStr; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    SEC_NO((short)3, "secNo"),
    OS_TYPE((short)4, "osType"),
    TYPE((short)5, "type"),
    ORDERS((short)6, "orders"),
    JSON_STR((short)7, "jsonStr");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // SEC_NO
          return SEC_NO;
        case 4: // OS_TYPE
          return OS_TYPE;
        case 5: // TYPE
          return TYPE;
        case 6: // ORDERS
          return ORDERS;
        case 7: // JSON_STR
          return JSON_STR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __SECNO_ISSET_ID = 1;
  private static final int __OSTYPE_ISSET_ID = 2;
  private static final int __TYPE_ISSET_ID = 3;
  private static final int __ORDERS_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEC_NO, new org.apache.thrift.meta_data.FieldMetaData("secNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("osType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORDERS, new org.apache.thrift.meta_data.FieldMetaData("orders", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.JSON_STR, new org.apache.thrift.meta_data.FieldMetaData("jsonStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SecAccountAndTradeThrift.class, metaDataMap);
  }

  public SecAccountAndTradeThrift() {
  }

  public SecAccountAndTradeThrift(
    int id,
    String name,
    int secNo,
    int osType,
    int type,
    int orders,
    String jsonStr)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.name = name;
    this.secNo = secNo;
    setSecNoIsSet(true);
    this.osType = osType;
    setOsTypeIsSet(true);
    this.type = type;
    setTypeIsSet(true);
    this.orders = orders;
    setOrdersIsSet(true);
    this.jsonStr = jsonStr;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SecAccountAndTradeThrift(SecAccountAndTradeThrift other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.secNo = other.secNo;
    this.osType = other.osType;
    this.type = other.type;
    this.orders = other.orders;
    if (other.isSetJsonStr()) {
      this.jsonStr = other.jsonStr;
    }
  }

  public SecAccountAndTradeThrift deepCopy() {
    return new SecAccountAndTradeThrift(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    setSecNoIsSet(false);
    this.secNo = 0;
    setOsTypeIsSet(false);
    this.osType = 0;
    setTypeIsSet(false);
    this.type = 0;
    setOrdersIsSet(false);
    this.orders = 0;
    this.jsonStr = null;
  }

  public int getId() {
    return this.id;
  }

  public SecAccountAndTradeThrift setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public SecAccountAndTradeThrift setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getSecNo() {
    return this.secNo;
  }

  public SecAccountAndTradeThrift setSecNo(int secNo) {
    this.secNo = secNo;
    setSecNoIsSet(true);
    return this;
  }

  public void unsetSecNo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SECNO_ISSET_ID);
  }

  /** Returns true if field secNo is set (has been assigned a value) and false otherwise */
  public boolean isSetSecNo() {
    return EncodingUtils.testBit(__isset_bitfield, __SECNO_ISSET_ID);
  }

  public void setSecNoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SECNO_ISSET_ID, value);
  }

  public int getOsType() {
    return this.osType;
  }

  public SecAccountAndTradeThrift setOsType(int osType) {
    this.osType = osType;
    setOsTypeIsSet(true);
    return this;
  }

  public void unsetOsType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OSTYPE_ISSET_ID);
  }

  /** Returns true if field osType is set (has been assigned a value) and false otherwise */
  public boolean isSetOsType() {
    return EncodingUtils.testBit(__isset_bitfield, __OSTYPE_ISSET_ID);
  }

  public void setOsTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OSTYPE_ISSET_ID, value);
  }

  public int getType() {
    return this.type;
  }

  public SecAccountAndTradeThrift setType(int type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public int getOrders() {
    return this.orders;
  }

  public SecAccountAndTradeThrift setOrders(int orders) {
    this.orders = orders;
    setOrdersIsSet(true);
    return this;
  }

  public void unsetOrders() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERS_ISSET_ID);
  }

  /** Returns true if field orders is set (has been assigned a value) and false otherwise */
  public boolean isSetOrders() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERS_ISSET_ID);
  }

  public void setOrdersIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERS_ISSET_ID, value);
  }

  public String getJsonStr() {
    return this.jsonStr;
  }

  public SecAccountAndTradeThrift setJsonStr(String jsonStr) {
    this.jsonStr = jsonStr;
    return this;
  }

  public void unsetJsonStr() {
    this.jsonStr = null;
  }

  /** Returns true if field jsonStr is set (has been assigned a value) and false otherwise */
  public boolean isSetJsonStr() {
    return this.jsonStr != null;
  }

  public void setJsonStrIsSet(boolean value) {
    if (!value) {
      this.jsonStr = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case SEC_NO:
      if (value == null) {
        unsetSecNo();
      } else {
        setSecNo((Integer)value);
      }
      break;

    case OS_TYPE:
      if (value == null) {
        unsetOsType();
      } else {
        setOsType((Integer)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    case ORDERS:
      if (value == null) {
        unsetOrders();
      } else {
        setOrders((Integer)value);
      }
      break;

    case JSON_STR:
      if (value == null) {
        unsetJsonStr();
      } else {
        setJsonStr((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case NAME:
      return getName();

    case SEC_NO:
      return Integer.valueOf(getSecNo());

    case OS_TYPE:
      return Integer.valueOf(getOsType());

    case TYPE:
      return Integer.valueOf(getType());

    case ORDERS:
      return Integer.valueOf(getOrders());

    case JSON_STR:
      return getJsonStr();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case SEC_NO:
      return isSetSecNo();
    case OS_TYPE:
      return isSetOsType();
    case TYPE:
      return isSetType();
    case ORDERS:
      return isSetOrders();
    case JSON_STR:
      return isSetJsonStr();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SecAccountAndTradeThrift)
      return this.equals((SecAccountAndTradeThrift)that);
    return false;
  }

  public boolean equals(SecAccountAndTradeThrift that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_secNo = true;
    boolean that_present_secNo = true;
    if (this_present_secNo || that_present_secNo) {
      if (!(this_present_secNo && that_present_secNo))
        return false;
      if (this.secNo != that.secNo)
        return false;
    }

    boolean this_present_osType = true;
    boolean that_present_osType = true;
    if (this_present_osType || that_present_osType) {
      if (!(this_present_osType && that_present_osType))
        return false;
      if (this.osType != that.osType)
        return false;
    }

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_orders = true;
    boolean that_present_orders = true;
    if (this_present_orders || that_present_orders) {
      if (!(this_present_orders && that_present_orders))
        return false;
      if (this.orders != that.orders)
        return false;
    }

    boolean this_present_jsonStr = true && this.isSetJsonStr();
    boolean that_present_jsonStr = true && that.isSetJsonStr();
    if (this_present_jsonStr || that_present_jsonStr) {
      if (!(this_present_jsonStr && that_present_jsonStr))
        return false;
      if (!this.jsonStr.equals(that.jsonStr))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SecAccountAndTradeThrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSecNo()).compareTo(other.isSetSecNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secNo, other.secNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOsType()).compareTo(other.isSetOsType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOsType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.osType, other.osType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrders()).compareTo(other.isSetOrders());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrders()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orders, other.orders);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJsonStr()).compareTo(other.isSetJsonStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJsonStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonStr, other.jsonStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SecAccountAndTradeThrift(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("secNo:");
    sb.append(this.secNo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("osType:");
    sb.append(this.osType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orders:");
    sb.append(this.orders);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jsonStr:");
    if (this.jsonStr == null) {
      sb.append("null");
    } else {
      sb.append(this.jsonStr);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SecAccountAndTradeThriftStandardSchemeFactory implements SchemeFactory {
    public SecAccountAndTradeThriftStandardScheme getScheme() {
      return new SecAccountAndTradeThriftStandardScheme();
    }
  }

  private static class SecAccountAndTradeThriftStandardScheme extends StandardScheme<SecAccountAndTradeThrift> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SecAccountAndTradeThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SEC_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.secNo = iprot.readI32();
              struct.setSecNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.osType = iprot.readI32();
              struct.setOsTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = iprot.readI32();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ORDERS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orders = iprot.readI32();
              struct.setOrdersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // JSON_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jsonStr = iprot.readString();
              struct.setJsonStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SecAccountAndTradeThrift struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SEC_NO_FIELD_DESC);
      oprot.writeI32(struct.secNo);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OS_TYPE_FIELD_DESC);
      oprot.writeI32(struct.osType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(struct.type);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ORDERS_FIELD_DESC);
      oprot.writeI32(struct.orders);
      oprot.writeFieldEnd();
      if (struct.jsonStr != null) {
        oprot.writeFieldBegin(JSON_STR_FIELD_DESC);
        oprot.writeString(struct.jsonStr);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SecAccountAndTradeThriftTupleSchemeFactory implements SchemeFactory {
    public SecAccountAndTradeThriftTupleScheme getScheme() {
      return new SecAccountAndTradeThriftTupleScheme();
    }
  }

  private static class SecAccountAndTradeThriftTupleScheme extends TupleScheme<SecAccountAndTradeThrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SecAccountAndTradeThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetSecNo()) {
        optionals.set(2);
      }
      if (struct.isSetOsType()) {
        optionals.set(3);
      }
      if (struct.isSetType()) {
        optionals.set(4);
      }
      if (struct.isSetOrders()) {
        optionals.set(5);
      }
      if (struct.isSetJsonStr()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetSecNo()) {
        oprot.writeI32(struct.secNo);
      }
      if (struct.isSetOsType()) {
        oprot.writeI32(struct.osType);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type);
      }
      if (struct.isSetOrders()) {
        oprot.writeI32(struct.orders);
      }
      if (struct.isSetJsonStr()) {
        oprot.writeString(struct.jsonStr);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SecAccountAndTradeThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.secNo = iprot.readI32();
        struct.setSecNoIsSet(true);
      }
      if (incoming.get(3)) {
        struct.osType = iprot.readI32();
        struct.setOsTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.type = iprot.readI32();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.orders = iprot.readI32();
        struct.setOrdersIsSet(true);
      }
      if (incoming.get(6)) {
        struct.jsonStr = iprot.readString();
        struct.setJsonStrIsSet(true);
      }
    }
  }

}

