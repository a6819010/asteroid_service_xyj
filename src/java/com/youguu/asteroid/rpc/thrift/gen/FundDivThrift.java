/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.youguu.asteroid.rpc.thrift.gen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 分级基金信息service
 */
public class FundDivThrift implements org.apache.thrift.TBase<FundDivThrift, FundDivThrift._Fields>, java.io.Serializable, Cloneable, Comparable<FundDivThrift> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FundDivThrift");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FUND_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("fundCode", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DIV_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("divType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CASH_BT_FIELD_DESC = new org.apache.thrift.protocol.TField("cashBT", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField CASH_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("cashAT", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField FUND_RATIO_FIELD_DESC = new org.apache.thrift.protocol.TField("fundRatio", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField REG_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("regDate", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField EXDIV_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("exdivDate", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField IMPORT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("importTime", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FundDivThriftStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FundDivThriftTupleSchemeFactory());
  }

  public int id; // required
  public String fundCode; // required
  public int divType; // required
  public double cashBT; // required
  public double cashAT; // required
  public double fundRatio; // required
  public String regDate; // required
  public String exdivDate; // required
  public int status; // required
  public String importTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    FUND_CODE((short)2, "fundCode"),
    DIV_TYPE((short)3, "divType"),
    CASH_BT((short)4, "cashBT"),
    CASH_AT((short)5, "cashAT"),
    FUND_RATIO((short)6, "fundRatio"),
    REG_DATE((short)7, "regDate"),
    EXDIV_DATE((short)8, "exdivDate"),
    STATUS((short)9, "status"),
    IMPORT_TIME((short)10, "importTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // FUND_CODE
          return FUND_CODE;
        case 3: // DIV_TYPE
          return DIV_TYPE;
        case 4: // CASH_BT
          return CASH_BT;
        case 5: // CASH_AT
          return CASH_AT;
        case 6: // FUND_RATIO
          return FUND_RATIO;
        case 7: // REG_DATE
          return REG_DATE;
        case 8: // EXDIV_DATE
          return EXDIV_DATE;
        case 9: // STATUS
          return STATUS;
        case 10: // IMPORT_TIME
          return IMPORT_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __DIVTYPE_ISSET_ID = 1;
  private static final int __CASHBT_ISSET_ID = 2;
  private static final int __CASHAT_ISSET_ID = 3;
  private static final int __FUNDRATIO_ISSET_ID = 4;
  private static final int __STATUS_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FUND_CODE, new org.apache.thrift.meta_data.FieldMetaData("fundCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DIV_TYPE, new org.apache.thrift.meta_data.FieldMetaData("divType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CASH_BT, new org.apache.thrift.meta_data.FieldMetaData("cashBT", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CASH_AT, new org.apache.thrift.meta_data.FieldMetaData("cashAT", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FUND_RATIO, new org.apache.thrift.meta_data.FieldMetaData("fundRatio", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REG_DATE, new org.apache.thrift.meta_data.FieldMetaData("regDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXDIV_DATE, new org.apache.thrift.meta_data.FieldMetaData("exdivDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IMPORT_TIME, new org.apache.thrift.meta_data.FieldMetaData("importTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FundDivThrift.class, metaDataMap);
  }

  public FundDivThrift() {
  }

  public FundDivThrift(
    int id,
    String fundCode,
    int divType,
    double cashBT,
    double cashAT,
    double fundRatio,
    String regDate,
    String exdivDate,
    int status,
    String importTime)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.fundCode = fundCode;
    this.divType = divType;
    setDivTypeIsSet(true);
    this.cashBT = cashBT;
    setCashBTIsSet(true);
    this.cashAT = cashAT;
    setCashATIsSet(true);
    this.fundRatio = fundRatio;
    setFundRatioIsSet(true);
    this.regDate = regDate;
    this.exdivDate = exdivDate;
    this.status = status;
    setStatusIsSet(true);
    this.importTime = importTime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FundDivThrift(FundDivThrift other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetFundCode()) {
      this.fundCode = other.fundCode;
    }
    this.divType = other.divType;
    this.cashBT = other.cashBT;
    this.cashAT = other.cashAT;
    this.fundRatio = other.fundRatio;
    if (other.isSetRegDate()) {
      this.regDate = other.regDate;
    }
    if (other.isSetExdivDate()) {
      this.exdivDate = other.exdivDate;
    }
    this.status = other.status;
    if (other.isSetImportTime()) {
      this.importTime = other.importTime;
    }
  }

  public FundDivThrift deepCopy() {
    return new FundDivThrift(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.fundCode = null;
    setDivTypeIsSet(false);
    this.divType = 0;
    setCashBTIsSet(false);
    this.cashBT = 0.0;
    setCashATIsSet(false);
    this.cashAT = 0.0;
    setFundRatioIsSet(false);
    this.fundRatio = 0.0;
    this.regDate = null;
    this.exdivDate = null;
    setStatusIsSet(false);
    this.status = 0;
    this.importTime = null;
  }

  public int getId() {
    return this.id;
  }

  public FundDivThrift setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getFundCode() {
    return this.fundCode;
  }

  public FundDivThrift setFundCode(String fundCode) {
    this.fundCode = fundCode;
    return this;
  }

  public void unsetFundCode() {
    this.fundCode = null;
  }

  /** Returns true if field fundCode is set (has been assigned a value) and false otherwise */
  public boolean isSetFundCode() {
    return this.fundCode != null;
  }

  public void setFundCodeIsSet(boolean value) {
    if (!value) {
      this.fundCode = null;
    }
  }

  public int getDivType() {
    return this.divType;
  }

  public FundDivThrift setDivType(int divType) {
    this.divType = divType;
    setDivTypeIsSet(true);
    return this;
  }

  public void unsetDivType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIVTYPE_ISSET_ID);
  }

  /** Returns true if field divType is set (has been assigned a value) and false otherwise */
  public boolean isSetDivType() {
    return EncodingUtils.testBit(__isset_bitfield, __DIVTYPE_ISSET_ID);
  }

  public void setDivTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIVTYPE_ISSET_ID, value);
  }

  public double getCashBT() {
    return this.cashBT;
  }

  public FundDivThrift setCashBT(double cashBT) {
    this.cashBT = cashBT;
    setCashBTIsSet(true);
    return this;
  }

  public void unsetCashBT() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CASHBT_ISSET_ID);
  }

  /** Returns true if field cashBT is set (has been assigned a value) and false otherwise */
  public boolean isSetCashBT() {
    return EncodingUtils.testBit(__isset_bitfield, __CASHBT_ISSET_ID);
  }

  public void setCashBTIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CASHBT_ISSET_ID, value);
  }

  public double getCashAT() {
    return this.cashAT;
  }

  public FundDivThrift setCashAT(double cashAT) {
    this.cashAT = cashAT;
    setCashATIsSet(true);
    return this;
  }

  public void unsetCashAT() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CASHAT_ISSET_ID);
  }

  /** Returns true if field cashAT is set (has been assigned a value) and false otherwise */
  public boolean isSetCashAT() {
    return EncodingUtils.testBit(__isset_bitfield, __CASHAT_ISSET_ID);
  }

  public void setCashATIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CASHAT_ISSET_ID, value);
  }

  public double getFundRatio() {
    return this.fundRatio;
  }

  public FundDivThrift setFundRatio(double fundRatio) {
    this.fundRatio = fundRatio;
    setFundRatioIsSet(true);
    return this;
  }

  public void unsetFundRatio() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FUNDRATIO_ISSET_ID);
  }

  /** Returns true if field fundRatio is set (has been assigned a value) and false otherwise */
  public boolean isSetFundRatio() {
    return EncodingUtils.testBit(__isset_bitfield, __FUNDRATIO_ISSET_ID);
  }

  public void setFundRatioIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FUNDRATIO_ISSET_ID, value);
  }

  public String getRegDate() {
    return this.regDate;
  }

  public FundDivThrift setRegDate(String regDate) {
    this.regDate = regDate;
    return this;
  }

  public void unsetRegDate() {
    this.regDate = null;
  }

  /** Returns true if field regDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRegDate() {
    return this.regDate != null;
  }

  public void setRegDateIsSet(boolean value) {
    if (!value) {
      this.regDate = null;
    }
  }

  public String getExdivDate() {
    return this.exdivDate;
  }

  public FundDivThrift setExdivDate(String exdivDate) {
    this.exdivDate = exdivDate;
    return this;
  }

  public void unsetExdivDate() {
    this.exdivDate = null;
  }

  /** Returns true if field exdivDate is set (has been assigned a value) and false otherwise */
  public boolean isSetExdivDate() {
    return this.exdivDate != null;
  }

  public void setExdivDateIsSet(boolean value) {
    if (!value) {
      this.exdivDate = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public FundDivThrift setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getImportTime() {
    return this.importTime;
  }

  public FundDivThrift setImportTime(String importTime) {
    this.importTime = importTime;
    return this;
  }

  public void unsetImportTime() {
    this.importTime = null;
  }

  /** Returns true if field importTime is set (has been assigned a value) and false otherwise */
  public boolean isSetImportTime() {
    return this.importTime != null;
  }

  public void setImportTimeIsSet(boolean value) {
    if (!value) {
      this.importTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case FUND_CODE:
      if (value == null) {
        unsetFundCode();
      } else {
        setFundCode((String)value);
      }
      break;

    case DIV_TYPE:
      if (value == null) {
        unsetDivType();
      } else {
        setDivType((Integer)value);
      }
      break;

    case CASH_BT:
      if (value == null) {
        unsetCashBT();
      } else {
        setCashBT((Double)value);
      }
      break;

    case CASH_AT:
      if (value == null) {
        unsetCashAT();
      } else {
        setCashAT((Double)value);
      }
      break;

    case FUND_RATIO:
      if (value == null) {
        unsetFundRatio();
      } else {
        setFundRatio((Double)value);
      }
      break;

    case REG_DATE:
      if (value == null) {
        unsetRegDate();
      } else {
        setRegDate((String)value);
      }
      break;

    case EXDIV_DATE:
      if (value == null) {
        unsetExdivDate();
      } else {
        setExdivDate((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case IMPORT_TIME:
      if (value == null) {
        unsetImportTime();
      } else {
        setImportTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case FUND_CODE:
      return getFundCode();

    case DIV_TYPE:
      return Integer.valueOf(getDivType());

    case CASH_BT:
      return Double.valueOf(getCashBT());

    case CASH_AT:
      return Double.valueOf(getCashAT());

    case FUND_RATIO:
      return Double.valueOf(getFundRatio());

    case REG_DATE:
      return getRegDate();

    case EXDIV_DATE:
      return getExdivDate();

    case STATUS:
      return Integer.valueOf(getStatus());

    case IMPORT_TIME:
      return getImportTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case FUND_CODE:
      return isSetFundCode();
    case DIV_TYPE:
      return isSetDivType();
    case CASH_BT:
      return isSetCashBT();
    case CASH_AT:
      return isSetCashAT();
    case FUND_RATIO:
      return isSetFundRatio();
    case REG_DATE:
      return isSetRegDate();
    case EXDIV_DATE:
      return isSetExdivDate();
    case STATUS:
      return isSetStatus();
    case IMPORT_TIME:
      return isSetImportTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FundDivThrift)
      return this.equals((FundDivThrift)that);
    return false;
  }

  public boolean equals(FundDivThrift that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_fundCode = true && this.isSetFundCode();
    boolean that_present_fundCode = true && that.isSetFundCode();
    if (this_present_fundCode || that_present_fundCode) {
      if (!(this_present_fundCode && that_present_fundCode))
        return false;
      if (!this.fundCode.equals(that.fundCode))
        return false;
    }

    boolean this_present_divType = true;
    boolean that_present_divType = true;
    if (this_present_divType || that_present_divType) {
      if (!(this_present_divType && that_present_divType))
        return false;
      if (this.divType != that.divType)
        return false;
    }

    boolean this_present_cashBT = true;
    boolean that_present_cashBT = true;
    if (this_present_cashBT || that_present_cashBT) {
      if (!(this_present_cashBT && that_present_cashBT))
        return false;
      if (this.cashBT != that.cashBT)
        return false;
    }

    boolean this_present_cashAT = true;
    boolean that_present_cashAT = true;
    if (this_present_cashAT || that_present_cashAT) {
      if (!(this_present_cashAT && that_present_cashAT))
        return false;
      if (this.cashAT != that.cashAT)
        return false;
    }

    boolean this_present_fundRatio = true;
    boolean that_present_fundRatio = true;
    if (this_present_fundRatio || that_present_fundRatio) {
      if (!(this_present_fundRatio && that_present_fundRatio))
        return false;
      if (this.fundRatio != that.fundRatio)
        return false;
    }

    boolean this_present_regDate = true && this.isSetRegDate();
    boolean that_present_regDate = true && that.isSetRegDate();
    if (this_present_regDate || that_present_regDate) {
      if (!(this_present_regDate && that_present_regDate))
        return false;
      if (!this.regDate.equals(that.regDate))
        return false;
    }

    boolean this_present_exdivDate = true && this.isSetExdivDate();
    boolean that_present_exdivDate = true && that.isSetExdivDate();
    if (this_present_exdivDate || that_present_exdivDate) {
      if (!(this_present_exdivDate && that_present_exdivDate))
        return false;
      if (!this.exdivDate.equals(that.exdivDate))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_importTime = true && this.isSetImportTime();
    boolean that_present_importTime = true && that.isSetImportTime();
    if (this_present_importTime || that_present_importTime) {
      if (!(this_present_importTime && that_present_importTime))
        return false;
      if (!this.importTime.equals(that.importTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(FundDivThrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFundCode()).compareTo(other.isSetFundCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFundCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fundCode, other.fundCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDivType()).compareTo(other.isSetDivType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDivType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.divType, other.divType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCashBT()).compareTo(other.isSetCashBT());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCashBT()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cashBT, other.cashBT);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCashAT()).compareTo(other.isSetCashAT());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCashAT()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cashAT, other.cashAT);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFundRatio()).compareTo(other.isSetFundRatio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFundRatio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fundRatio, other.fundRatio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegDate()).compareTo(other.isSetRegDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regDate, other.regDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExdivDate()).compareTo(other.isSetExdivDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExdivDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exdivDate, other.exdivDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImportTime()).compareTo(other.isSetImportTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImportTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.importTime, other.importTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FundDivThrift(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fundCode:");
    if (this.fundCode == null) {
      sb.append("null");
    } else {
      sb.append(this.fundCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("divType:");
    sb.append(this.divType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cashBT:");
    sb.append(this.cashBT);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cashAT:");
    sb.append(this.cashAT);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fundRatio:");
    sb.append(this.fundRatio);
    first = false;
    if (!first) sb.append(", ");
    sb.append("regDate:");
    if (this.regDate == null) {
      sb.append("null");
    } else {
      sb.append(this.regDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exdivDate:");
    if (this.exdivDate == null) {
      sb.append("null");
    } else {
      sb.append(this.exdivDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("importTime:");
    if (this.importTime == null) {
      sb.append("null");
    } else {
      sb.append(this.importTime);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FundDivThriftStandardSchemeFactory implements SchemeFactory {
    public FundDivThriftStandardScheme getScheme() {
      return new FundDivThriftStandardScheme();
    }
  }

  private static class FundDivThriftStandardScheme extends StandardScheme<FundDivThrift> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FundDivThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FUND_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fundCode = iprot.readString();
              struct.setFundCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DIV_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.divType = iprot.readI32();
              struct.setDivTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CASH_BT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cashBT = iprot.readDouble();
              struct.setCashBTIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CASH_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cashAT = iprot.readDouble();
              struct.setCashATIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FUND_RATIO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fundRatio = iprot.readDouble();
              struct.setFundRatioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REG_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.regDate = iprot.readString();
              struct.setRegDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // EXDIV_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exdivDate = iprot.readString();
              struct.setExdivDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // IMPORT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.importTime = iprot.readString();
              struct.setImportTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FundDivThrift struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.fundCode != null) {
        oprot.writeFieldBegin(FUND_CODE_FIELD_DESC);
        oprot.writeString(struct.fundCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DIV_TYPE_FIELD_DESC);
      oprot.writeI32(struct.divType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CASH_BT_FIELD_DESC);
      oprot.writeDouble(struct.cashBT);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CASH_AT_FIELD_DESC);
      oprot.writeDouble(struct.cashAT);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FUND_RATIO_FIELD_DESC);
      oprot.writeDouble(struct.fundRatio);
      oprot.writeFieldEnd();
      if (struct.regDate != null) {
        oprot.writeFieldBegin(REG_DATE_FIELD_DESC);
        oprot.writeString(struct.regDate);
        oprot.writeFieldEnd();
      }
      if (struct.exdivDate != null) {
        oprot.writeFieldBegin(EXDIV_DATE_FIELD_DESC);
        oprot.writeString(struct.exdivDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.importTime != null) {
        oprot.writeFieldBegin(IMPORT_TIME_FIELD_DESC);
        oprot.writeString(struct.importTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FundDivThriftTupleSchemeFactory implements SchemeFactory {
    public FundDivThriftTupleScheme getScheme() {
      return new FundDivThriftTupleScheme();
    }
  }

  private static class FundDivThriftTupleScheme extends TupleScheme<FundDivThrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FundDivThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetFundCode()) {
        optionals.set(1);
      }
      if (struct.isSetDivType()) {
        optionals.set(2);
      }
      if (struct.isSetCashBT()) {
        optionals.set(3);
      }
      if (struct.isSetCashAT()) {
        optionals.set(4);
      }
      if (struct.isSetFundRatio()) {
        optionals.set(5);
      }
      if (struct.isSetRegDate()) {
        optionals.set(6);
      }
      if (struct.isSetExdivDate()) {
        optionals.set(7);
      }
      if (struct.isSetStatus()) {
        optionals.set(8);
      }
      if (struct.isSetImportTime()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetFundCode()) {
        oprot.writeString(struct.fundCode);
      }
      if (struct.isSetDivType()) {
        oprot.writeI32(struct.divType);
      }
      if (struct.isSetCashBT()) {
        oprot.writeDouble(struct.cashBT);
      }
      if (struct.isSetCashAT()) {
        oprot.writeDouble(struct.cashAT);
      }
      if (struct.isSetFundRatio()) {
        oprot.writeDouble(struct.fundRatio);
      }
      if (struct.isSetRegDate()) {
        oprot.writeString(struct.regDate);
      }
      if (struct.isSetExdivDate()) {
        oprot.writeString(struct.exdivDate);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetImportTime()) {
        oprot.writeString(struct.importTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FundDivThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.fundCode = iprot.readString();
        struct.setFundCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.divType = iprot.readI32();
        struct.setDivTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.cashBT = iprot.readDouble();
        struct.setCashBTIsSet(true);
      }
      if (incoming.get(4)) {
        struct.cashAT = iprot.readDouble();
        struct.setCashATIsSet(true);
      }
      if (incoming.get(5)) {
        struct.fundRatio = iprot.readDouble();
        struct.setFundRatioIsSet(true);
      }
      if (incoming.get(6)) {
        struct.regDate = iprot.readString();
        struct.setRegDateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.exdivDate = iprot.readString();
        struct.setExdivDateIsSet(true);
      }
      if (incoming.get(8)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(9)) {
        struct.importTime = iprot.readString();
        struct.setImportTimeIsSet(true);
      }
    }
  }

}

