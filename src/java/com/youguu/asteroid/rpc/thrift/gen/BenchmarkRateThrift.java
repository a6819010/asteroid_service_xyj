/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.youguu.asteroid.rpc.thrift.gen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 基准利率表
 */
public class BenchmarkRateThrift implements org.apache.thrift.TBase<BenchmarkRateThrift, BenchmarkRateThrift._Fields>, java.io.Serializable, Cloneable, Comparable<BenchmarkRateThrift> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BenchmarkRateThrift");

  private static final org.apache.thrift.protocol.TField BUSINESS_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("businessRate", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField HOUSING_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("housingRate", org.apache.thrift.protocol.TType.DOUBLE, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BenchmarkRateThriftStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BenchmarkRateThriftTupleSchemeFactory());
  }

  public double businessRate; // required
  public long updateTime; // required
  public int id; // required
  public double housingRate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BUSINESS_RATE((short)1, "businessRate"),
    UPDATE_TIME((short)2, "updateTime"),
    ID((short)3, "id"),
    HOUSING_RATE((short)4, "housingRate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BUSINESS_RATE
          return BUSINESS_RATE;
        case 2: // UPDATE_TIME
          return UPDATE_TIME;
        case 3: // ID
          return ID;
        case 4: // HOUSING_RATE
          return HOUSING_RATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BUSINESSRATE_ISSET_ID = 0;
  private static final int __UPDATETIME_ISSET_ID = 1;
  private static final int __ID_ISSET_ID = 2;
  private static final int __HOUSINGRATE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BUSINESS_RATE, new org.apache.thrift.meta_data.FieldMetaData("businessRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HOUSING_RATE, new org.apache.thrift.meta_data.FieldMetaData("housingRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BenchmarkRateThrift.class, metaDataMap);
  }

  public BenchmarkRateThrift() {
  }

  public BenchmarkRateThrift(
    double businessRate,
    long updateTime,
    int id,
    double housingRate)
  {
    this();
    this.businessRate = businessRate;
    setBusinessRateIsSet(true);
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    this.id = id;
    setIdIsSet(true);
    this.housingRate = housingRate;
    setHousingRateIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BenchmarkRateThrift(BenchmarkRateThrift other) {
    __isset_bitfield = other.__isset_bitfield;
    this.businessRate = other.businessRate;
    this.updateTime = other.updateTime;
    this.id = other.id;
    this.housingRate = other.housingRate;
  }

  public BenchmarkRateThrift deepCopy() {
    return new BenchmarkRateThrift(this);
  }

  @Override
  public void clear() {
    setBusinessRateIsSet(false);
    this.businessRate = 0.0;
    setUpdateTimeIsSet(false);
    this.updateTime = 0;
    setIdIsSet(false);
    this.id = 0;
    setHousingRateIsSet(false);
    this.housingRate = 0.0;
  }

  public double getBusinessRate() {
    return this.businessRate;
  }

  public BenchmarkRateThrift setBusinessRate(double businessRate) {
    this.businessRate = businessRate;
    setBusinessRateIsSet(true);
    return this;
  }

  public void unsetBusinessRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BUSINESSRATE_ISSET_ID);
  }

  /** Returns true if field businessRate is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessRate() {
    return EncodingUtils.testBit(__isset_bitfield, __BUSINESSRATE_ISSET_ID);
  }

  public void setBusinessRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BUSINESSRATE_ISSET_ID, value);
  }

  public long getUpdateTime() {
    return this.updateTime;
  }

  public BenchmarkRateThrift setUpdateTime(long updateTime) {
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    return this;
  }

  public void unsetUpdateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  public void setUpdateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATETIME_ISSET_ID, value);
  }

  public int getId() {
    return this.id;
  }

  public BenchmarkRateThrift setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public double getHousingRate() {
    return this.housingRate;
  }

  public BenchmarkRateThrift setHousingRate(double housingRate) {
    this.housingRate = housingRate;
    setHousingRateIsSet(true);
    return this;
  }

  public void unsetHousingRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HOUSINGRATE_ISSET_ID);
  }

  /** Returns true if field housingRate is set (has been assigned a value) and false otherwise */
  public boolean isSetHousingRate() {
    return EncodingUtils.testBit(__isset_bitfield, __HOUSINGRATE_ISSET_ID);
  }

  public void setHousingRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HOUSINGRATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BUSINESS_RATE:
      if (value == null) {
        unsetBusinessRate();
      } else {
        setBusinessRate((Double)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((Long)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case HOUSING_RATE:
      if (value == null) {
        unsetHousingRate();
      } else {
        setHousingRate((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BUSINESS_RATE:
      return Double.valueOf(getBusinessRate());

    case UPDATE_TIME:
      return Long.valueOf(getUpdateTime());

    case ID:
      return Integer.valueOf(getId());

    case HOUSING_RATE:
      return Double.valueOf(getHousingRate());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BUSINESS_RATE:
      return isSetBusinessRate();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case ID:
      return isSetId();
    case HOUSING_RATE:
      return isSetHousingRate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BenchmarkRateThrift)
      return this.equals((BenchmarkRateThrift)that);
    return false;
  }

  public boolean equals(BenchmarkRateThrift that) {
    if (that == null)
      return false;

    boolean this_present_businessRate = true;
    boolean that_present_businessRate = true;
    if (this_present_businessRate || that_present_businessRate) {
      if (!(this_present_businessRate && that_present_businessRate))
        return false;
      if (this.businessRate != that.businessRate)
        return false;
    }

    boolean this_present_updateTime = true;
    boolean that_present_updateTime = true;
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (this.updateTime != that.updateTime)
        return false;
    }

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_housingRate = true;
    boolean that_present_housingRate = true;
    if (this_present_housingRate || that_present_housingRate) {
      if (!(this_present_housingRate && that_present_housingRate))
        return false;
      if (this.housingRate != that.housingRate)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(BenchmarkRateThrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBusinessRate()).compareTo(other.isSetBusinessRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessRate, other.businessRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHousingRate()).compareTo(other.isSetHousingRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHousingRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.housingRate, other.housingRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BenchmarkRateThrift(");
    boolean first = true;

    sb.append("businessRate:");
    sb.append(this.businessRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTime:");
    sb.append(this.updateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("housingRate:");
    sb.append(this.housingRate);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BenchmarkRateThriftStandardSchemeFactory implements SchemeFactory {
    public BenchmarkRateThriftStandardScheme getScheme() {
      return new BenchmarkRateThriftStandardScheme();
    }
  }

  private static class BenchmarkRateThriftStandardScheme extends StandardScheme<BenchmarkRateThrift> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BenchmarkRateThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BUSINESS_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.businessRate = iprot.readDouble();
              struct.setBusinessRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updateTime = iprot.readI64();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HOUSING_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.housingRate = iprot.readDouble();
              struct.setHousingRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BenchmarkRateThrift struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BUSINESS_RATE_FIELD_DESC);
      oprot.writeDouble(struct.businessRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.updateTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HOUSING_RATE_FIELD_DESC);
      oprot.writeDouble(struct.housingRate);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BenchmarkRateThriftTupleSchemeFactory implements SchemeFactory {
    public BenchmarkRateThriftTupleScheme getScheme() {
      return new BenchmarkRateThriftTupleScheme();
    }
  }

  private static class BenchmarkRateThriftTupleScheme extends TupleScheme<BenchmarkRateThrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BenchmarkRateThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBusinessRate()) {
        optionals.set(0);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(1);
      }
      if (struct.isSetId()) {
        optionals.set(2);
      }
      if (struct.isSetHousingRate()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetBusinessRate()) {
        oprot.writeDouble(struct.businessRate);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeI64(struct.updateTime);
      }
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetHousingRate()) {
        oprot.writeDouble(struct.housingRate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BenchmarkRateThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.businessRate = iprot.readDouble();
        struct.setBusinessRateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.updateTime = iprot.readI64();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.housingRate = iprot.readDouble();
        struct.setHousingRateIsSet(true);
      }
    }
  }

}

