/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.youguu.asteroid.rpc.thrift.gen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FundService {

  /**
   * FundService 基金管理接口
   */
  public interface Iface {

    /**
     * 通过条件查询基金信息
     * 
     * @param fundCode
     * @param regDateStart
     * @param regDateEnd
     * @param convertDateStart
     * @param convertDateEnd
     * @param convertType
     * @param status
     * @param pageStart
     * @param pageSize
     */
    public List<FundConvertThrift> queryFundConvert(String fundCode, String regDateStart, String regDateEnd, String convertDateStart, String convertDateEnd, int convertType, int status, int pageStart, int pageSize) throws org.apache.thrift.TException;

    /**
     * 添加基金信息
     * 
     * @param fund
     */
    public int insertFundConvert(FundConvertThrift fund) throws org.apache.thrift.TException;

    /**
     * 修改基金信息
     * 
     * @param fund
     */
    public int updateFundConvert(FundConvertThrift fund) throws org.apache.thrift.TException;

    /**
     * 删除基金信息
     * 
     * @param id
     */
    public int deleteFundConvert(int id) throws org.apache.thrift.TException;

    /**
     * 通过条件查询基金信息
     * 
     * @param fundCode
     * @param regDateStart
     * @param regDateEnd
     * @param convertDateStart
     * @param convertDateEnd
     * @param divType
     * @param status
     * @param pageStart
     * @param pageSize
     */
    public List<FundDivThrift> queryFundDiv(String fundCode, String regDateStart, String regDateEnd, String convertDateStart, String convertDateEnd, int divType, int status, int pageStart, int pageSize) throws org.apache.thrift.TException;

    /**
     * 添加基金信息
     * 
     * @param fund
     */
    public int insertFundDiv(FundDivThrift fund) throws org.apache.thrift.TException;

    /**
     * 修改基金信息
     * 
     * @param fund
     */
    public int updateFundDiv(FundDivThrift fund) throws org.apache.thrift.TException;

    /**
     * 删除基金信息
     * 
     * @param id
     */
    public int deleteFundDiv(int id) throws org.apache.thrift.TException;

    /**
     * 通过ID查找基金信息
     * 
     * @param id
     */
    public FundConvertThrift findCById(int id) throws org.apache.thrift.TException;

    /**
     * 通过ID查找基金信息
     * 
     * @param id
     */
    public FundDivThrift findDById(int id) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void queryFundConvert(String fundCode, String regDateStart, String regDateEnd, String convertDateStart, String convertDateEnd, int convertType, int status, int pageStart, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void insertFundConvert(FundConvertThrift fund, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateFundConvert(FundConvertThrift fund, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteFundConvert(int id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryFundDiv(String fundCode, String regDateStart, String regDateEnd, String convertDateStart, String convertDateEnd, int divType, int status, int pageStart, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void insertFundDiv(FundDivThrift fund, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateFundDiv(FundDivThrift fund, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteFundDiv(int id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findCById(int id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findDById(int id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<FundConvertThrift> queryFundConvert(String fundCode, String regDateStart, String regDateEnd, String convertDateStart, String convertDateEnd, int convertType, int status, int pageStart, int pageSize) throws org.apache.thrift.TException
    {
      send_queryFundConvert(fundCode, regDateStart, regDateEnd, convertDateStart, convertDateEnd, convertType, status, pageStart, pageSize);
      return recv_queryFundConvert();
    }

    public void send_queryFundConvert(String fundCode, String regDateStart, String regDateEnd, String convertDateStart, String convertDateEnd, int convertType, int status, int pageStart, int pageSize) throws org.apache.thrift.TException
    {
      queryFundConvert_args args = new queryFundConvert_args();
      args.setFundCode(fundCode);
      args.setRegDateStart(regDateStart);
      args.setRegDateEnd(regDateEnd);
      args.setConvertDateStart(convertDateStart);
      args.setConvertDateEnd(convertDateEnd);
      args.setConvertType(convertType);
      args.setStatus(status);
      args.setPageStart(pageStart);
      args.setPageSize(pageSize);
      sendBase("queryFundConvert", args);
    }

    public List<FundConvertThrift> recv_queryFundConvert() throws org.apache.thrift.TException
    {
      queryFundConvert_result result = new queryFundConvert_result();
      receiveBase(result, "queryFundConvert");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryFundConvert failed: unknown result");
    }

    public int insertFundConvert(FundConvertThrift fund) throws org.apache.thrift.TException
    {
      send_insertFundConvert(fund);
      return recv_insertFundConvert();
    }

    public void send_insertFundConvert(FundConvertThrift fund) throws org.apache.thrift.TException
    {
      insertFundConvert_args args = new insertFundConvert_args();
      args.setFund(fund);
      sendBase("insertFundConvert", args);
    }

    public int recv_insertFundConvert() throws org.apache.thrift.TException
    {
      insertFundConvert_result result = new insertFundConvert_result();
      receiveBase(result, "insertFundConvert");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "insertFundConvert failed: unknown result");
    }

    public int updateFundConvert(FundConvertThrift fund) throws org.apache.thrift.TException
    {
      send_updateFundConvert(fund);
      return recv_updateFundConvert();
    }

    public void send_updateFundConvert(FundConvertThrift fund) throws org.apache.thrift.TException
    {
      updateFundConvert_args args = new updateFundConvert_args();
      args.setFund(fund);
      sendBase("updateFundConvert", args);
    }

    public int recv_updateFundConvert() throws org.apache.thrift.TException
    {
      updateFundConvert_result result = new updateFundConvert_result();
      receiveBase(result, "updateFundConvert");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateFundConvert failed: unknown result");
    }

    public int deleteFundConvert(int id) throws org.apache.thrift.TException
    {
      send_deleteFundConvert(id);
      return recv_deleteFundConvert();
    }

    public void send_deleteFundConvert(int id) throws org.apache.thrift.TException
    {
      deleteFundConvert_args args = new deleteFundConvert_args();
      args.setId(id);
      sendBase("deleteFundConvert", args);
    }

    public int recv_deleteFundConvert() throws org.apache.thrift.TException
    {
      deleteFundConvert_result result = new deleteFundConvert_result();
      receiveBase(result, "deleteFundConvert");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteFundConvert failed: unknown result");
    }

    public List<FundDivThrift> queryFundDiv(String fundCode, String regDateStart, String regDateEnd, String convertDateStart, String convertDateEnd, int divType, int status, int pageStart, int pageSize) throws org.apache.thrift.TException
    {
      send_queryFundDiv(fundCode, regDateStart, regDateEnd, convertDateStart, convertDateEnd, divType, status, pageStart, pageSize);
      return recv_queryFundDiv();
    }

    public void send_queryFundDiv(String fundCode, String regDateStart, String regDateEnd, String convertDateStart, String convertDateEnd, int divType, int status, int pageStart, int pageSize) throws org.apache.thrift.TException
    {
      queryFundDiv_args args = new queryFundDiv_args();
      args.setFundCode(fundCode);
      args.setRegDateStart(regDateStart);
      args.setRegDateEnd(regDateEnd);
      args.setConvertDateStart(convertDateStart);
      args.setConvertDateEnd(convertDateEnd);
      args.setDivType(divType);
      args.setStatus(status);
      args.setPageStart(pageStart);
      args.setPageSize(pageSize);
      sendBase("queryFundDiv", args);
    }

    public List<FundDivThrift> recv_queryFundDiv() throws org.apache.thrift.TException
    {
      queryFundDiv_result result = new queryFundDiv_result();
      receiveBase(result, "queryFundDiv");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryFundDiv failed: unknown result");
    }

    public int insertFundDiv(FundDivThrift fund) throws org.apache.thrift.TException
    {
      send_insertFundDiv(fund);
      return recv_insertFundDiv();
    }

    public void send_insertFundDiv(FundDivThrift fund) throws org.apache.thrift.TException
    {
      insertFundDiv_args args = new insertFundDiv_args();
      args.setFund(fund);
      sendBase("insertFundDiv", args);
    }

    public int recv_insertFundDiv() throws org.apache.thrift.TException
    {
      insertFundDiv_result result = new insertFundDiv_result();
      receiveBase(result, "insertFundDiv");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "insertFundDiv failed: unknown result");
    }

    public int updateFundDiv(FundDivThrift fund) throws org.apache.thrift.TException
    {
      send_updateFundDiv(fund);
      return recv_updateFundDiv();
    }

    public void send_updateFundDiv(FundDivThrift fund) throws org.apache.thrift.TException
    {
      updateFundDiv_args args = new updateFundDiv_args();
      args.setFund(fund);
      sendBase("updateFundDiv", args);
    }

    public int recv_updateFundDiv() throws org.apache.thrift.TException
    {
      updateFundDiv_result result = new updateFundDiv_result();
      receiveBase(result, "updateFundDiv");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateFundDiv failed: unknown result");
    }

    public int deleteFundDiv(int id) throws org.apache.thrift.TException
    {
      send_deleteFundDiv(id);
      return recv_deleteFundDiv();
    }

    public void send_deleteFundDiv(int id) throws org.apache.thrift.TException
    {
      deleteFundDiv_args args = new deleteFundDiv_args();
      args.setId(id);
      sendBase("deleteFundDiv", args);
    }

    public int recv_deleteFundDiv() throws org.apache.thrift.TException
    {
      deleteFundDiv_result result = new deleteFundDiv_result();
      receiveBase(result, "deleteFundDiv");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteFundDiv failed: unknown result");
    }

    public FundConvertThrift findCById(int id) throws org.apache.thrift.TException
    {
      send_findCById(id);
      return recv_findCById();
    }

    public void send_findCById(int id) throws org.apache.thrift.TException
    {
      findCById_args args = new findCById_args();
      args.setId(id);
      sendBase("findCById", args);
    }

    public FundConvertThrift recv_findCById() throws org.apache.thrift.TException
    {
      findCById_result result = new findCById_result();
      receiveBase(result, "findCById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findCById failed: unknown result");
    }

    public FundDivThrift findDById(int id) throws org.apache.thrift.TException
    {
      send_findDById(id);
      return recv_findDById();
    }

    public void send_findDById(int id) throws org.apache.thrift.TException
    {
      findDById_args args = new findDById_args();
      args.setId(id);
      sendBase("findDById", args);
    }

    public FundDivThrift recv_findDById() throws org.apache.thrift.TException
    {
      findDById_result result = new findDById_result();
      receiveBase(result, "findDById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findDById failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void queryFundConvert(String fundCode, String regDateStart, String regDateEnd, String convertDateStart, String convertDateEnd, int convertType, int status, int pageStart, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryFundConvert_call method_call = new queryFundConvert_call(fundCode, regDateStart, regDateEnd, convertDateStart, convertDateEnd, convertType, status, pageStart, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryFundConvert_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String fundCode;
      private String regDateStart;
      private String regDateEnd;
      private String convertDateStart;
      private String convertDateEnd;
      private int convertType;
      private int status;
      private int pageStart;
      private int pageSize;
      public queryFundConvert_call(String fundCode, String regDateStart, String regDateEnd, String convertDateStart, String convertDateEnd, int convertType, int status, int pageStart, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fundCode = fundCode;
        this.regDateStart = regDateStart;
        this.regDateEnd = regDateEnd;
        this.convertDateStart = convertDateStart;
        this.convertDateEnd = convertDateEnd;
        this.convertType = convertType;
        this.status = status;
        this.pageStart = pageStart;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryFundConvert", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryFundConvert_args args = new queryFundConvert_args();
        args.setFundCode(fundCode);
        args.setRegDateStart(regDateStart);
        args.setRegDateEnd(regDateEnd);
        args.setConvertDateStart(convertDateStart);
        args.setConvertDateEnd(convertDateEnd);
        args.setConvertType(convertType);
        args.setStatus(status);
        args.setPageStart(pageStart);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<FundConvertThrift> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryFundConvert();
      }
    }

    public void insertFundConvert(FundConvertThrift fund, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      insertFundConvert_call method_call = new insertFundConvert_call(fund, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class insertFundConvert_call extends org.apache.thrift.async.TAsyncMethodCall {
      private FundConvertThrift fund;
      public insertFundConvert_call(FundConvertThrift fund, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fund = fund;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("insertFundConvert", org.apache.thrift.protocol.TMessageType.CALL, 0));
        insertFundConvert_args args = new insertFundConvert_args();
        args.setFund(fund);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_insertFundConvert();
      }
    }

    public void updateFundConvert(FundConvertThrift fund, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateFundConvert_call method_call = new updateFundConvert_call(fund, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateFundConvert_call extends org.apache.thrift.async.TAsyncMethodCall {
      private FundConvertThrift fund;
      public updateFundConvert_call(FundConvertThrift fund, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fund = fund;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateFundConvert", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateFundConvert_args args = new updateFundConvert_args();
        args.setFund(fund);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateFundConvert();
      }
    }

    public void deleteFundConvert(int id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteFundConvert_call method_call = new deleteFundConvert_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteFundConvert_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int id;
      public deleteFundConvert_call(int id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteFundConvert", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteFundConvert_args args = new deleteFundConvert_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteFundConvert();
      }
    }

    public void queryFundDiv(String fundCode, String regDateStart, String regDateEnd, String convertDateStart, String convertDateEnd, int divType, int status, int pageStart, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryFundDiv_call method_call = new queryFundDiv_call(fundCode, regDateStart, regDateEnd, convertDateStart, convertDateEnd, divType, status, pageStart, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryFundDiv_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String fundCode;
      private String regDateStart;
      private String regDateEnd;
      private String convertDateStart;
      private String convertDateEnd;
      private int divType;
      private int status;
      private int pageStart;
      private int pageSize;
      public queryFundDiv_call(String fundCode, String regDateStart, String regDateEnd, String convertDateStart, String convertDateEnd, int divType, int status, int pageStart, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fundCode = fundCode;
        this.regDateStart = regDateStart;
        this.regDateEnd = regDateEnd;
        this.convertDateStart = convertDateStart;
        this.convertDateEnd = convertDateEnd;
        this.divType = divType;
        this.status = status;
        this.pageStart = pageStart;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryFundDiv", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryFundDiv_args args = new queryFundDiv_args();
        args.setFundCode(fundCode);
        args.setRegDateStart(regDateStart);
        args.setRegDateEnd(regDateEnd);
        args.setConvertDateStart(convertDateStart);
        args.setConvertDateEnd(convertDateEnd);
        args.setDivType(divType);
        args.setStatus(status);
        args.setPageStart(pageStart);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<FundDivThrift> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryFundDiv();
      }
    }

    public void insertFundDiv(FundDivThrift fund, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      insertFundDiv_call method_call = new insertFundDiv_call(fund, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class insertFundDiv_call extends org.apache.thrift.async.TAsyncMethodCall {
      private FundDivThrift fund;
      public insertFundDiv_call(FundDivThrift fund, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fund = fund;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("insertFundDiv", org.apache.thrift.protocol.TMessageType.CALL, 0));
        insertFundDiv_args args = new insertFundDiv_args();
        args.setFund(fund);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_insertFundDiv();
      }
    }

    public void updateFundDiv(FundDivThrift fund, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateFundDiv_call method_call = new updateFundDiv_call(fund, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateFundDiv_call extends org.apache.thrift.async.TAsyncMethodCall {
      private FundDivThrift fund;
      public updateFundDiv_call(FundDivThrift fund, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fund = fund;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateFundDiv", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateFundDiv_args args = new updateFundDiv_args();
        args.setFund(fund);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateFundDiv();
      }
    }

    public void deleteFundDiv(int id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteFundDiv_call method_call = new deleteFundDiv_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteFundDiv_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int id;
      public deleteFundDiv_call(int id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteFundDiv", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteFundDiv_args args = new deleteFundDiv_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteFundDiv();
      }
    }

    public void findCById(int id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findCById_call method_call = new findCById_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findCById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int id;
      public findCById_call(int id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findCById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findCById_args args = new findCById_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public FundConvertThrift getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findCById();
      }
    }

    public void findDById(int id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findDById_call method_call = new findDById_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findDById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int id;
      public findDById_call(int id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findDById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findDById_args args = new findDById_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public FundDivThrift getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findDById();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("queryFundConvert", new queryFundConvert());
      processMap.put("insertFundConvert", new insertFundConvert());
      processMap.put("updateFundConvert", new updateFundConvert());
      processMap.put("deleteFundConvert", new deleteFundConvert());
      processMap.put("queryFundDiv", new queryFundDiv());
      processMap.put("insertFundDiv", new insertFundDiv());
      processMap.put("updateFundDiv", new updateFundDiv());
      processMap.put("deleteFundDiv", new deleteFundDiv());
      processMap.put("findCById", new findCById());
      processMap.put("findDById", new findDById());
      return processMap;
    }

    public static class queryFundConvert<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryFundConvert_args> {
      public queryFundConvert() {
        super("queryFundConvert");
      }

      public queryFundConvert_args getEmptyArgsInstance() {
        return new queryFundConvert_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryFundConvert_result getResult(I iface, queryFundConvert_args args) throws org.apache.thrift.TException {
        queryFundConvert_result result = new queryFundConvert_result();
        result.success = iface.queryFundConvert(args.fundCode, args.regDateStart, args.regDateEnd, args.convertDateStart, args.convertDateEnd, args.convertType, args.status, args.pageStart, args.pageSize);
        return result;
      }
    }

    public static class insertFundConvert<I extends Iface> extends org.apache.thrift.ProcessFunction<I, insertFundConvert_args> {
      public insertFundConvert() {
        super("insertFundConvert");
      }

      public insertFundConvert_args getEmptyArgsInstance() {
        return new insertFundConvert_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public insertFundConvert_result getResult(I iface, insertFundConvert_args args) throws org.apache.thrift.TException {
        insertFundConvert_result result = new insertFundConvert_result();
        result.success = iface.insertFundConvert(args.fund);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateFundConvert<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateFundConvert_args> {
      public updateFundConvert() {
        super("updateFundConvert");
      }

      public updateFundConvert_args getEmptyArgsInstance() {
        return new updateFundConvert_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateFundConvert_result getResult(I iface, updateFundConvert_args args) throws org.apache.thrift.TException {
        updateFundConvert_result result = new updateFundConvert_result();
        result.success = iface.updateFundConvert(args.fund);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class deleteFundConvert<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteFundConvert_args> {
      public deleteFundConvert() {
        super("deleteFundConvert");
      }

      public deleteFundConvert_args getEmptyArgsInstance() {
        return new deleteFundConvert_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteFundConvert_result getResult(I iface, deleteFundConvert_args args) throws org.apache.thrift.TException {
        deleteFundConvert_result result = new deleteFundConvert_result();
        result.success = iface.deleteFundConvert(args.id);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class queryFundDiv<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryFundDiv_args> {
      public queryFundDiv() {
        super("queryFundDiv");
      }

      public queryFundDiv_args getEmptyArgsInstance() {
        return new queryFundDiv_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryFundDiv_result getResult(I iface, queryFundDiv_args args) throws org.apache.thrift.TException {
        queryFundDiv_result result = new queryFundDiv_result();
        result.success = iface.queryFundDiv(args.fundCode, args.regDateStart, args.regDateEnd, args.convertDateStart, args.convertDateEnd, args.divType, args.status, args.pageStart, args.pageSize);
        return result;
      }
    }

    public static class insertFundDiv<I extends Iface> extends org.apache.thrift.ProcessFunction<I, insertFundDiv_args> {
      public insertFundDiv() {
        super("insertFundDiv");
      }

      public insertFundDiv_args getEmptyArgsInstance() {
        return new insertFundDiv_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public insertFundDiv_result getResult(I iface, insertFundDiv_args args) throws org.apache.thrift.TException {
        insertFundDiv_result result = new insertFundDiv_result();
        result.success = iface.insertFundDiv(args.fund);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateFundDiv<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateFundDiv_args> {
      public updateFundDiv() {
        super("updateFundDiv");
      }

      public updateFundDiv_args getEmptyArgsInstance() {
        return new updateFundDiv_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateFundDiv_result getResult(I iface, updateFundDiv_args args) throws org.apache.thrift.TException {
        updateFundDiv_result result = new updateFundDiv_result();
        result.success = iface.updateFundDiv(args.fund);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class deleteFundDiv<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteFundDiv_args> {
      public deleteFundDiv() {
        super("deleteFundDiv");
      }

      public deleteFundDiv_args getEmptyArgsInstance() {
        return new deleteFundDiv_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteFundDiv_result getResult(I iface, deleteFundDiv_args args) throws org.apache.thrift.TException {
        deleteFundDiv_result result = new deleteFundDiv_result();
        result.success = iface.deleteFundDiv(args.id);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class findCById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findCById_args> {
      public findCById() {
        super("findCById");
      }

      public findCById_args getEmptyArgsInstance() {
        return new findCById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findCById_result getResult(I iface, findCById_args args) throws org.apache.thrift.TException {
        findCById_result result = new findCById_result();
        result.success = iface.findCById(args.id);
        return result;
      }
    }

    public static class findDById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findDById_args> {
      public findDById() {
        super("findDById");
      }

      public findDById_args getEmptyArgsInstance() {
        return new findDById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findDById_result getResult(I iface, findDById_args args) throws org.apache.thrift.TException {
        findDById_result result = new findDById_result();
        result.success = iface.findDById(args.id);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("queryFundConvert", new queryFundConvert());
      processMap.put("insertFundConvert", new insertFundConvert());
      processMap.put("updateFundConvert", new updateFundConvert());
      processMap.put("deleteFundConvert", new deleteFundConvert());
      processMap.put("queryFundDiv", new queryFundDiv());
      processMap.put("insertFundDiv", new insertFundDiv());
      processMap.put("updateFundDiv", new updateFundDiv());
      processMap.put("deleteFundDiv", new deleteFundDiv());
      processMap.put("findCById", new findCById());
      processMap.put("findDById", new findDById());
      return processMap;
    }

    public static class queryFundConvert<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryFundConvert_args, List<FundConvertThrift>> {
      public queryFundConvert() {
        super("queryFundConvert");
      }

      public queryFundConvert_args getEmptyArgsInstance() {
        return new queryFundConvert_args();
      }

      public AsyncMethodCallback<List<FundConvertThrift>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<FundConvertThrift>>() { 
          public void onComplete(List<FundConvertThrift> o) {
            queryFundConvert_result result = new queryFundConvert_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryFundConvert_result result = new queryFundConvert_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryFundConvert_args args, org.apache.thrift.async.AsyncMethodCallback<List<FundConvertThrift>> resultHandler) throws TException {
        iface.queryFundConvert(args.fundCode, args.regDateStart, args.regDateEnd, args.convertDateStart, args.convertDateEnd, args.convertType, args.status, args.pageStart, args.pageSize,resultHandler);
      }
    }

    public static class insertFundConvert<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, insertFundConvert_args, Integer> {
      public insertFundConvert() {
        super("insertFundConvert");
      }

      public insertFundConvert_args getEmptyArgsInstance() {
        return new insertFundConvert_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            insertFundConvert_result result = new insertFundConvert_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            insertFundConvert_result result = new insertFundConvert_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, insertFundConvert_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.insertFundConvert(args.fund,resultHandler);
      }
    }

    public static class updateFundConvert<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateFundConvert_args, Integer> {
      public updateFundConvert() {
        super("updateFundConvert");
      }

      public updateFundConvert_args getEmptyArgsInstance() {
        return new updateFundConvert_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateFundConvert_result result = new updateFundConvert_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateFundConvert_result result = new updateFundConvert_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateFundConvert_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateFundConvert(args.fund,resultHandler);
      }
    }

    public static class deleteFundConvert<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteFundConvert_args, Integer> {
      public deleteFundConvert() {
        super("deleteFundConvert");
      }

      public deleteFundConvert_args getEmptyArgsInstance() {
        return new deleteFundConvert_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            deleteFundConvert_result result = new deleteFundConvert_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteFundConvert_result result = new deleteFundConvert_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteFundConvert_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.deleteFundConvert(args.id,resultHandler);
      }
    }

    public static class queryFundDiv<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryFundDiv_args, List<FundDivThrift>> {
      public queryFundDiv() {
        super("queryFundDiv");
      }

      public queryFundDiv_args getEmptyArgsInstance() {
        return new queryFundDiv_args();
      }

      public AsyncMethodCallback<List<FundDivThrift>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<FundDivThrift>>() { 
          public void onComplete(List<FundDivThrift> o) {
            queryFundDiv_result result = new queryFundDiv_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryFundDiv_result result = new queryFundDiv_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryFundDiv_args args, org.apache.thrift.async.AsyncMethodCallback<List<FundDivThrift>> resultHandler) throws TException {
        iface.queryFundDiv(args.fundCode, args.regDateStart, args.regDateEnd, args.convertDateStart, args.convertDateEnd, args.divType, args.status, args.pageStart, args.pageSize,resultHandler);
      }
    }

    public static class insertFundDiv<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, insertFundDiv_args, Integer> {
      public insertFundDiv() {
        super("insertFundDiv");
      }

      public insertFundDiv_args getEmptyArgsInstance() {
        return new insertFundDiv_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            insertFundDiv_result result = new insertFundDiv_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            insertFundDiv_result result = new insertFundDiv_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, insertFundDiv_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.insertFundDiv(args.fund,resultHandler);
      }
    }

    public static class updateFundDiv<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateFundDiv_args, Integer> {
      public updateFundDiv() {
        super("updateFundDiv");
      }

      public updateFundDiv_args getEmptyArgsInstance() {
        return new updateFundDiv_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateFundDiv_result result = new updateFundDiv_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateFundDiv_result result = new updateFundDiv_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateFundDiv_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateFundDiv(args.fund,resultHandler);
      }
    }

    public static class deleteFundDiv<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteFundDiv_args, Integer> {
      public deleteFundDiv() {
        super("deleteFundDiv");
      }

      public deleteFundDiv_args getEmptyArgsInstance() {
        return new deleteFundDiv_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            deleteFundDiv_result result = new deleteFundDiv_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteFundDiv_result result = new deleteFundDiv_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteFundDiv_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.deleteFundDiv(args.id,resultHandler);
      }
    }

    public static class findCById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findCById_args, FundConvertThrift> {
      public findCById() {
        super("findCById");
      }

      public findCById_args getEmptyArgsInstance() {
        return new findCById_args();
      }

      public AsyncMethodCallback<FundConvertThrift> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<FundConvertThrift>() { 
          public void onComplete(FundConvertThrift o) {
            findCById_result result = new findCById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findCById_result result = new findCById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findCById_args args, org.apache.thrift.async.AsyncMethodCallback<FundConvertThrift> resultHandler) throws TException {
        iface.findCById(args.id,resultHandler);
      }
    }

    public static class findDById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findDById_args, FundDivThrift> {
      public findDById() {
        super("findDById");
      }

      public findDById_args getEmptyArgsInstance() {
        return new findDById_args();
      }

      public AsyncMethodCallback<FundDivThrift> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<FundDivThrift>() { 
          public void onComplete(FundDivThrift o) {
            findDById_result result = new findDById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findDById_result result = new findDById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findDById_args args, org.apache.thrift.async.AsyncMethodCallback<FundDivThrift> resultHandler) throws TException {
        iface.findDById(args.id,resultHandler);
      }
    }

  }

  public static class queryFundConvert_args implements org.apache.thrift.TBase<queryFundConvert_args, queryFundConvert_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryFundConvert_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryFundConvert_args");

    private static final org.apache.thrift.protocol.TField FUND_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("fundCode", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REG_DATE_START_FIELD_DESC = new org.apache.thrift.protocol.TField("regDateStart", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField REG_DATE_END_FIELD_DESC = new org.apache.thrift.protocol.TField("regDateEnd", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField CONVERT_DATE_START_FIELD_DESC = new org.apache.thrift.protocol.TField("convertDateStart", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField CONVERT_DATE_END_FIELD_DESC = new org.apache.thrift.protocol.TField("convertDateEnd", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField CONVERT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("convertType", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)7);
    private static final org.apache.thrift.protocol.TField PAGE_START_FIELD_DESC = new org.apache.thrift.protocol.TField("pageStart", org.apache.thrift.protocol.TType.I32, (short)8);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)9);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryFundConvert_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryFundConvert_argsTupleSchemeFactory());
    }

    public String fundCode; // required
    public String regDateStart; // required
    public String regDateEnd; // required
    public String convertDateStart; // required
    public String convertDateEnd; // required
    public int convertType; // required
    public int status; // required
    public int pageStart; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FUND_CODE((short)1, "fundCode"),
      REG_DATE_START((short)2, "regDateStart"),
      REG_DATE_END((short)3, "regDateEnd"),
      CONVERT_DATE_START((short)4, "convertDateStart"),
      CONVERT_DATE_END((short)5, "convertDateEnd"),
      CONVERT_TYPE((short)6, "convertType"),
      STATUS((short)7, "status"),
      PAGE_START((short)8, "pageStart"),
      PAGE_SIZE((short)9, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FUND_CODE
            return FUND_CODE;
          case 2: // REG_DATE_START
            return REG_DATE_START;
          case 3: // REG_DATE_END
            return REG_DATE_END;
          case 4: // CONVERT_DATE_START
            return CONVERT_DATE_START;
          case 5: // CONVERT_DATE_END
            return CONVERT_DATE_END;
          case 6: // CONVERT_TYPE
            return CONVERT_TYPE;
          case 7: // STATUS
            return STATUS;
          case 8: // PAGE_START
            return PAGE_START;
          case 9: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CONVERTTYPE_ISSET_ID = 0;
    private static final int __STATUS_ISSET_ID = 1;
    private static final int __PAGESTART_ISSET_ID = 2;
    private static final int __PAGESIZE_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FUND_CODE, new org.apache.thrift.meta_data.FieldMetaData("fundCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REG_DATE_START, new org.apache.thrift.meta_data.FieldMetaData("regDateStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REG_DATE_END, new org.apache.thrift.meta_data.FieldMetaData("regDateEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONVERT_DATE_START, new org.apache.thrift.meta_data.FieldMetaData("convertDateStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONVERT_DATE_END, new org.apache.thrift.meta_data.FieldMetaData("convertDateEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONVERT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("convertType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_START, new org.apache.thrift.meta_data.FieldMetaData("pageStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryFundConvert_args.class, metaDataMap);
    }

    public queryFundConvert_args() {
    }

    public queryFundConvert_args(
      String fundCode,
      String regDateStart,
      String regDateEnd,
      String convertDateStart,
      String convertDateEnd,
      int convertType,
      int status,
      int pageStart,
      int pageSize)
    {
      this();
      this.fundCode = fundCode;
      this.regDateStart = regDateStart;
      this.regDateEnd = regDateEnd;
      this.convertDateStart = convertDateStart;
      this.convertDateEnd = convertDateEnd;
      this.convertType = convertType;
      setConvertTypeIsSet(true);
      this.status = status;
      setStatusIsSet(true);
      this.pageStart = pageStart;
      setPageStartIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryFundConvert_args(queryFundConvert_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetFundCode()) {
        this.fundCode = other.fundCode;
      }
      if (other.isSetRegDateStart()) {
        this.regDateStart = other.regDateStart;
      }
      if (other.isSetRegDateEnd()) {
        this.regDateEnd = other.regDateEnd;
      }
      if (other.isSetConvertDateStart()) {
        this.convertDateStart = other.convertDateStart;
      }
      if (other.isSetConvertDateEnd()) {
        this.convertDateEnd = other.convertDateEnd;
      }
      this.convertType = other.convertType;
      this.status = other.status;
      this.pageStart = other.pageStart;
      this.pageSize = other.pageSize;
    }

    public queryFundConvert_args deepCopy() {
      return new queryFundConvert_args(this);
    }

    @Override
    public void clear() {
      this.fundCode = null;
      this.regDateStart = null;
      this.regDateEnd = null;
      this.convertDateStart = null;
      this.convertDateEnd = null;
      setConvertTypeIsSet(false);
      this.convertType = 0;
      setStatusIsSet(false);
      this.status = 0;
      setPageStartIsSet(false);
      this.pageStart = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public String getFundCode() {
      return this.fundCode;
    }

    public queryFundConvert_args setFundCode(String fundCode) {
      this.fundCode = fundCode;
      return this;
    }

    public void unsetFundCode() {
      this.fundCode = null;
    }

    /** Returns true if field fundCode is set (has been assigned a value) and false otherwise */
    public boolean isSetFundCode() {
      return this.fundCode != null;
    }

    public void setFundCodeIsSet(boolean value) {
      if (!value) {
        this.fundCode = null;
      }
    }

    public String getRegDateStart() {
      return this.regDateStart;
    }

    public queryFundConvert_args setRegDateStart(String regDateStart) {
      this.regDateStart = regDateStart;
      return this;
    }

    public void unsetRegDateStart() {
      this.regDateStart = null;
    }

    /** Returns true if field regDateStart is set (has been assigned a value) and false otherwise */
    public boolean isSetRegDateStart() {
      return this.regDateStart != null;
    }

    public void setRegDateStartIsSet(boolean value) {
      if (!value) {
        this.regDateStart = null;
      }
    }

    public String getRegDateEnd() {
      return this.regDateEnd;
    }

    public queryFundConvert_args setRegDateEnd(String regDateEnd) {
      this.regDateEnd = regDateEnd;
      return this;
    }

    public void unsetRegDateEnd() {
      this.regDateEnd = null;
    }

    /** Returns true if field regDateEnd is set (has been assigned a value) and false otherwise */
    public boolean isSetRegDateEnd() {
      return this.regDateEnd != null;
    }

    public void setRegDateEndIsSet(boolean value) {
      if (!value) {
        this.regDateEnd = null;
      }
    }

    public String getConvertDateStart() {
      return this.convertDateStart;
    }

    public queryFundConvert_args setConvertDateStart(String convertDateStart) {
      this.convertDateStart = convertDateStart;
      return this;
    }

    public void unsetConvertDateStart() {
      this.convertDateStart = null;
    }

    /** Returns true if field convertDateStart is set (has been assigned a value) and false otherwise */
    public boolean isSetConvertDateStart() {
      return this.convertDateStart != null;
    }

    public void setConvertDateStartIsSet(boolean value) {
      if (!value) {
        this.convertDateStart = null;
      }
    }

    public String getConvertDateEnd() {
      return this.convertDateEnd;
    }

    public queryFundConvert_args setConvertDateEnd(String convertDateEnd) {
      this.convertDateEnd = convertDateEnd;
      return this;
    }

    public void unsetConvertDateEnd() {
      this.convertDateEnd = null;
    }

    /** Returns true if field convertDateEnd is set (has been assigned a value) and false otherwise */
    public boolean isSetConvertDateEnd() {
      return this.convertDateEnd != null;
    }

    public void setConvertDateEndIsSet(boolean value) {
      if (!value) {
        this.convertDateEnd = null;
      }
    }

    public int getConvertType() {
      return this.convertType;
    }

    public queryFundConvert_args setConvertType(int convertType) {
      this.convertType = convertType;
      setConvertTypeIsSet(true);
      return this;
    }

    public void unsetConvertType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONVERTTYPE_ISSET_ID);
    }

    /** Returns true if field convertType is set (has been assigned a value) and false otherwise */
    public boolean isSetConvertType() {
      return EncodingUtils.testBit(__isset_bitfield, __CONVERTTYPE_ISSET_ID);
    }

    public void setConvertTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONVERTTYPE_ISSET_ID, value);
    }

    public int getStatus() {
      return this.status;
    }

    public queryFundConvert_args setStatus(int status) {
      this.status = status;
      setStatusIsSet(true);
      return this;
    }

    public void unsetStatus() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
      return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
    }

    public void setStatusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
    }

    public int getPageStart() {
      return this.pageStart;
    }

    public queryFundConvert_args setPageStart(int pageStart) {
      this.pageStart = pageStart;
      setPageStartIsSet(true);
      return this;
    }

    public void unsetPageStart() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESTART_ISSET_ID);
    }

    /** Returns true if field pageStart is set (has been assigned a value) and false otherwise */
    public boolean isSetPageStart() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESTART_ISSET_ID);
    }

    public void setPageStartIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESTART_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public queryFundConvert_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FUND_CODE:
        if (value == null) {
          unsetFundCode();
        } else {
          setFundCode((String)value);
        }
        break;

      case REG_DATE_START:
        if (value == null) {
          unsetRegDateStart();
        } else {
          setRegDateStart((String)value);
        }
        break;

      case REG_DATE_END:
        if (value == null) {
          unsetRegDateEnd();
        } else {
          setRegDateEnd((String)value);
        }
        break;

      case CONVERT_DATE_START:
        if (value == null) {
          unsetConvertDateStart();
        } else {
          setConvertDateStart((String)value);
        }
        break;

      case CONVERT_DATE_END:
        if (value == null) {
          unsetConvertDateEnd();
        } else {
          setConvertDateEnd((String)value);
        }
        break;

      case CONVERT_TYPE:
        if (value == null) {
          unsetConvertType();
        } else {
          setConvertType((Integer)value);
        }
        break;

      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((Integer)value);
        }
        break;

      case PAGE_START:
        if (value == null) {
          unsetPageStart();
        } else {
          setPageStart((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FUND_CODE:
        return getFundCode();

      case REG_DATE_START:
        return getRegDateStart();

      case REG_DATE_END:
        return getRegDateEnd();

      case CONVERT_DATE_START:
        return getConvertDateStart();

      case CONVERT_DATE_END:
        return getConvertDateEnd();

      case CONVERT_TYPE:
        return Integer.valueOf(getConvertType());

      case STATUS:
        return Integer.valueOf(getStatus());

      case PAGE_START:
        return Integer.valueOf(getPageStart());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FUND_CODE:
        return isSetFundCode();
      case REG_DATE_START:
        return isSetRegDateStart();
      case REG_DATE_END:
        return isSetRegDateEnd();
      case CONVERT_DATE_START:
        return isSetConvertDateStart();
      case CONVERT_DATE_END:
        return isSetConvertDateEnd();
      case CONVERT_TYPE:
        return isSetConvertType();
      case STATUS:
        return isSetStatus();
      case PAGE_START:
        return isSetPageStart();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryFundConvert_args)
        return this.equals((queryFundConvert_args)that);
      return false;
    }

    public boolean equals(queryFundConvert_args that) {
      if (that == null)
        return false;

      boolean this_present_fundCode = true && this.isSetFundCode();
      boolean that_present_fundCode = true && that.isSetFundCode();
      if (this_present_fundCode || that_present_fundCode) {
        if (!(this_present_fundCode && that_present_fundCode))
          return false;
        if (!this.fundCode.equals(that.fundCode))
          return false;
      }

      boolean this_present_regDateStart = true && this.isSetRegDateStart();
      boolean that_present_regDateStart = true && that.isSetRegDateStart();
      if (this_present_regDateStart || that_present_regDateStart) {
        if (!(this_present_regDateStart && that_present_regDateStart))
          return false;
        if (!this.regDateStart.equals(that.regDateStart))
          return false;
      }

      boolean this_present_regDateEnd = true && this.isSetRegDateEnd();
      boolean that_present_regDateEnd = true && that.isSetRegDateEnd();
      if (this_present_regDateEnd || that_present_regDateEnd) {
        if (!(this_present_regDateEnd && that_present_regDateEnd))
          return false;
        if (!this.regDateEnd.equals(that.regDateEnd))
          return false;
      }

      boolean this_present_convertDateStart = true && this.isSetConvertDateStart();
      boolean that_present_convertDateStart = true && that.isSetConvertDateStart();
      if (this_present_convertDateStart || that_present_convertDateStart) {
        if (!(this_present_convertDateStart && that_present_convertDateStart))
          return false;
        if (!this.convertDateStart.equals(that.convertDateStart))
          return false;
      }

      boolean this_present_convertDateEnd = true && this.isSetConvertDateEnd();
      boolean that_present_convertDateEnd = true && that.isSetConvertDateEnd();
      if (this_present_convertDateEnd || that_present_convertDateEnd) {
        if (!(this_present_convertDateEnd && that_present_convertDateEnd))
          return false;
        if (!this.convertDateEnd.equals(that.convertDateEnd))
          return false;
      }

      boolean this_present_convertType = true;
      boolean that_present_convertType = true;
      if (this_present_convertType || that_present_convertType) {
        if (!(this_present_convertType && that_present_convertType))
          return false;
        if (this.convertType != that.convertType)
          return false;
      }

      boolean this_present_status = true;
      boolean that_present_status = true;
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (this.status != that.status)
          return false;
      }

      boolean this_present_pageStart = true;
      boolean that_present_pageStart = true;
      if (this_present_pageStart || that_present_pageStart) {
        if (!(this_present_pageStart && that_present_pageStart))
          return false;
        if (this.pageStart != that.pageStart)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryFundConvert_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFundCode()).compareTo(other.isSetFundCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFundCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fundCode, other.fundCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRegDateStart()).compareTo(other.isSetRegDateStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegDateStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regDateStart, other.regDateStart);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRegDateEnd()).compareTo(other.isSetRegDateEnd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegDateEnd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regDateEnd, other.regDateEnd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConvertDateStart()).compareTo(other.isSetConvertDateStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConvertDateStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.convertDateStart, other.convertDateStart);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConvertDateEnd()).compareTo(other.isSetConvertDateEnd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConvertDateEnd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.convertDateEnd, other.convertDateEnd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConvertType()).compareTo(other.isSetConvertType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConvertType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.convertType, other.convertType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageStart()).compareTo(other.isSetPageStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageStart, other.pageStart);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryFundConvert_args(");
      boolean first = true;

      sb.append("fundCode:");
      if (this.fundCode == null) {
        sb.append("null");
      } else {
        sb.append(this.fundCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("regDateStart:");
      if (this.regDateStart == null) {
        sb.append("null");
      } else {
        sb.append(this.regDateStart);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("regDateEnd:");
      if (this.regDateEnd == null) {
        sb.append("null");
      } else {
        sb.append(this.regDateEnd);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("convertDateStart:");
      if (this.convertDateStart == null) {
        sb.append("null");
      } else {
        sb.append(this.convertDateStart);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("convertDateEnd:");
      if (this.convertDateEnd == null) {
        sb.append("null");
      } else {
        sb.append(this.convertDateEnd);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("convertType:");
      sb.append(this.convertType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("status:");
      sb.append(this.status);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageStart:");
      sb.append(this.pageStart);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryFundConvert_argsStandardSchemeFactory implements SchemeFactory {
      public queryFundConvert_argsStandardScheme getScheme() {
        return new queryFundConvert_argsStandardScheme();
      }
    }

    private static class queryFundConvert_argsStandardScheme extends StandardScheme<queryFundConvert_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryFundConvert_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FUND_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fundCode = iprot.readString();
                struct.setFundCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REG_DATE_START
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.regDateStart = iprot.readString();
                struct.setRegDateStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // REG_DATE_END
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.regDateEnd = iprot.readString();
                struct.setRegDateEndIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CONVERT_DATE_START
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.convertDateStart = iprot.readString();
                struct.setConvertDateStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // CONVERT_DATE_END
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.convertDateEnd = iprot.readString();
                struct.setConvertDateEndIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // CONVERT_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.convertType = iprot.readI32();
                struct.setConvertTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.status = iprot.readI32();
                struct.setStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // PAGE_START
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageStart = iprot.readI32();
                struct.setPageStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryFundConvert_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fundCode != null) {
          oprot.writeFieldBegin(FUND_CODE_FIELD_DESC);
          oprot.writeString(struct.fundCode);
          oprot.writeFieldEnd();
        }
        if (struct.regDateStart != null) {
          oprot.writeFieldBegin(REG_DATE_START_FIELD_DESC);
          oprot.writeString(struct.regDateStart);
          oprot.writeFieldEnd();
        }
        if (struct.regDateEnd != null) {
          oprot.writeFieldBegin(REG_DATE_END_FIELD_DESC);
          oprot.writeString(struct.regDateEnd);
          oprot.writeFieldEnd();
        }
        if (struct.convertDateStart != null) {
          oprot.writeFieldBegin(CONVERT_DATE_START_FIELD_DESC);
          oprot.writeString(struct.convertDateStart);
          oprot.writeFieldEnd();
        }
        if (struct.convertDateEnd != null) {
          oprot.writeFieldBegin(CONVERT_DATE_END_FIELD_DESC);
          oprot.writeString(struct.convertDateEnd);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CONVERT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.convertType);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_START_FIELD_DESC);
        oprot.writeI32(struct.pageStart);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryFundConvert_argsTupleSchemeFactory implements SchemeFactory {
      public queryFundConvert_argsTupleScheme getScheme() {
        return new queryFundConvert_argsTupleScheme();
      }
    }

    private static class queryFundConvert_argsTupleScheme extends TupleScheme<queryFundConvert_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryFundConvert_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFundCode()) {
          optionals.set(0);
        }
        if (struct.isSetRegDateStart()) {
          optionals.set(1);
        }
        if (struct.isSetRegDateEnd()) {
          optionals.set(2);
        }
        if (struct.isSetConvertDateStart()) {
          optionals.set(3);
        }
        if (struct.isSetConvertDateEnd()) {
          optionals.set(4);
        }
        if (struct.isSetConvertType()) {
          optionals.set(5);
        }
        if (struct.isSetStatus()) {
          optionals.set(6);
        }
        if (struct.isSetPageStart()) {
          optionals.set(7);
        }
        if (struct.isSetPageSize()) {
          optionals.set(8);
        }
        oprot.writeBitSet(optionals, 9);
        if (struct.isSetFundCode()) {
          oprot.writeString(struct.fundCode);
        }
        if (struct.isSetRegDateStart()) {
          oprot.writeString(struct.regDateStart);
        }
        if (struct.isSetRegDateEnd()) {
          oprot.writeString(struct.regDateEnd);
        }
        if (struct.isSetConvertDateStart()) {
          oprot.writeString(struct.convertDateStart);
        }
        if (struct.isSetConvertDateEnd()) {
          oprot.writeString(struct.convertDateEnd);
        }
        if (struct.isSetConvertType()) {
          oprot.writeI32(struct.convertType);
        }
        if (struct.isSetStatus()) {
          oprot.writeI32(struct.status);
        }
        if (struct.isSetPageStart()) {
          oprot.writeI32(struct.pageStart);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryFundConvert_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(9);
        if (incoming.get(0)) {
          struct.fundCode = iprot.readString();
          struct.setFundCodeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.regDateStart = iprot.readString();
          struct.setRegDateStartIsSet(true);
        }
        if (incoming.get(2)) {
          struct.regDateEnd = iprot.readString();
          struct.setRegDateEndIsSet(true);
        }
        if (incoming.get(3)) {
          struct.convertDateStart = iprot.readString();
          struct.setConvertDateStartIsSet(true);
        }
        if (incoming.get(4)) {
          struct.convertDateEnd = iprot.readString();
          struct.setConvertDateEndIsSet(true);
        }
        if (incoming.get(5)) {
          struct.convertType = iprot.readI32();
          struct.setConvertTypeIsSet(true);
        }
        if (incoming.get(6)) {
          struct.status = iprot.readI32();
          struct.setStatusIsSet(true);
        }
        if (incoming.get(7)) {
          struct.pageStart = iprot.readI32();
          struct.setPageStartIsSet(true);
        }
        if (incoming.get(8)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class queryFundConvert_result implements org.apache.thrift.TBase<queryFundConvert_result, queryFundConvert_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryFundConvert_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryFundConvert_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryFundConvert_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryFundConvert_resultTupleSchemeFactory());
    }

    public List<FundConvertThrift> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FundConvertThrift.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryFundConvert_result.class, metaDataMap);
    }

    public queryFundConvert_result() {
    }

    public queryFundConvert_result(
      List<FundConvertThrift> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryFundConvert_result(queryFundConvert_result other) {
      if (other.isSetSuccess()) {
        List<FundConvertThrift> __this__success = new ArrayList<FundConvertThrift>(other.success.size());
        for (FundConvertThrift other_element : other.success) {
          __this__success.add(new FundConvertThrift(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryFundConvert_result deepCopy() {
      return new queryFundConvert_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<FundConvertThrift> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(FundConvertThrift elem) {
      if (this.success == null) {
        this.success = new ArrayList<FundConvertThrift>();
      }
      this.success.add(elem);
    }

    public List<FundConvertThrift> getSuccess() {
      return this.success;
    }

    public queryFundConvert_result setSuccess(List<FundConvertThrift> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<FundConvertThrift>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryFundConvert_result)
        return this.equals((queryFundConvert_result)that);
      return false;
    }

    public boolean equals(queryFundConvert_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryFundConvert_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryFundConvert_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryFundConvert_resultStandardSchemeFactory implements SchemeFactory {
      public queryFundConvert_resultStandardScheme getScheme() {
        return new queryFundConvert_resultStandardScheme();
      }
    }

    private static class queryFundConvert_resultStandardScheme extends StandardScheme<queryFundConvert_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryFundConvert_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list172 = iprot.readListBegin();
                  struct.success = new ArrayList<FundConvertThrift>(_list172.size);
                  for (int _i173 = 0; _i173 < _list172.size; ++_i173)
                  {
                    FundConvertThrift _elem174;
                    _elem174 = new FundConvertThrift();
                    _elem174.read(iprot);
                    struct.success.add(_elem174);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryFundConvert_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (FundConvertThrift _iter175 : struct.success)
            {
              _iter175.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryFundConvert_resultTupleSchemeFactory implements SchemeFactory {
      public queryFundConvert_resultTupleScheme getScheme() {
        return new queryFundConvert_resultTupleScheme();
      }
    }

    private static class queryFundConvert_resultTupleScheme extends TupleScheme<queryFundConvert_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryFundConvert_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (FundConvertThrift _iter176 : struct.success)
            {
              _iter176.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryFundConvert_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list177 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<FundConvertThrift>(_list177.size);
            for (int _i178 = 0; _i178 < _list177.size; ++_i178)
            {
              FundConvertThrift _elem179;
              _elem179 = new FundConvertThrift();
              _elem179.read(iprot);
              struct.success.add(_elem179);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class insertFundConvert_args implements org.apache.thrift.TBase<insertFundConvert_args, insertFundConvert_args._Fields>, java.io.Serializable, Cloneable, Comparable<insertFundConvert_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertFundConvert_args");

    private static final org.apache.thrift.protocol.TField FUND_FIELD_DESC = new org.apache.thrift.protocol.TField("fund", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insertFundConvert_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insertFundConvert_argsTupleSchemeFactory());
    }

    public FundConvertThrift fund; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FUND((short)1, "fund");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FUND
            return FUND;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FUND, new org.apache.thrift.meta_data.FieldMetaData("fund", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FundConvertThrift.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertFundConvert_args.class, metaDataMap);
    }

    public insertFundConvert_args() {
    }

    public insertFundConvert_args(
      FundConvertThrift fund)
    {
      this();
      this.fund = fund;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insertFundConvert_args(insertFundConvert_args other) {
      if (other.isSetFund()) {
        this.fund = new FundConvertThrift(other.fund);
      }
    }

    public insertFundConvert_args deepCopy() {
      return new insertFundConvert_args(this);
    }

    @Override
    public void clear() {
      this.fund = null;
    }

    public FundConvertThrift getFund() {
      return this.fund;
    }

    public insertFundConvert_args setFund(FundConvertThrift fund) {
      this.fund = fund;
      return this;
    }

    public void unsetFund() {
      this.fund = null;
    }

    /** Returns true if field fund is set (has been assigned a value) and false otherwise */
    public boolean isSetFund() {
      return this.fund != null;
    }

    public void setFundIsSet(boolean value) {
      if (!value) {
        this.fund = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FUND:
        if (value == null) {
          unsetFund();
        } else {
          setFund((FundConvertThrift)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FUND:
        return getFund();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FUND:
        return isSetFund();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insertFundConvert_args)
        return this.equals((insertFundConvert_args)that);
      return false;
    }

    public boolean equals(insertFundConvert_args that) {
      if (that == null)
        return false;

      boolean this_present_fund = true && this.isSetFund();
      boolean that_present_fund = true && that.isSetFund();
      if (this_present_fund || that_present_fund) {
        if (!(this_present_fund && that_present_fund))
          return false;
        if (!this.fund.equals(that.fund))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(insertFundConvert_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFund()).compareTo(other.isSetFund());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFund()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fund, other.fund);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insertFundConvert_args(");
      boolean first = true;

      sb.append("fund:");
      if (this.fund == null) {
        sb.append("null");
      } else {
        sb.append(this.fund);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (fund != null) {
        fund.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insertFundConvert_argsStandardSchemeFactory implements SchemeFactory {
      public insertFundConvert_argsStandardScheme getScheme() {
        return new insertFundConvert_argsStandardScheme();
      }
    }

    private static class insertFundConvert_argsStandardScheme extends StandardScheme<insertFundConvert_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insertFundConvert_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fund = new FundConvertThrift();
                struct.fund.read(iprot);
                struct.setFundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insertFundConvert_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fund != null) {
          oprot.writeFieldBegin(FUND_FIELD_DESC);
          struct.fund.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insertFundConvert_argsTupleSchemeFactory implements SchemeFactory {
      public insertFundConvert_argsTupleScheme getScheme() {
        return new insertFundConvert_argsTupleScheme();
      }
    }

    private static class insertFundConvert_argsTupleScheme extends TupleScheme<insertFundConvert_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insertFundConvert_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFund()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFund()) {
          struct.fund.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insertFundConvert_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.fund = new FundConvertThrift();
          struct.fund.read(iprot);
          struct.setFundIsSet(true);
        }
      }
    }

  }

  public static class insertFundConvert_result implements org.apache.thrift.TBase<insertFundConvert_result, insertFundConvert_result._Fields>, java.io.Serializable, Cloneable, Comparable<insertFundConvert_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertFundConvert_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insertFundConvert_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insertFundConvert_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertFundConvert_result.class, metaDataMap);
    }

    public insertFundConvert_result() {
    }

    public insertFundConvert_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insertFundConvert_result(insertFundConvert_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public insertFundConvert_result deepCopy() {
      return new insertFundConvert_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public insertFundConvert_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insertFundConvert_result)
        return this.equals((insertFundConvert_result)that);
      return false;
    }

    public boolean equals(insertFundConvert_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(insertFundConvert_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insertFundConvert_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insertFundConvert_resultStandardSchemeFactory implements SchemeFactory {
      public insertFundConvert_resultStandardScheme getScheme() {
        return new insertFundConvert_resultStandardScheme();
      }
    }

    private static class insertFundConvert_resultStandardScheme extends StandardScheme<insertFundConvert_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insertFundConvert_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insertFundConvert_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insertFundConvert_resultTupleSchemeFactory implements SchemeFactory {
      public insertFundConvert_resultTupleScheme getScheme() {
        return new insertFundConvert_resultTupleScheme();
      }
    }

    private static class insertFundConvert_resultTupleScheme extends TupleScheme<insertFundConvert_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insertFundConvert_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insertFundConvert_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateFundConvert_args implements org.apache.thrift.TBase<updateFundConvert_args, updateFundConvert_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateFundConvert_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateFundConvert_args");

    private static final org.apache.thrift.protocol.TField FUND_FIELD_DESC = new org.apache.thrift.protocol.TField("fund", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateFundConvert_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateFundConvert_argsTupleSchemeFactory());
    }

    public FundConvertThrift fund; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FUND((short)1, "fund");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FUND
            return FUND;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FUND, new org.apache.thrift.meta_data.FieldMetaData("fund", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FundConvertThrift.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateFundConvert_args.class, metaDataMap);
    }

    public updateFundConvert_args() {
    }

    public updateFundConvert_args(
      FundConvertThrift fund)
    {
      this();
      this.fund = fund;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateFundConvert_args(updateFundConvert_args other) {
      if (other.isSetFund()) {
        this.fund = new FundConvertThrift(other.fund);
      }
    }

    public updateFundConvert_args deepCopy() {
      return new updateFundConvert_args(this);
    }

    @Override
    public void clear() {
      this.fund = null;
    }

    public FundConvertThrift getFund() {
      return this.fund;
    }

    public updateFundConvert_args setFund(FundConvertThrift fund) {
      this.fund = fund;
      return this;
    }

    public void unsetFund() {
      this.fund = null;
    }

    /** Returns true if field fund is set (has been assigned a value) and false otherwise */
    public boolean isSetFund() {
      return this.fund != null;
    }

    public void setFundIsSet(boolean value) {
      if (!value) {
        this.fund = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FUND:
        if (value == null) {
          unsetFund();
        } else {
          setFund((FundConvertThrift)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FUND:
        return getFund();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FUND:
        return isSetFund();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateFundConvert_args)
        return this.equals((updateFundConvert_args)that);
      return false;
    }

    public boolean equals(updateFundConvert_args that) {
      if (that == null)
        return false;

      boolean this_present_fund = true && this.isSetFund();
      boolean that_present_fund = true && that.isSetFund();
      if (this_present_fund || that_present_fund) {
        if (!(this_present_fund && that_present_fund))
          return false;
        if (!this.fund.equals(that.fund))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateFundConvert_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFund()).compareTo(other.isSetFund());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFund()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fund, other.fund);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateFundConvert_args(");
      boolean first = true;

      sb.append("fund:");
      if (this.fund == null) {
        sb.append("null");
      } else {
        sb.append(this.fund);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (fund != null) {
        fund.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateFundConvert_argsStandardSchemeFactory implements SchemeFactory {
      public updateFundConvert_argsStandardScheme getScheme() {
        return new updateFundConvert_argsStandardScheme();
      }
    }

    private static class updateFundConvert_argsStandardScheme extends StandardScheme<updateFundConvert_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateFundConvert_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fund = new FundConvertThrift();
                struct.fund.read(iprot);
                struct.setFundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateFundConvert_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fund != null) {
          oprot.writeFieldBegin(FUND_FIELD_DESC);
          struct.fund.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateFundConvert_argsTupleSchemeFactory implements SchemeFactory {
      public updateFundConvert_argsTupleScheme getScheme() {
        return new updateFundConvert_argsTupleScheme();
      }
    }

    private static class updateFundConvert_argsTupleScheme extends TupleScheme<updateFundConvert_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateFundConvert_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFund()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFund()) {
          struct.fund.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateFundConvert_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.fund = new FundConvertThrift();
          struct.fund.read(iprot);
          struct.setFundIsSet(true);
        }
      }
    }

  }

  public static class updateFundConvert_result implements org.apache.thrift.TBase<updateFundConvert_result, updateFundConvert_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateFundConvert_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateFundConvert_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateFundConvert_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateFundConvert_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateFundConvert_result.class, metaDataMap);
    }

    public updateFundConvert_result() {
    }

    public updateFundConvert_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateFundConvert_result(updateFundConvert_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateFundConvert_result deepCopy() {
      return new updateFundConvert_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateFundConvert_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateFundConvert_result)
        return this.equals((updateFundConvert_result)that);
      return false;
    }

    public boolean equals(updateFundConvert_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateFundConvert_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateFundConvert_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateFundConvert_resultStandardSchemeFactory implements SchemeFactory {
      public updateFundConvert_resultStandardScheme getScheme() {
        return new updateFundConvert_resultStandardScheme();
      }
    }

    private static class updateFundConvert_resultStandardScheme extends StandardScheme<updateFundConvert_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateFundConvert_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateFundConvert_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateFundConvert_resultTupleSchemeFactory implements SchemeFactory {
      public updateFundConvert_resultTupleScheme getScheme() {
        return new updateFundConvert_resultTupleScheme();
      }
    }

    private static class updateFundConvert_resultTupleScheme extends TupleScheme<updateFundConvert_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateFundConvert_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateFundConvert_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteFundConvert_args implements org.apache.thrift.TBase<deleteFundConvert_args, deleteFundConvert_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteFundConvert_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteFundConvert_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteFundConvert_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteFundConvert_argsTupleSchemeFactory());
    }

    public int id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteFundConvert_args.class, metaDataMap);
    }

    public deleteFundConvert_args() {
    }

    public deleteFundConvert_args(
      int id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteFundConvert_args(deleteFundConvert_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
    }

    public deleteFundConvert_args deepCopy() {
      return new deleteFundConvert_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public int getId() {
      return this.id;
    }

    public deleteFundConvert_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Integer.valueOf(getId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteFundConvert_args)
        return this.equals((deleteFundConvert_args)that);
      return false;
    }

    public boolean equals(deleteFundConvert_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteFundConvert_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteFundConvert_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteFundConvert_argsStandardSchemeFactory implements SchemeFactory {
      public deleteFundConvert_argsStandardScheme getScheme() {
        return new deleteFundConvert_argsStandardScheme();
      }
    }

    private static class deleteFundConvert_argsStandardScheme extends StandardScheme<deleteFundConvert_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteFundConvert_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteFundConvert_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteFundConvert_argsTupleSchemeFactory implements SchemeFactory {
      public deleteFundConvert_argsTupleScheme getScheme() {
        return new deleteFundConvert_argsTupleScheme();
      }
    }

    private static class deleteFundConvert_argsTupleScheme extends TupleScheme<deleteFundConvert_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteFundConvert_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteFundConvert_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class deleteFundConvert_result implements org.apache.thrift.TBase<deleteFundConvert_result, deleteFundConvert_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteFundConvert_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteFundConvert_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteFundConvert_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteFundConvert_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteFundConvert_result.class, metaDataMap);
    }

    public deleteFundConvert_result() {
    }

    public deleteFundConvert_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteFundConvert_result(deleteFundConvert_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public deleteFundConvert_result deepCopy() {
      return new deleteFundConvert_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public deleteFundConvert_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteFundConvert_result)
        return this.equals((deleteFundConvert_result)that);
      return false;
    }

    public boolean equals(deleteFundConvert_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteFundConvert_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteFundConvert_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteFundConvert_resultStandardSchemeFactory implements SchemeFactory {
      public deleteFundConvert_resultStandardScheme getScheme() {
        return new deleteFundConvert_resultStandardScheme();
      }
    }

    private static class deleteFundConvert_resultStandardScheme extends StandardScheme<deleteFundConvert_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteFundConvert_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteFundConvert_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteFundConvert_resultTupleSchemeFactory implements SchemeFactory {
      public deleteFundConvert_resultTupleScheme getScheme() {
        return new deleteFundConvert_resultTupleScheme();
      }
    }

    private static class deleteFundConvert_resultTupleScheme extends TupleScheme<deleteFundConvert_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteFundConvert_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteFundConvert_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryFundDiv_args implements org.apache.thrift.TBase<queryFundDiv_args, queryFundDiv_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryFundDiv_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryFundDiv_args");

    private static final org.apache.thrift.protocol.TField FUND_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("fundCode", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REG_DATE_START_FIELD_DESC = new org.apache.thrift.protocol.TField("regDateStart", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField REG_DATE_END_FIELD_DESC = new org.apache.thrift.protocol.TField("regDateEnd", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField CONVERT_DATE_START_FIELD_DESC = new org.apache.thrift.protocol.TField("convertDateStart", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField CONVERT_DATE_END_FIELD_DESC = new org.apache.thrift.protocol.TField("convertDateEnd", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField DIV_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("divType", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)7);
    private static final org.apache.thrift.protocol.TField PAGE_START_FIELD_DESC = new org.apache.thrift.protocol.TField("pageStart", org.apache.thrift.protocol.TType.I32, (short)8);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)9);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryFundDiv_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryFundDiv_argsTupleSchemeFactory());
    }

    public String fundCode; // required
    public String regDateStart; // required
    public String regDateEnd; // required
    public String convertDateStart; // required
    public String convertDateEnd; // required
    public int divType; // required
    public int status; // required
    public int pageStart; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FUND_CODE((short)1, "fundCode"),
      REG_DATE_START((short)2, "regDateStart"),
      REG_DATE_END((short)3, "regDateEnd"),
      CONVERT_DATE_START((short)4, "convertDateStart"),
      CONVERT_DATE_END((short)5, "convertDateEnd"),
      DIV_TYPE((short)6, "divType"),
      STATUS((short)7, "status"),
      PAGE_START((short)8, "pageStart"),
      PAGE_SIZE((short)9, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FUND_CODE
            return FUND_CODE;
          case 2: // REG_DATE_START
            return REG_DATE_START;
          case 3: // REG_DATE_END
            return REG_DATE_END;
          case 4: // CONVERT_DATE_START
            return CONVERT_DATE_START;
          case 5: // CONVERT_DATE_END
            return CONVERT_DATE_END;
          case 6: // DIV_TYPE
            return DIV_TYPE;
          case 7: // STATUS
            return STATUS;
          case 8: // PAGE_START
            return PAGE_START;
          case 9: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DIVTYPE_ISSET_ID = 0;
    private static final int __STATUS_ISSET_ID = 1;
    private static final int __PAGESTART_ISSET_ID = 2;
    private static final int __PAGESIZE_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FUND_CODE, new org.apache.thrift.meta_data.FieldMetaData("fundCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REG_DATE_START, new org.apache.thrift.meta_data.FieldMetaData("regDateStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REG_DATE_END, new org.apache.thrift.meta_data.FieldMetaData("regDateEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONVERT_DATE_START, new org.apache.thrift.meta_data.FieldMetaData("convertDateStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONVERT_DATE_END, new org.apache.thrift.meta_data.FieldMetaData("convertDateEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DIV_TYPE, new org.apache.thrift.meta_data.FieldMetaData("divType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_START, new org.apache.thrift.meta_data.FieldMetaData("pageStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryFundDiv_args.class, metaDataMap);
    }

    public queryFundDiv_args() {
    }

    public queryFundDiv_args(
      String fundCode,
      String regDateStart,
      String regDateEnd,
      String convertDateStart,
      String convertDateEnd,
      int divType,
      int status,
      int pageStart,
      int pageSize)
    {
      this();
      this.fundCode = fundCode;
      this.regDateStart = regDateStart;
      this.regDateEnd = regDateEnd;
      this.convertDateStart = convertDateStart;
      this.convertDateEnd = convertDateEnd;
      this.divType = divType;
      setDivTypeIsSet(true);
      this.status = status;
      setStatusIsSet(true);
      this.pageStart = pageStart;
      setPageStartIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryFundDiv_args(queryFundDiv_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetFundCode()) {
        this.fundCode = other.fundCode;
      }
      if (other.isSetRegDateStart()) {
        this.regDateStart = other.regDateStart;
      }
      if (other.isSetRegDateEnd()) {
        this.regDateEnd = other.regDateEnd;
      }
      if (other.isSetConvertDateStart()) {
        this.convertDateStart = other.convertDateStart;
      }
      if (other.isSetConvertDateEnd()) {
        this.convertDateEnd = other.convertDateEnd;
      }
      this.divType = other.divType;
      this.status = other.status;
      this.pageStart = other.pageStart;
      this.pageSize = other.pageSize;
    }

    public queryFundDiv_args deepCopy() {
      return new queryFundDiv_args(this);
    }

    @Override
    public void clear() {
      this.fundCode = null;
      this.regDateStart = null;
      this.regDateEnd = null;
      this.convertDateStart = null;
      this.convertDateEnd = null;
      setDivTypeIsSet(false);
      this.divType = 0;
      setStatusIsSet(false);
      this.status = 0;
      setPageStartIsSet(false);
      this.pageStart = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public String getFundCode() {
      return this.fundCode;
    }

    public queryFundDiv_args setFundCode(String fundCode) {
      this.fundCode = fundCode;
      return this;
    }

    public void unsetFundCode() {
      this.fundCode = null;
    }

    /** Returns true if field fundCode is set (has been assigned a value) and false otherwise */
    public boolean isSetFundCode() {
      return this.fundCode != null;
    }

    public void setFundCodeIsSet(boolean value) {
      if (!value) {
        this.fundCode = null;
      }
    }

    public String getRegDateStart() {
      return this.regDateStart;
    }

    public queryFundDiv_args setRegDateStart(String regDateStart) {
      this.regDateStart = regDateStart;
      return this;
    }

    public void unsetRegDateStart() {
      this.regDateStart = null;
    }

    /** Returns true if field regDateStart is set (has been assigned a value) and false otherwise */
    public boolean isSetRegDateStart() {
      return this.regDateStart != null;
    }

    public void setRegDateStartIsSet(boolean value) {
      if (!value) {
        this.regDateStart = null;
      }
    }

    public String getRegDateEnd() {
      return this.regDateEnd;
    }

    public queryFundDiv_args setRegDateEnd(String regDateEnd) {
      this.regDateEnd = regDateEnd;
      return this;
    }

    public void unsetRegDateEnd() {
      this.regDateEnd = null;
    }

    /** Returns true if field regDateEnd is set (has been assigned a value) and false otherwise */
    public boolean isSetRegDateEnd() {
      return this.regDateEnd != null;
    }

    public void setRegDateEndIsSet(boolean value) {
      if (!value) {
        this.regDateEnd = null;
      }
    }

    public String getConvertDateStart() {
      return this.convertDateStart;
    }

    public queryFundDiv_args setConvertDateStart(String convertDateStart) {
      this.convertDateStart = convertDateStart;
      return this;
    }

    public void unsetConvertDateStart() {
      this.convertDateStart = null;
    }

    /** Returns true if field convertDateStart is set (has been assigned a value) and false otherwise */
    public boolean isSetConvertDateStart() {
      return this.convertDateStart != null;
    }

    public void setConvertDateStartIsSet(boolean value) {
      if (!value) {
        this.convertDateStart = null;
      }
    }

    public String getConvertDateEnd() {
      return this.convertDateEnd;
    }

    public queryFundDiv_args setConvertDateEnd(String convertDateEnd) {
      this.convertDateEnd = convertDateEnd;
      return this;
    }

    public void unsetConvertDateEnd() {
      this.convertDateEnd = null;
    }

    /** Returns true if field convertDateEnd is set (has been assigned a value) and false otherwise */
    public boolean isSetConvertDateEnd() {
      return this.convertDateEnd != null;
    }

    public void setConvertDateEndIsSet(boolean value) {
      if (!value) {
        this.convertDateEnd = null;
      }
    }

    public int getDivType() {
      return this.divType;
    }

    public queryFundDiv_args setDivType(int divType) {
      this.divType = divType;
      setDivTypeIsSet(true);
      return this;
    }

    public void unsetDivType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIVTYPE_ISSET_ID);
    }

    /** Returns true if field divType is set (has been assigned a value) and false otherwise */
    public boolean isSetDivType() {
      return EncodingUtils.testBit(__isset_bitfield, __DIVTYPE_ISSET_ID);
    }

    public void setDivTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIVTYPE_ISSET_ID, value);
    }

    public int getStatus() {
      return this.status;
    }

    public queryFundDiv_args setStatus(int status) {
      this.status = status;
      setStatusIsSet(true);
      return this;
    }

    public void unsetStatus() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
      return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
    }

    public void setStatusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
    }

    public int getPageStart() {
      return this.pageStart;
    }

    public queryFundDiv_args setPageStart(int pageStart) {
      this.pageStart = pageStart;
      setPageStartIsSet(true);
      return this;
    }

    public void unsetPageStart() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESTART_ISSET_ID);
    }

    /** Returns true if field pageStart is set (has been assigned a value) and false otherwise */
    public boolean isSetPageStart() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESTART_ISSET_ID);
    }

    public void setPageStartIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESTART_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public queryFundDiv_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FUND_CODE:
        if (value == null) {
          unsetFundCode();
        } else {
          setFundCode((String)value);
        }
        break;

      case REG_DATE_START:
        if (value == null) {
          unsetRegDateStart();
        } else {
          setRegDateStart((String)value);
        }
        break;

      case REG_DATE_END:
        if (value == null) {
          unsetRegDateEnd();
        } else {
          setRegDateEnd((String)value);
        }
        break;

      case CONVERT_DATE_START:
        if (value == null) {
          unsetConvertDateStart();
        } else {
          setConvertDateStart((String)value);
        }
        break;

      case CONVERT_DATE_END:
        if (value == null) {
          unsetConvertDateEnd();
        } else {
          setConvertDateEnd((String)value);
        }
        break;

      case DIV_TYPE:
        if (value == null) {
          unsetDivType();
        } else {
          setDivType((Integer)value);
        }
        break;

      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((Integer)value);
        }
        break;

      case PAGE_START:
        if (value == null) {
          unsetPageStart();
        } else {
          setPageStart((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FUND_CODE:
        return getFundCode();

      case REG_DATE_START:
        return getRegDateStart();

      case REG_DATE_END:
        return getRegDateEnd();

      case CONVERT_DATE_START:
        return getConvertDateStart();

      case CONVERT_DATE_END:
        return getConvertDateEnd();

      case DIV_TYPE:
        return Integer.valueOf(getDivType());

      case STATUS:
        return Integer.valueOf(getStatus());

      case PAGE_START:
        return Integer.valueOf(getPageStart());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FUND_CODE:
        return isSetFundCode();
      case REG_DATE_START:
        return isSetRegDateStart();
      case REG_DATE_END:
        return isSetRegDateEnd();
      case CONVERT_DATE_START:
        return isSetConvertDateStart();
      case CONVERT_DATE_END:
        return isSetConvertDateEnd();
      case DIV_TYPE:
        return isSetDivType();
      case STATUS:
        return isSetStatus();
      case PAGE_START:
        return isSetPageStart();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryFundDiv_args)
        return this.equals((queryFundDiv_args)that);
      return false;
    }

    public boolean equals(queryFundDiv_args that) {
      if (that == null)
        return false;

      boolean this_present_fundCode = true && this.isSetFundCode();
      boolean that_present_fundCode = true && that.isSetFundCode();
      if (this_present_fundCode || that_present_fundCode) {
        if (!(this_present_fundCode && that_present_fundCode))
          return false;
        if (!this.fundCode.equals(that.fundCode))
          return false;
      }

      boolean this_present_regDateStart = true && this.isSetRegDateStart();
      boolean that_present_regDateStart = true && that.isSetRegDateStart();
      if (this_present_regDateStart || that_present_regDateStart) {
        if (!(this_present_regDateStart && that_present_regDateStart))
          return false;
        if (!this.regDateStart.equals(that.regDateStart))
          return false;
      }

      boolean this_present_regDateEnd = true && this.isSetRegDateEnd();
      boolean that_present_regDateEnd = true && that.isSetRegDateEnd();
      if (this_present_regDateEnd || that_present_regDateEnd) {
        if (!(this_present_regDateEnd && that_present_regDateEnd))
          return false;
        if (!this.regDateEnd.equals(that.regDateEnd))
          return false;
      }

      boolean this_present_convertDateStart = true && this.isSetConvertDateStart();
      boolean that_present_convertDateStart = true && that.isSetConvertDateStart();
      if (this_present_convertDateStart || that_present_convertDateStart) {
        if (!(this_present_convertDateStart && that_present_convertDateStart))
          return false;
        if (!this.convertDateStart.equals(that.convertDateStart))
          return false;
      }

      boolean this_present_convertDateEnd = true && this.isSetConvertDateEnd();
      boolean that_present_convertDateEnd = true && that.isSetConvertDateEnd();
      if (this_present_convertDateEnd || that_present_convertDateEnd) {
        if (!(this_present_convertDateEnd && that_present_convertDateEnd))
          return false;
        if (!this.convertDateEnd.equals(that.convertDateEnd))
          return false;
      }

      boolean this_present_divType = true;
      boolean that_present_divType = true;
      if (this_present_divType || that_present_divType) {
        if (!(this_present_divType && that_present_divType))
          return false;
        if (this.divType != that.divType)
          return false;
      }

      boolean this_present_status = true;
      boolean that_present_status = true;
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (this.status != that.status)
          return false;
      }

      boolean this_present_pageStart = true;
      boolean that_present_pageStart = true;
      if (this_present_pageStart || that_present_pageStart) {
        if (!(this_present_pageStart && that_present_pageStart))
          return false;
        if (this.pageStart != that.pageStart)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryFundDiv_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFundCode()).compareTo(other.isSetFundCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFundCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fundCode, other.fundCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRegDateStart()).compareTo(other.isSetRegDateStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegDateStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regDateStart, other.regDateStart);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRegDateEnd()).compareTo(other.isSetRegDateEnd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegDateEnd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regDateEnd, other.regDateEnd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConvertDateStart()).compareTo(other.isSetConvertDateStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConvertDateStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.convertDateStart, other.convertDateStart);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConvertDateEnd()).compareTo(other.isSetConvertDateEnd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConvertDateEnd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.convertDateEnd, other.convertDateEnd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDivType()).compareTo(other.isSetDivType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDivType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.divType, other.divType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageStart()).compareTo(other.isSetPageStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageStart, other.pageStart);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryFundDiv_args(");
      boolean first = true;

      sb.append("fundCode:");
      if (this.fundCode == null) {
        sb.append("null");
      } else {
        sb.append(this.fundCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("regDateStart:");
      if (this.regDateStart == null) {
        sb.append("null");
      } else {
        sb.append(this.regDateStart);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("regDateEnd:");
      if (this.regDateEnd == null) {
        sb.append("null");
      } else {
        sb.append(this.regDateEnd);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("convertDateStart:");
      if (this.convertDateStart == null) {
        sb.append("null");
      } else {
        sb.append(this.convertDateStart);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("convertDateEnd:");
      if (this.convertDateEnd == null) {
        sb.append("null");
      } else {
        sb.append(this.convertDateEnd);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("divType:");
      sb.append(this.divType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("status:");
      sb.append(this.status);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageStart:");
      sb.append(this.pageStart);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryFundDiv_argsStandardSchemeFactory implements SchemeFactory {
      public queryFundDiv_argsStandardScheme getScheme() {
        return new queryFundDiv_argsStandardScheme();
      }
    }

    private static class queryFundDiv_argsStandardScheme extends StandardScheme<queryFundDiv_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryFundDiv_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FUND_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fundCode = iprot.readString();
                struct.setFundCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REG_DATE_START
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.regDateStart = iprot.readString();
                struct.setRegDateStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // REG_DATE_END
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.regDateEnd = iprot.readString();
                struct.setRegDateEndIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CONVERT_DATE_START
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.convertDateStart = iprot.readString();
                struct.setConvertDateStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // CONVERT_DATE_END
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.convertDateEnd = iprot.readString();
                struct.setConvertDateEndIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // DIV_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.divType = iprot.readI32();
                struct.setDivTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.status = iprot.readI32();
                struct.setStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // PAGE_START
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageStart = iprot.readI32();
                struct.setPageStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryFundDiv_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fundCode != null) {
          oprot.writeFieldBegin(FUND_CODE_FIELD_DESC);
          oprot.writeString(struct.fundCode);
          oprot.writeFieldEnd();
        }
        if (struct.regDateStart != null) {
          oprot.writeFieldBegin(REG_DATE_START_FIELD_DESC);
          oprot.writeString(struct.regDateStart);
          oprot.writeFieldEnd();
        }
        if (struct.regDateEnd != null) {
          oprot.writeFieldBegin(REG_DATE_END_FIELD_DESC);
          oprot.writeString(struct.regDateEnd);
          oprot.writeFieldEnd();
        }
        if (struct.convertDateStart != null) {
          oprot.writeFieldBegin(CONVERT_DATE_START_FIELD_DESC);
          oprot.writeString(struct.convertDateStart);
          oprot.writeFieldEnd();
        }
        if (struct.convertDateEnd != null) {
          oprot.writeFieldBegin(CONVERT_DATE_END_FIELD_DESC);
          oprot.writeString(struct.convertDateEnd);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(DIV_TYPE_FIELD_DESC);
        oprot.writeI32(struct.divType);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_START_FIELD_DESC);
        oprot.writeI32(struct.pageStart);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryFundDiv_argsTupleSchemeFactory implements SchemeFactory {
      public queryFundDiv_argsTupleScheme getScheme() {
        return new queryFundDiv_argsTupleScheme();
      }
    }

    private static class queryFundDiv_argsTupleScheme extends TupleScheme<queryFundDiv_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryFundDiv_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFundCode()) {
          optionals.set(0);
        }
        if (struct.isSetRegDateStart()) {
          optionals.set(1);
        }
        if (struct.isSetRegDateEnd()) {
          optionals.set(2);
        }
        if (struct.isSetConvertDateStart()) {
          optionals.set(3);
        }
        if (struct.isSetConvertDateEnd()) {
          optionals.set(4);
        }
        if (struct.isSetDivType()) {
          optionals.set(5);
        }
        if (struct.isSetStatus()) {
          optionals.set(6);
        }
        if (struct.isSetPageStart()) {
          optionals.set(7);
        }
        if (struct.isSetPageSize()) {
          optionals.set(8);
        }
        oprot.writeBitSet(optionals, 9);
        if (struct.isSetFundCode()) {
          oprot.writeString(struct.fundCode);
        }
        if (struct.isSetRegDateStart()) {
          oprot.writeString(struct.regDateStart);
        }
        if (struct.isSetRegDateEnd()) {
          oprot.writeString(struct.regDateEnd);
        }
        if (struct.isSetConvertDateStart()) {
          oprot.writeString(struct.convertDateStart);
        }
        if (struct.isSetConvertDateEnd()) {
          oprot.writeString(struct.convertDateEnd);
        }
        if (struct.isSetDivType()) {
          oprot.writeI32(struct.divType);
        }
        if (struct.isSetStatus()) {
          oprot.writeI32(struct.status);
        }
        if (struct.isSetPageStart()) {
          oprot.writeI32(struct.pageStart);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryFundDiv_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(9);
        if (incoming.get(0)) {
          struct.fundCode = iprot.readString();
          struct.setFundCodeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.regDateStart = iprot.readString();
          struct.setRegDateStartIsSet(true);
        }
        if (incoming.get(2)) {
          struct.regDateEnd = iprot.readString();
          struct.setRegDateEndIsSet(true);
        }
        if (incoming.get(3)) {
          struct.convertDateStart = iprot.readString();
          struct.setConvertDateStartIsSet(true);
        }
        if (incoming.get(4)) {
          struct.convertDateEnd = iprot.readString();
          struct.setConvertDateEndIsSet(true);
        }
        if (incoming.get(5)) {
          struct.divType = iprot.readI32();
          struct.setDivTypeIsSet(true);
        }
        if (incoming.get(6)) {
          struct.status = iprot.readI32();
          struct.setStatusIsSet(true);
        }
        if (incoming.get(7)) {
          struct.pageStart = iprot.readI32();
          struct.setPageStartIsSet(true);
        }
        if (incoming.get(8)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class queryFundDiv_result implements org.apache.thrift.TBase<queryFundDiv_result, queryFundDiv_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryFundDiv_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryFundDiv_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryFundDiv_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryFundDiv_resultTupleSchemeFactory());
    }

    public List<FundDivThrift> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FundDivThrift.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryFundDiv_result.class, metaDataMap);
    }

    public queryFundDiv_result() {
    }

    public queryFundDiv_result(
      List<FundDivThrift> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryFundDiv_result(queryFundDiv_result other) {
      if (other.isSetSuccess()) {
        List<FundDivThrift> __this__success = new ArrayList<FundDivThrift>(other.success.size());
        for (FundDivThrift other_element : other.success) {
          __this__success.add(new FundDivThrift(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryFundDiv_result deepCopy() {
      return new queryFundDiv_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<FundDivThrift> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(FundDivThrift elem) {
      if (this.success == null) {
        this.success = new ArrayList<FundDivThrift>();
      }
      this.success.add(elem);
    }

    public List<FundDivThrift> getSuccess() {
      return this.success;
    }

    public queryFundDiv_result setSuccess(List<FundDivThrift> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<FundDivThrift>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryFundDiv_result)
        return this.equals((queryFundDiv_result)that);
      return false;
    }

    public boolean equals(queryFundDiv_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryFundDiv_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryFundDiv_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryFundDiv_resultStandardSchemeFactory implements SchemeFactory {
      public queryFundDiv_resultStandardScheme getScheme() {
        return new queryFundDiv_resultStandardScheme();
      }
    }

    private static class queryFundDiv_resultStandardScheme extends StandardScheme<queryFundDiv_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryFundDiv_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list180 = iprot.readListBegin();
                  struct.success = new ArrayList<FundDivThrift>(_list180.size);
                  for (int _i181 = 0; _i181 < _list180.size; ++_i181)
                  {
                    FundDivThrift _elem182;
                    _elem182 = new FundDivThrift();
                    _elem182.read(iprot);
                    struct.success.add(_elem182);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryFundDiv_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (FundDivThrift _iter183 : struct.success)
            {
              _iter183.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryFundDiv_resultTupleSchemeFactory implements SchemeFactory {
      public queryFundDiv_resultTupleScheme getScheme() {
        return new queryFundDiv_resultTupleScheme();
      }
    }

    private static class queryFundDiv_resultTupleScheme extends TupleScheme<queryFundDiv_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryFundDiv_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (FundDivThrift _iter184 : struct.success)
            {
              _iter184.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryFundDiv_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list185 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<FundDivThrift>(_list185.size);
            for (int _i186 = 0; _i186 < _list185.size; ++_i186)
            {
              FundDivThrift _elem187;
              _elem187 = new FundDivThrift();
              _elem187.read(iprot);
              struct.success.add(_elem187);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class insertFundDiv_args implements org.apache.thrift.TBase<insertFundDiv_args, insertFundDiv_args._Fields>, java.io.Serializable, Cloneable, Comparable<insertFundDiv_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertFundDiv_args");

    private static final org.apache.thrift.protocol.TField FUND_FIELD_DESC = new org.apache.thrift.protocol.TField("fund", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insertFundDiv_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insertFundDiv_argsTupleSchemeFactory());
    }

    public FundDivThrift fund; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FUND((short)1, "fund");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FUND
            return FUND;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FUND, new org.apache.thrift.meta_data.FieldMetaData("fund", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FundDivThrift.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertFundDiv_args.class, metaDataMap);
    }

    public insertFundDiv_args() {
    }

    public insertFundDiv_args(
      FundDivThrift fund)
    {
      this();
      this.fund = fund;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insertFundDiv_args(insertFundDiv_args other) {
      if (other.isSetFund()) {
        this.fund = new FundDivThrift(other.fund);
      }
    }

    public insertFundDiv_args deepCopy() {
      return new insertFundDiv_args(this);
    }

    @Override
    public void clear() {
      this.fund = null;
    }

    public FundDivThrift getFund() {
      return this.fund;
    }

    public insertFundDiv_args setFund(FundDivThrift fund) {
      this.fund = fund;
      return this;
    }

    public void unsetFund() {
      this.fund = null;
    }

    /** Returns true if field fund is set (has been assigned a value) and false otherwise */
    public boolean isSetFund() {
      return this.fund != null;
    }

    public void setFundIsSet(boolean value) {
      if (!value) {
        this.fund = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FUND:
        if (value == null) {
          unsetFund();
        } else {
          setFund((FundDivThrift)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FUND:
        return getFund();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FUND:
        return isSetFund();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insertFundDiv_args)
        return this.equals((insertFundDiv_args)that);
      return false;
    }

    public boolean equals(insertFundDiv_args that) {
      if (that == null)
        return false;

      boolean this_present_fund = true && this.isSetFund();
      boolean that_present_fund = true && that.isSetFund();
      if (this_present_fund || that_present_fund) {
        if (!(this_present_fund && that_present_fund))
          return false;
        if (!this.fund.equals(that.fund))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(insertFundDiv_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFund()).compareTo(other.isSetFund());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFund()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fund, other.fund);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insertFundDiv_args(");
      boolean first = true;

      sb.append("fund:");
      if (this.fund == null) {
        sb.append("null");
      } else {
        sb.append(this.fund);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (fund != null) {
        fund.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insertFundDiv_argsStandardSchemeFactory implements SchemeFactory {
      public insertFundDiv_argsStandardScheme getScheme() {
        return new insertFundDiv_argsStandardScheme();
      }
    }

    private static class insertFundDiv_argsStandardScheme extends StandardScheme<insertFundDiv_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insertFundDiv_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fund = new FundDivThrift();
                struct.fund.read(iprot);
                struct.setFundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insertFundDiv_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fund != null) {
          oprot.writeFieldBegin(FUND_FIELD_DESC);
          struct.fund.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insertFundDiv_argsTupleSchemeFactory implements SchemeFactory {
      public insertFundDiv_argsTupleScheme getScheme() {
        return new insertFundDiv_argsTupleScheme();
      }
    }

    private static class insertFundDiv_argsTupleScheme extends TupleScheme<insertFundDiv_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insertFundDiv_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFund()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFund()) {
          struct.fund.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insertFundDiv_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.fund = new FundDivThrift();
          struct.fund.read(iprot);
          struct.setFundIsSet(true);
        }
      }
    }

  }

  public static class insertFundDiv_result implements org.apache.thrift.TBase<insertFundDiv_result, insertFundDiv_result._Fields>, java.io.Serializable, Cloneable, Comparable<insertFundDiv_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertFundDiv_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insertFundDiv_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insertFundDiv_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertFundDiv_result.class, metaDataMap);
    }

    public insertFundDiv_result() {
    }

    public insertFundDiv_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insertFundDiv_result(insertFundDiv_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public insertFundDiv_result deepCopy() {
      return new insertFundDiv_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public insertFundDiv_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insertFundDiv_result)
        return this.equals((insertFundDiv_result)that);
      return false;
    }

    public boolean equals(insertFundDiv_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(insertFundDiv_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insertFundDiv_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insertFundDiv_resultStandardSchemeFactory implements SchemeFactory {
      public insertFundDiv_resultStandardScheme getScheme() {
        return new insertFundDiv_resultStandardScheme();
      }
    }

    private static class insertFundDiv_resultStandardScheme extends StandardScheme<insertFundDiv_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insertFundDiv_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insertFundDiv_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insertFundDiv_resultTupleSchemeFactory implements SchemeFactory {
      public insertFundDiv_resultTupleScheme getScheme() {
        return new insertFundDiv_resultTupleScheme();
      }
    }

    private static class insertFundDiv_resultTupleScheme extends TupleScheme<insertFundDiv_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insertFundDiv_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insertFundDiv_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateFundDiv_args implements org.apache.thrift.TBase<updateFundDiv_args, updateFundDiv_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateFundDiv_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateFundDiv_args");

    private static final org.apache.thrift.protocol.TField FUND_FIELD_DESC = new org.apache.thrift.protocol.TField("fund", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateFundDiv_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateFundDiv_argsTupleSchemeFactory());
    }

    public FundDivThrift fund; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FUND((short)1, "fund");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FUND
            return FUND;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FUND, new org.apache.thrift.meta_data.FieldMetaData("fund", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FundDivThrift.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateFundDiv_args.class, metaDataMap);
    }

    public updateFundDiv_args() {
    }

    public updateFundDiv_args(
      FundDivThrift fund)
    {
      this();
      this.fund = fund;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateFundDiv_args(updateFundDiv_args other) {
      if (other.isSetFund()) {
        this.fund = new FundDivThrift(other.fund);
      }
    }

    public updateFundDiv_args deepCopy() {
      return new updateFundDiv_args(this);
    }

    @Override
    public void clear() {
      this.fund = null;
    }

    public FundDivThrift getFund() {
      return this.fund;
    }

    public updateFundDiv_args setFund(FundDivThrift fund) {
      this.fund = fund;
      return this;
    }

    public void unsetFund() {
      this.fund = null;
    }

    /** Returns true if field fund is set (has been assigned a value) and false otherwise */
    public boolean isSetFund() {
      return this.fund != null;
    }

    public void setFundIsSet(boolean value) {
      if (!value) {
        this.fund = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FUND:
        if (value == null) {
          unsetFund();
        } else {
          setFund((FundDivThrift)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FUND:
        return getFund();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FUND:
        return isSetFund();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateFundDiv_args)
        return this.equals((updateFundDiv_args)that);
      return false;
    }

    public boolean equals(updateFundDiv_args that) {
      if (that == null)
        return false;

      boolean this_present_fund = true && this.isSetFund();
      boolean that_present_fund = true && that.isSetFund();
      if (this_present_fund || that_present_fund) {
        if (!(this_present_fund && that_present_fund))
          return false;
        if (!this.fund.equals(that.fund))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateFundDiv_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFund()).compareTo(other.isSetFund());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFund()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fund, other.fund);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateFundDiv_args(");
      boolean first = true;

      sb.append("fund:");
      if (this.fund == null) {
        sb.append("null");
      } else {
        sb.append(this.fund);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (fund != null) {
        fund.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateFundDiv_argsStandardSchemeFactory implements SchemeFactory {
      public updateFundDiv_argsStandardScheme getScheme() {
        return new updateFundDiv_argsStandardScheme();
      }
    }

    private static class updateFundDiv_argsStandardScheme extends StandardScheme<updateFundDiv_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateFundDiv_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fund = new FundDivThrift();
                struct.fund.read(iprot);
                struct.setFundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateFundDiv_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fund != null) {
          oprot.writeFieldBegin(FUND_FIELD_DESC);
          struct.fund.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateFundDiv_argsTupleSchemeFactory implements SchemeFactory {
      public updateFundDiv_argsTupleScheme getScheme() {
        return new updateFundDiv_argsTupleScheme();
      }
    }

    private static class updateFundDiv_argsTupleScheme extends TupleScheme<updateFundDiv_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateFundDiv_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFund()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFund()) {
          struct.fund.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateFundDiv_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.fund = new FundDivThrift();
          struct.fund.read(iprot);
          struct.setFundIsSet(true);
        }
      }
    }

  }

  public static class updateFundDiv_result implements org.apache.thrift.TBase<updateFundDiv_result, updateFundDiv_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateFundDiv_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateFundDiv_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateFundDiv_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateFundDiv_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateFundDiv_result.class, metaDataMap);
    }

    public updateFundDiv_result() {
    }

    public updateFundDiv_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateFundDiv_result(updateFundDiv_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateFundDiv_result deepCopy() {
      return new updateFundDiv_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateFundDiv_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateFundDiv_result)
        return this.equals((updateFundDiv_result)that);
      return false;
    }

    public boolean equals(updateFundDiv_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateFundDiv_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateFundDiv_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateFundDiv_resultStandardSchemeFactory implements SchemeFactory {
      public updateFundDiv_resultStandardScheme getScheme() {
        return new updateFundDiv_resultStandardScheme();
      }
    }

    private static class updateFundDiv_resultStandardScheme extends StandardScheme<updateFundDiv_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateFundDiv_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateFundDiv_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateFundDiv_resultTupleSchemeFactory implements SchemeFactory {
      public updateFundDiv_resultTupleScheme getScheme() {
        return new updateFundDiv_resultTupleScheme();
      }
    }

    private static class updateFundDiv_resultTupleScheme extends TupleScheme<updateFundDiv_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateFundDiv_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateFundDiv_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteFundDiv_args implements org.apache.thrift.TBase<deleteFundDiv_args, deleteFundDiv_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteFundDiv_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteFundDiv_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteFundDiv_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteFundDiv_argsTupleSchemeFactory());
    }

    public int id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteFundDiv_args.class, metaDataMap);
    }

    public deleteFundDiv_args() {
    }

    public deleteFundDiv_args(
      int id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteFundDiv_args(deleteFundDiv_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
    }

    public deleteFundDiv_args deepCopy() {
      return new deleteFundDiv_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public int getId() {
      return this.id;
    }

    public deleteFundDiv_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Integer.valueOf(getId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteFundDiv_args)
        return this.equals((deleteFundDiv_args)that);
      return false;
    }

    public boolean equals(deleteFundDiv_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteFundDiv_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteFundDiv_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteFundDiv_argsStandardSchemeFactory implements SchemeFactory {
      public deleteFundDiv_argsStandardScheme getScheme() {
        return new deleteFundDiv_argsStandardScheme();
      }
    }

    private static class deleteFundDiv_argsStandardScheme extends StandardScheme<deleteFundDiv_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteFundDiv_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteFundDiv_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteFundDiv_argsTupleSchemeFactory implements SchemeFactory {
      public deleteFundDiv_argsTupleScheme getScheme() {
        return new deleteFundDiv_argsTupleScheme();
      }
    }

    private static class deleteFundDiv_argsTupleScheme extends TupleScheme<deleteFundDiv_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteFundDiv_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteFundDiv_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class deleteFundDiv_result implements org.apache.thrift.TBase<deleteFundDiv_result, deleteFundDiv_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteFundDiv_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteFundDiv_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteFundDiv_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteFundDiv_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteFundDiv_result.class, metaDataMap);
    }

    public deleteFundDiv_result() {
    }

    public deleteFundDiv_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteFundDiv_result(deleteFundDiv_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public deleteFundDiv_result deepCopy() {
      return new deleteFundDiv_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public deleteFundDiv_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteFundDiv_result)
        return this.equals((deleteFundDiv_result)that);
      return false;
    }

    public boolean equals(deleteFundDiv_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteFundDiv_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteFundDiv_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteFundDiv_resultStandardSchemeFactory implements SchemeFactory {
      public deleteFundDiv_resultStandardScheme getScheme() {
        return new deleteFundDiv_resultStandardScheme();
      }
    }

    private static class deleteFundDiv_resultStandardScheme extends StandardScheme<deleteFundDiv_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteFundDiv_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteFundDiv_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteFundDiv_resultTupleSchemeFactory implements SchemeFactory {
      public deleteFundDiv_resultTupleScheme getScheme() {
        return new deleteFundDiv_resultTupleScheme();
      }
    }

    private static class deleteFundDiv_resultTupleScheme extends TupleScheme<deleteFundDiv_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteFundDiv_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteFundDiv_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findCById_args implements org.apache.thrift.TBase<findCById_args, findCById_args._Fields>, java.io.Serializable, Cloneable, Comparable<findCById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findCById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findCById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findCById_argsTupleSchemeFactory());
    }

    public int id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findCById_args.class, metaDataMap);
    }

    public findCById_args() {
    }

    public findCById_args(
      int id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findCById_args(findCById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
    }

    public findCById_args deepCopy() {
      return new findCById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public int getId() {
      return this.id;
    }

    public findCById_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Integer.valueOf(getId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findCById_args)
        return this.equals((findCById_args)that);
      return false;
    }

    public boolean equals(findCById_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(findCById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findCById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findCById_argsStandardSchemeFactory implements SchemeFactory {
      public findCById_argsStandardScheme getScheme() {
        return new findCById_argsStandardScheme();
      }
    }

    private static class findCById_argsStandardScheme extends StandardScheme<findCById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findCById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findCById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findCById_argsTupleSchemeFactory implements SchemeFactory {
      public findCById_argsTupleScheme getScheme() {
        return new findCById_argsTupleScheme();
      }
    }

    private static class findCById_argsTupleScheme extends TupleScheme<findCById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findCById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findCById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class findCById_result implements org.apache.thrift.TBase<findCById_result, findCById_result._Fields>, java.io.Serializable, Cloneable, Comparable<findCById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findCById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findCById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findCById_resultTupleSchemeFactory());
    }

    public FundConvertThrift success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FundConvertThrift.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findCById_result.class, metaDataMap);
    }

    public findCById_result() {
    }

    public findCById_result(
      FundConvertThrift success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findCById_result(findCById_result other) {
      if (other.isSetSuccess()) {
        this.success = new FundConvertThrift(other.success);
      }
    }

    public findCById_result deepCopy() {
      return new findCById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public FundConvertThrift getSuccess() {
      return this.success;
    }

    public findCById_result setSuccess(FundConvertThrift success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((FundConvertThrift)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findCById_result)
        return this.equals((findCById_result)that);
      return false;
    }

    public boolean equals(findCById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(findCById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findCById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findCById_resultStandardSchemeFactory implements SchemeFactory {
      public findCById_resultStandardScheme getScheme() {
        return new findCById_resultStandardScheme();
      }
    }

    private static class findCById_resultStandardScheme extends StandardScheme<findCById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findCById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new FundConvertThrift();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findCById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findCById_resultTupleSchemeFactory implements SchemeFactory {
      public findCById_resultTupleScheme getScheme() {
        return new findCById_resultTupleScheme();
      }
    }

    private static class findCById_resultTupleScheme extends TupleScheme<findCById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findCById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findCById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new FundConvertThrift();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findDById_args implements org.apache.thrift.TBase<findDById_args, findDById_args._Fields>, java.io.Serializable, Cloneable, Comparable<findDById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findDById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findDById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findDById_argsTupleSchemeFactory());
    }

    public int id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findDById_args.class, metaDataMap);
    }

    public findDById_args() {
    }

    public findDById_args(
      int id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findDById_args(findDById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
    }

    public findDById_args deepCopy() {
      return new findDById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public int getId() {
      return this.id;
    }

    public findDById_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Integer.valueOf(getId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findDById_args)
        return this.equals((findDById_args)that);
      return false;
    }

    public boolean equals(findDById_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(findDById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findDById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findDById_argsStandardSchemeFactory implements SchemeFactory {
      public findDById_argsStandardScheme getScheme() {
        return new findDById_argsStandardScheme();
      }
    }

    private static class findDById_argsStandardScheme extends StandardScheme<findDById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findDById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findDById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findDById_argsTupleSchemeFactory implements SchemeFactory {
      public findDById_argsTupleScheme getScheme() {
        return new findDById_argsTupleScheme();
      }
    }

    private static class findDById_argsTupleScheme extends TupleScheme<findDById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findDById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findDById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class findDById_result implements org.apache.thrift.TBase<findDById_result, findDById_result._Fields>, java.io.Serializable, Cloneable, Comparable<findDById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findDById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findDById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findDById_resultTupleSchemeFactory());
    }

    public FundDivThrift success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FundDivThrift.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findDById_result.class, metaDataMap);
    }

    public findDById_result() {
    }

    public findDById_result(
      FundDivThrift success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findDById_result(findDById_result other) {
      if (other.isSetSuccess()) {
        this.success = new FundDivThrift(other.success);
      }
    }

    public findDById_result deepCopy() {
      return new findDById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public FundDivThrift getSuccess() {
      return this.success;
    }

    public findDById_result setSuccess(FundDivThrift success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((FundDivThrift)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findDById_result)
        return this.equals((findDById_result)that);
      return false;
    }

    public boolean equals(findDById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(findDById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findDById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findDById_resultStandardSchemeFactory implements SchemeFactory {
      public findDById_resultStandardScheme getScheme() {
        return new findDById_resultStandardScheme();
      }
    }

    private static class findDById_resultStandardScheme extends StandardScheme<findDById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findDById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new FundDivThrift();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findDById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findDById_resultTupleSchemeFactory implements SchemeFactory {
      public findDById_resultTupleScheme getScheme() {
        return new findDById_resultTupleScheme();
      }
    }

    private static class findDById_resultTupleScheme extends TupleScheme<findDById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findDById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findDById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new FundDivThrift();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
