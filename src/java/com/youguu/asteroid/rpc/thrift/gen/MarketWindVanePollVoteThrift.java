/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.youguu.asteroid.rpc.thrift.gen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 统计投票
 */
public class MarketWindVanePollVoteThrift implements org.apache.thrift.TBase<MarketWindVanePollVoteThrift, MarketWindVanePollVoteThrift._Fields>, java.io.Serializable, Cloneable, Comparable<MarketWindVanePollVoteThrift> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MarketWindVanePollVoteThrift");

  private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("num", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField UP_FIELD_DESC = new org.apache.thrift.protocol.TField("up", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField DOWN_FIELD_DESC = new org.apache.thrift.protocol.TField("down", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("result", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MarketWindVanePollVoteThriftStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MarketWindVanePollVoteThriftTupleSchemeFactory());
  }

  public String date; // required
  public int num; // required
  public int up; // required
  public int down; // required
  public int result; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DATE((short)1, "date"),
    NUM((short)2, "num"),
    UP((short)3, "up"),
    DOWN((short)4, "down"),
    RESULT((short)5, "result");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DATE
          return DATE;
        case 2: // NUM
          return NUM;
        case 3: // UP
          return UP;
        case 4: // DOWN
          return DOWN;
        case 5: // RESULT
          return RESULT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUM_ISSET_ID = 0;
  private static final int __UP_ISSET_ID = 1;
  private static final int __DOWN_ISSET_ID = 2;
  private static final int __RESULT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUM, new org.apache.thrift.meta_data.FieldMetaData("num", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UP, new org.apache.thrift.meta_data.FieldMetaData("up", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DOWN, new org.apache.thrift.meta_data.FieldMetaData("down", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RESULT, new org.apache.thrift.meta_data.FieldMetaData("result", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MarketWindVanePollVoteThrift.class, metaDataMap);
  }

  public MarketWindVanePollVoteThrift() {
  }

  public MarketWindVanePollVoteThrift(
    String date,
    int num,
    int up,
    int down,
    int result)
  {
    this();
    this.date = date;
    this.num = num;
    setNumIsSet(true);
    this.up = up;
    setUpIsSet(true);
    this.down = down;
    setDownIsSet(true);
    this.result = result;
    setResultIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MarketWindVanePollVoteThrift(MarketWindVanePollVoteThrift other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDate()) {
      this.date = other.date;
    }
    this.num = other.num;
    this.up = other.up;
    this.down = other.down;
    this.result = other.result;
  }

  public MarketWindVanePollVoteThrift deepCopy() {
    return new MarketWindVanePollVoteThrift(this);
  }

  @Override
  public void clear() {
    this.date = null;
    setNumIsSet(false);
    this.num = 0;
    setUpIsSet(false);
    this.up = 0;
    setDownIsSet(false);
    this.down = 0;
    setResultIsSet(false);
    this.result = 0;
  }

  public String getDate() {
    return this.date;
  }

  public MarketWindVanePollVoteThrift setDate(String date) {
    this.date = date;
    return this;
  }

  public void unsetDate() {
    this.date = null;
  }

  /** Returns true if field date is set (has been assigned a value) and false otherwise */
  public boolean isSetDate() {
    return this.date != null;
  }

  public void setDateIsSet(boolean value) {
    if (!value) {
      this.date = null;
    }
  }

  public int getNum() {
    return this.num;
  }

  public MarketWindVanePollVoteThrift setNum(int num) {
    this.num = num;
    setNumIsSet(true);
    return this;
  }

  public void unsetNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_ISSET_ID);
  }

  /** Returns true if field num is set (has been assigned a value) and false otherwise */
  public boolean isSetNum() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_ISSET_ID);
  }

  public void setNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_ISSET_ID, value);
  }

  public int getUp() {
    return this.up;
  }

  public MarketWindVanePollVoteThrift setUp(int up) {
    this.up = up;
    setUpIsSet(true);
    return this;
  }

  public void unsetUp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UP_ISSET_ID);
  }

  /** Returns true if field up is set (has been assigned a value) and false otherwise */
  public boolean isSetUp() {
    return EncodingUtils.testBit(__isset_bitfield, __UP_ISSET_ID);
  }

  public void setUpIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UP_ISSET_ID, value);
  }

  public int getDown() {
    return this.down;
  }

  public MarketWindVanePollVoteThrift setDown(int down) {
    this.down = down;
    setDownIsSet(true);
    return this;
  }

  public void unsetDown() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOWN_ISSET_ID);
  }

  /** Returns true if field down is set (has been assigned a value) and false otherwise */
  public boolean isSetDown() {
    return EncodingUtils.testBit(__isset_bitfield, __DOWN_ISSET_ID);
  }

  public void setDownIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOWN_ISSET_ID, value);
  }

  public int getResult() {
    return this.result;
  }

  public MarketWindVanePollVoteThrift setResult(int result) {
    this.result = result;
    setResultIsSet(true);
    return this;
  }

  public void unsetResult() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESULT_ISSET_ID);
  }

  /** Returns true if field result is set (has been assigned a value) and false otherwise */
  public boolean isSetResult() {
    return EncodingUtils.testBit(__isset_bitfield, __RESULT_ISSET_ID);
  }

  public void setResultIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESULT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DATE:
      if (value == null) {
        unsetDate();
      } else {
        setDate((String)value);
      }
      break;

    case NUM:
      if (value == null) {
        unsetNum();
      } else {
        setNum((Integer)value);
      }
      break;

    case UP:
      if (value == null) {
        unsetUp();
      } else {
        setUp((Integer)value);
      }
      break;

    case DOWN:
      if (value == null) {
        unsetDown();
      } else {
        setDown((Integer)value);
      }
      break;

    case RESULT:
      if (value == null) {
        unsetResult();
      } else {
        setResult((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DATE:
      return getDate();

    case NUM:
      return Integer.valueOf(getNum());

    case UP:
      return Integer.valueOf(getUp());

    case DOWN:
      return Integer.valueOf(getDown());

    case RESULT:
      return Integer.valueOf(getResult());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DATE:
      return isSetDate();
    case NUM:
      return isSetNum();
    case UP:
      return isSetUp();
    case DOWN:
      return isSetDown();
    case RESULT:
      return isSetResult();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MarketWindVanePollVoteThrift)
      return this.equals((MarketWindVanePollVoteThrift)that);
    return false;
  }

  public boolean equals(MarketWindVanePollVoteThrift that) {
    if (that == null)
      return false;

    boolean this_present_date = true && this.isSetDate();
    boolean that_present_date = true && that.isSetDate();
    if (this_present_date || that_present_date) {
      if (!(this_present_date && that_present_date))
        return false;
      if (!this.date.equals(that.date))
        return false;
    }

    boolean this_present_num = true;
    boolean that_present_num = true;
    if (this_present_num || that_present_num) {
      if (!(this_present_num && that_present_num))
        return false;
      if (this.num != that.num)
        return false;
    }

    boolean this_present_up = true;
    boolean that_present_up = true;
    if (this_present_up || that_present_up) {
      if (!(this_present_up && that_present_up))
        return false;
      if (this.up != that.up)
        return false;
    }

    boolean this_present_down = true;
    boolean that_present_down = true;
    if (this_present_down || that_present_down) {
      if (!(this_present_down && that_present_down))
        return false;
      if (this.down != that.down)
        return false;
    }

    boolean this_present_result = true;
    boolean that_present_result = true;
    if (this_present_result || that_present_result) {
      if (!(this_present_result && that_present_result))
        return false;
      if (this.result != that.result)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(MarketWindVanePollVoteThrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDate()).compareTo(other.isSetDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum()).compareTo(other.isSetNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num, other.num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUp()).compareTo(other.isSetUp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.up, other.up);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDown()).compareTo(other.isSetDown());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDown()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.down, other.down);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResult()).compareTo(other.isSetResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result, other.result);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MarketWindVanePollVoteThrift(");
    boolean first = true;

    sb.append("date:");
    if (this.date == null) {
      sb.append("null");
    } else {
      sb.append(this.date);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("num:");
    sb.append(this.num);
    first = false;
    if (!first) sb.append(", ");
    sb.append("up:");
    sb.append(this.up);
    first = false;
    if (!first) sb.append(", ");
    sb.append("down:");
    sb.append(this.down);
    first = false;
    if (!first) sb.append(", ");
    sb.append("result:");
    sb.append(this.result);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MarketWindVanePollVoteThriftStandardSchemeFactory implements SchemeFactory {
    public MarketWindVanePollVoteThriftStandardScheme getScheme() {
      return new MarketWindVanePollVoteThriftStandardScheme();
    }
  }

  private static class MarketWindVanePollVoteThriftStandardScheme extends StandardScheme<MarketWindVanePollVoteThrift> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MarketWindVanePollVoteThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.date = iprot.readString();
              struct.setDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num = iprot.readI32();
              struct.setNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // UP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.up = iprot.readI32();
              struct.setUpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DOWN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.down = iprot.readI32();
              struct.setDownIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.result = iprot.readI32();
              struct.setResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MarketWindVanePollVoteThrift struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.date != null) {
        oprot.writeFieldBegin(DATE_FIELD_DESC);
        oprot.writeString(struct.date);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NUM_FIELD_DESC);
      oprot.writeI32(struct.num);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UP_FIELD_DESC);
      oprot.writeI32(struct.up);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DOWN_FIELD_DESC);
      oprot.writeI32(struct.down);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RESULT_FIELD_DESC);
      oprot.writeI32(struct.result);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MarketWindVanePollVoteThriftTupleSchemeFactory implements SchemeFactory {
    public MarketWindVanePollVoteThriftTupleScheme getScheme() {
      return new MarketWindVanePollVoteThriftTupleScheme();
    }
  }

  private static class MarketWindVanePollVoteThriftTupleScheme extends TupleScheme<MarketWindVanePollVoteThrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MarketWindVanePollVoteThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDate()) {
        optionals.set(0);
      }
      if (struct.isSetNum()) {
        optionals.set(1);
      }
      if (struct.isSetUp()) {
        optionals.set(2);
      }
      if (struct.isSetDown()) {
        optionals.set(3);
      }
      if (struct.isSetResult()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetDate()) {
        oprot.writeString(struct.date);
      }
      if (struct.isSetNum()) {
        oprot.writeI32(struct.num);
      }
      if (struct.isSetUp()) {
        oprot.writeI32(struct.up);
      }
      if (struct.isSetDown()) {
        oprot.writeI32(struct.down);
      }
      if (struct.isSetResult()) {
        oprot.writeI32(struct.result);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MarketWindVanePollVoteThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.date = iprot.readString();
        struct.setDateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.num = iprot.readI32();
        struct.setNumIsSet(true);
      }
      if (incoming.get(2)) {
        struct.up = iprot.readI32();
        struct.setUpIsSet(true);
      }
      if (incoming.get(3)) {
        struct.down = iprot.readI32();
        struct.setDownIsSet(true);
      }
      if (incoming.get(4)) {
        struct.result = iprot.readI32();
        struct.setResultIsSet(true);
      }
    }
  }

}

