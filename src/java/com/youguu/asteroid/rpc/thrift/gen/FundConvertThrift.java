/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.youguu.asteroid.rpc.thrift.gen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 分级基金信息service
 */
public class FundConvertThrift implements org.apache.thrift.TBase<FundConvertThrift, FundConvertThrift._Fields>, java.io.Serializable, Cloneable, Comparable<FundConvertThrift> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FundConvertThrift");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField AFUND_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("afundCode", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BFUND_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("bfundCode", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CONVERT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("convertType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField ACONVERT_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("aconvertRate", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField BCONVERT_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("bconvertRate", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField AB_RATIO_FIELD_DESC = new org.apache.thrift.protocol.TField("abRatio", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField REG_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("regDate", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField CONVERT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("convertDate", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField IMPORT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("importTime", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FundConvertThriftStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FundConvertThriftTupleSchemeFactory());
  }

  public int id; // required
  public String afundCode; // required
  public String bfundCode; // required
  public int convertType; // required
  public double aconvertRate; // required
  public double bconvertRate; // required
  public double abRatio; // required
  public String regDate; // required
  public String convertDate; // required
  public int status; // required
  public String importTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    AFUND_CODE((short)2, "afundCode"),
    BFUND_CODE((short)3, "bfundCode"),
    CONVERT_TYPE((short)4, "convertType"),
    ACONVERT_RATE((short)5, "aconvertRate"),
    BCONVERT_RATE((short)6, "bconvertRate"),
    AB_RATIO((short)7, "abRatio"),
    REG_DATE((short)8, "regDate"),
    CONVERT_DATE((short)9, "convertDate"),
    STATUS((short)10, "status"),
    IMPORT_TIME((short)11, "importTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // AFUND_CODE
          return AFUND_CODE;
        case 3: // BFUND_CODE
          return BFUND_CODE;
        case 4: // CONVERT_TYPE
          return CONVERT_TYPE;
        case 5: // ACONVERT_RATE
          return ACONVERT_RATE;
        case 6: // BCONVERT_RATE
          return BCONVERT_RATE;
        case 7: // AB_RATIO
          return AB_RATIO;
        case 8: // REG_DATE
          return REG_DATE;
        case 9: // CONVERT_DATE
          return CONVERT_DATE;
        case 10: // STATUS
          return STATUS;
        case 11: // IMPORT_TIME
          return IMPORT_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __CONVERTTYPE_ISSET_ID = 1;
  private static final int __ACONVERTRATE_ISSET_ID = 2;
  private static final int __BCONVERTRATE_ISSET_ID = 3;
  private static final int __ABRATIO_ISSET_ID = 4;
  private static final int __STATUS_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AFUND_CODE, new org.apache.thrift.meta_data.FieldMetaData("afundCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BFUND_CODE, new org.apache.thrift.meta_data.FieldMetaData("bfundCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONVERT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("convertType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACONVERT_RATE, new org.apache.thrift.meta_data.FieldMetaData("aconvertRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BCONVERT_RATE, new org.apache.thrift.meta_data.FieldMetaData("bconvertRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.AB_RATIO, new org.apache.thrift.meta_data.FieldMetaData("abRatio", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REG_DATE, new org.apache.thrift.meta_data.FieldMetaData("regDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONVERT_DATE, new org.apache.thrift.meta_data.FieldMetaData("convertDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IMPORT_TIME, new org.apache.thrift.meta_data.FieldMetaData("importTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FundConvertThrift.class, metaDataMap);
  }

  public FundConvertThrift() {
  }

  public FundConvertThrift(
    int id,
    String afundCode,
    String bfundCode,
    int convertType,
    double aconvertRate,
    double bconvertRate,
    double abRatio,
    String regDate,
    String convertDate,
    int status,
    String importTime)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.afundCode = afundCode;
    this.bfundCode = bfundCode;
    this.convertType = convertType;
    setConvertTypeIsSet(true);
    this.aconvertRate = aconvertRate;
    setAconvertRateIsSet(true);
    this.bconvertRate = bconvertRate;
    setBconvertRateIsSet(true);
    this.abRatio = abRatio;
    setAbRatioIsSet(true);
    this.regDate = regDate;
    this.convertDate = convertDate;
    this.status = status;
    setStatusIsSet(true);
    this.importTime = importTime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FundConvertThrift(FundConvertThrift other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetAfundCode()) {
      this.afundCode = other.afundCode;
    }
    if (other.isSetBfundCode()) {
      this.bfundCode = other.bfundCode;
    }
    this.convertType = other.convertType;
    this.aconvertRate = other.aconvertRate;
    this.bconvertRate = other.bconvertRate;
    this.abRatio = other.abRatio;
    if (other.isSetRegDate()) {
      this.regDate = other.regDate;
    }
    if (other.isSetConvertDate()) {
      this.convertDate = other.convertDate;
    }
    this.status = other.status;
    if (other.isSetImportTime()) {
      this.importTime = other.importTime;
    }
  }

  public FundConvertThrift deepCopy() {
    return new FundConvertThrift(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.afundCode = null;
    this.bfundCode = null;
    setConvertTypeIsSet(false);
    this.convertType = 0;
    setAconvertRateIsSet(false);
    this.aconvertRate = 0.0;
    setBconvertRateIsSet(false);
    this.bconvertRate = 0.0;
    setAbRatioIsSet(false);
    this.abRatio = 0.0;
    this.regDate = null;
    this.convertDate = null;
    setStatusIsSet(false);
    this.status = 0;
    this.importTime = null;
  }

  public int getId() {
    return this.id;
  }

  public FundConvertThrift setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getAfundCode() {
    return this.afundCode;
  }

  public FundConvertThrift setAfundCode(String afundCode) {
    this.afundCode = afundCode;
    return this;
  }

  public void unsetAfundCode() {
    this.afundCode = null;
  }

  /** Returns true if field afundCode is set (has been assigned a value) and false otherwise */
  public boolean isSetAfundCode() {
    return this.afundCode != null;
  }

  public void setAfundCodeIsSet(boolean value) {
    if (!value) {
      this.afundCode = null;
    }
  }

  public String getBfundCode() {
    return this.bfundCode;
  }

  public FundConvertThrift setBfundCode(String bfundCode) {
    this.bfundCode = bfundCode;
    return this;
  }

  public void unsetBfundCode() {
    this.bfundCode = null;
  }

  /** Returns true if field bfundCode is set (has been assigned a value) and false otherwise */
  public boolean isSetBfundCode() {
    return this.bfundCode != null;
  }

  public void setBfundCodeIsSet(boolean value) {
    if (!value) {
      this.bfundCode = null;
    }
  }

  public int getConvertType() {
    return this.convertType;
  }

  public FundConvertThrift setConvertType(int convertType) {
    this.convertType = convertType;
    setConvertTypeIsSet(true);
    return this;
  }

  public void unsetConvertType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONVERTTYPE_ISSET_ID);
  }

  /** Returns true if field convertType is set (has been assigned a value) and false otherwise */
  public boolean isSetConvertType() {
    return EncodingUtils.testBit(__isset_bitfield, __CONVERTTYPE_ISSET_ID);
  }

  public void setConvertTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONVERTTYPE_ISSET_ID, value);
  }

  public double getAconvertRate() {
    return this.aconvertRate;
  }

  public FundConvertThrift setAconvertRate(double aconvertRate) {
    this.aconvertRate = aconvertRate;
    setAconvertRateIsSet(true);
    return this;
  }

  public void unsetAconvertRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACONVERTRATE_ISSET_ID);
  }

  /** Returns true if field aconvertRate is set (has been assigned a value) and false otherwise */
  public boolean isSetAconvertRate() {
    return EncodingUtils.testBit(__isset_bitfield, __ACONVERTRATE_ISSET_ID);
  }

  public void setAconvertRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACONVERTRATE_ISSET_ID, value);
  }

  public double getBconvertRate() {
    return this.bconvertRate;
  }

  public FundConvertThrift setBconvertRate(double bconvertRate) {
    this.bconvertRate = bconvertRate;
    setBconvertRateIsSet(true);
    return this;
  }

  public void unsetBconvertRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BCONVERTRATE_ISSET_ID);
  }

  /** Returns true if field bconvertRate is set (has been assigned a value) and false otherwise */
  public boolean isSetBconvertRate() {
    return EncodingUtils.testBit(__isset_bitfield, __BCONVERTRATE_ISSET_ID);
  }

  public void setBconvertRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BCONVERTRATE_ISSET_ID, value);
  }

  public double getAbRatio() {
    return this.abRatio;
  }

  public FundConvertThrift setAbRatio(double abRatio) {
    this.abRatio = abRatio;
    setAbRatioIsSet(true);
    return this;
  }

  public void unsetAbRatio() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ABRATIO_ISSET_ID);
  }

  /** Returns true if field abRatio is set (has been assigned a value) and false otherwise */
  public boolean isSetAbRatio() {
    return EncodingUtils.testBit(__isset_bitfield, __ABRATIO_ISSET_ID);
  }

  public void setAbRatioIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ABRATIO_ISSET_ID, value);
  }

  public String getRegDate() {
    return this.regDate;
  }

  public FundConvertThrift setRegDate(String regDate) {
    this.regDate = regDate;
    return this;
  }

  public void unsetRegDate() {
    this.regDate = null;
  }

  /** Returns true if field regDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRegDate() {
    return this.regDate != null;
  }

  public void setRegDateIsSet(boolean value) {
    if (!value) {
      this.regDate = null;
    }
  }

  public String getConvertDate() {
    return this.convertDate;
  }

  public FundConvertThrift setConvertDate(String convertDate) {
    this.convertDate = convertDate;
    return this;
  }

  public void unsetConvertDate() {
    this.convertDate = null;
  }

  /** Returns true if field convertDate is set (has been assigned a value) and false otherwise */
  public boolean isSetConvertDate() {
    return this.convertDate != null;
  }

  public void setConvertDateIsSet(boolean value) {
    if (!value) {
      this.convertDate = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public FundConvertThrift setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getImportTime() {
    return this.importTime;
  }

  public FundConvertThrift setImportTime(String importTime) {
    this.importTime = importTime;
    return this;
  }

  public void unsetImportTime() {
    this.importTime = null;
  }

  /** Returns true if field importTime is set (has been assigned a value) and false otherwise */
  public boolean isSetImportTime() {
    return this.importTime != null;
  }

  public void setImportTimeIsSet(boolean value) {
    if (!value) {
      this.importTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case AFUND_CODE:
      if (value == null) {
        unsetAfundCode();
      } else {
        setAfundCode((String)value);
      }
      break;

    case BFUND_CODE:
      if (value == null) {
        unsetBfundCode();
      } else {
        setBfundCode((String)value);
      }
      break;

    case CONVERT_TYPE:
      if (value == null) {
        unsetConvertType();
      } else {
        setConvertType((Integer)value);
      }
      break;

    case ACONVERT_RATE:
      if (value == null) {
        unsetAconvertRate();
      } else {
        setAconvertRate((Double)value);
      }
      break;

    case BCONVERT_RATE:
      if (value == null) {
        unsetBconvertRate();
      } else {
        setBconvertRate((Double)value);
      }
      break;

    case AB_RATIO:
      if (value == null) {
        unsetAbRatio();
      } else {
        setAbRatio((Double)value);
      }
      break;

    case REG_DATE:
      if (value == null) {
        unsetRegDate();
      } else {
        setRegDate((String)value);
      }
      break;

    case CONVERT_DATE:
      if (value == null) {
        unsetConvertDate();
      } else {
        setConvertDate((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case IMPORT_TIME:
      if (value == null) {
        unsetImportTime();
      } else {
        setImportTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case AFUND_CODE:
      return getAfundCode();

    case BFUND_CODE:
      return getBfundCode();

    case CONVERT_TYPE:
      return Integer.valueOf(getConvertType());

    case ACONVERT_RATE:
      return Double.valueOf(getAconvertRate());

    case BCONVERT_RATE:
      return Double.valueOf(getBconvertRate());

    case AB_RATIO:
      return Double.valueOf(getAbRatio());

    case REG_DATE:
      return getRegDate();

    case CONVERT_DATE:
      return getConvertDate();

    case STATUS:
      return Integer.valueOf(getStatus());

    case IMPORT_TIME:
      return getImportTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case AFUND_CODE:
      return isSetAfundCode();
    case BFUND_CODE:
      return isSetBfundCode();
    case CONVERT_TYPE:
      return isSetConvertType();
    case ACONVERT_RATE:
      return isSetAconvertRate();
    case BCONVERT_RATE:
      return isSetBconvertRate();
    case AB_RATIO:
      return isSetAbRatio();
    case REG_DATE:
      return isSetRegDate();
    case CONVERT_DATE:
      return isSetConvertDate();
    case STATUS:
      return isSetStatus();
    case IMPORT_TIME:
      return isSetImportTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FundConvertThrift)
      return this.equals((FundConvertThrift)that);
    return false;
  }

  public boolean equals(FundConvertThrift that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_afundCode = true && this.isSetAfundCode();
    boolean that_present_afundCode = true && that.isSetAfundCode();
    if (this_present_afundCode || that_present_afundCode) {
      if (!(this_present_afundCode && that_present_afundCode))
        return false;
      if (!this.afundCode.equals(that.afundCode))
        return false;
    }

    boolean this_present_bfundCode = true && this.isSetBfundCode();
    boolean that_present_bfundCode = true && that.isSetBfundCode();
    if (this_present_bfundCode || that_present_bfundCode) {
      if (!(this_present_bfundCode && that_present_bfundCode))
        return false;
      if (!this.bfundCode.equals(that.bfundCode))
        return false;
    }

    boolean this_present_convertType = true;
    boolean that_present_convertType = true;
    if (this_present_convertType || that_present_convertType) {
      if (!(this_present_convertType && that_present_convertType))
        return false;
      if (this.convertType != that.convertType)
        return false;
    }

    boolean this_present_aconvertRate = true;
    boolean that_present_aconvertRate = true;
    if (this_present_aconvertRate || that_present_aconvertRate) {
      if (!(this_present_aconvertRate && that_present_aconvertRate))
        return false;
      if (this.aconvertRate != that.aconvertRate)
        return false;
    }

    boolean this_present_bconvertRate = true;
    boolean that_present_bconvertRate = true;
    if (this_present_bconvertRate || that_present_bconvertRate) {
      if (!(this_present_bconvertRate && that_present_bconvertRate))
        return false;
      if (this.bconvertRate != that.bconvertRate)
        return false;
    }

    boolean this_present_abRatio = true;
    boolean that_present_abRatio = true;
    if (this_present_abRatio || that_present_abRatio) {
      if (!(this_present_abRatio && that_present_abRatio))
        return false;
      if (this.abRatio != that.abRatio)
        return false;
    }

    boolean this_present_regDate = true && this.isSetRegDate();
    boolean that_present_regDate = true && that.isSetRegDate();
    if (this_present_regDate || that_present_regDate) {
      if (!(this_present_regDate && that_present_regDate))
        return false;
      if (!this.regDate.equals(that.regDate))
        return false;
    }

    boolean this_present_convertDate = true && this.isSetConvertDate();
    boolean that_present_convertDate = true && that.isSetConvertDate();
    if (this_present_convertDate || that_present_convertDate) {
      if (!(this_present_convertDate && that_present_convertDate))
        return false;
      if (!this.convertDate.equals(that.convertDate))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_importTime = true && this.isSetImportTime();
    boolean that_present_importTime = true && that.isSetImportTime();
    if (this_present_importTime || that_present_importTime) {
      if (!(this_present_importTime && that_present_importTime))
        return false;
      if (!this.importTime.equals(that.importTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(FundConvertThrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAfundCode()).compareTo(other.isSetAfundCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAfundCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.afundCode, other.afundCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBfundCode()).compareTo(other.isSetBfundCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBfundCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bfundCode, other.bfundCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConvertType()).compareTo(other.isSetConvertType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConvertType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.convertType, other.convertType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAconvertRate()).compareTo(other.isSetAconvertRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAconvertRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aconvertRate, other.aconvertRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBconvertRate()).compareTo(other.isSetBconvertRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBconvertRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bconvertRate, other.bconvertRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAbRatio()).compareTo(other.isSetAbRatio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAbRatio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.abRatio, other.abRatio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegDate()).compareTo(other.isSetRegDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regDate, other.regDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConvertDate()).compareTo(other.isSetConvertDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConvertDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.convertDate, other.convertDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImportTime()).compareTo(other.isSetImportTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImportTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.importTime, other.importTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FundConvertThrift(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("afundCode:");
    if (this.afundCode == null) {
      sb.append("null");
    } else {
      sb.append(this.afundCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bfundCode:");
    if (this.bfundCode == null) {
      sb.append("null");
    } else {
      sb.append(this.bfundCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("convertType:");
    sb.append(this.convertType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("aconvertRate:");
    sb.append(this.aconvertRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bconvertRate:");
    sb.append(this.bconvertRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("abRatio:");
    sb.append(this.abRatio);
    first = false;
    if (!first) sb.append(", ");
    sb.append("regDate:");
    if (this.regDate == null) {
      sb.append("null");
    } else {
      sb.append(this.regDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("convertDate:");
    if (this.convertDate == null) {
      sb.append("null");
    } else {
      sb.append(this.convertDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("importTime:");
    if (this.importTime == null) {
      sb.append("null");
    } else {
      sb.append(this.importTime);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FundConvertThriftStandardSchemeFactory implements SchemeFactory {
    public FundConvertThriftStandardScheme getScheme() {
      return new FundConvertThriftStandardScheme();
    }
  }

  private static class FundConvertThriftStandardScheme extends StandardScheme<FundConvertThrift> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FundConvertThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AFUND_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.afundCode = iprot.readString();
              struct.setAfundCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BFUND_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bfundCode = iprot.readString();
              struct.setBfundCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONVERT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.convertType = iprot.readI32();
              struct.setConvertTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ACONVERT_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.aconvertRate = iprot.readDouble();
              struct.setAconvertRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BCONVERT_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.bconvertRate = iprot.readDouble();
              struct.setBconvertRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // AB_RATIO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.abRatio = iprot.readDouble();
              struct.setAbRatioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REG_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.regDate = iprot.readString();
              struct.setRegDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CONVERT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.convertDate = iprot.readString();
              struct.setConvertDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // IMPORT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.importTime = iprot.readString();
              struct.setImportTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FundConvertThrift struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.afundCode != null) {
        oprot.writeFieldBegin(AFUND_CODE_FIELD_DESC);
        oprot.writeString(struct.afundCode);
        oprot.writeFieldEnd();
      }
      if (struct.bfundCode != null) {
        oprot.writeFieldBegin(BFUND_CODE_FIELD_DESC);
        oprot.writeString(struct.bfundCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CONVERT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.convertType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACONVERT_RATE_FIELD_DESC);
      oprot.writeDouble(struct.aconvertRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BCONVERT_RATE_FIELD_DESC);
      oprot.writeDouble(struct.bconvertRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AB_RATIO_FIELD_DESC);
      oprot.writeDouble(struct.abRatio);
      oprot.writeFieldEnd();
      if (struct.regDate != null) {
        oprot.writeFieldBegin(REG_DATE_FIELD_DESC);
        oprot.writeString(struct.regDate);
        oprot.writeFieldEnd();
      }
      if (struct.convertDate != null) {
        oprot.writeFieldBegin(CONVERT_DATE_FIELD_DESC);
        oprot.writeString(struct.convertDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.importTime != null) {
        oprot.writeFieldBegin(IMPORT_TIME_FIELD_DESC);
        oprot.writeString(struct.importTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FundConvertThriftTupleSchemeFactory implements SchemeFactory {
    public FundConvertThriftTupleScheme getScheme() {
      return new FundConvertThriftTupleScheme();
    }
  }

  private static class FundConvertThriftTupleScheme extends TupleScheme<FundConvertThrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FundConvertThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetAfundCode()) {
        optionals.set(1);
      }
      if (struct.isSetBfundCode()) {
        optionals.set(2);
      }
      if (struct.isSetConvertType()) {
        optionals.set(3);
      }
      if (struct.isSetAconvertRate()) {
        optionals.set(4);
      }
      if (struct.isSetBconvertRate()) {
        optionals.set(5);
      }
      if (struct.isSetAbRatio()) {
        optionals.set(6);
      }
      if (struct.isSetRegDate()) {
        optionals.set(7);
      }
      if (struct.isSetConvertDate()) {
        optionals.set(8);
      }
      if (struct.isSetStatus()) {
        optionals.set(9);
      }
      if (struct.isSetImportTime()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetAfundCode()) {
        oprot.writeString(struct.afundCode);
      }
      if (struct.isSetBfundCode()) {
        oprot.writeString(struct.bfundCode);
      }
      if (struct.isSetConvertType()) {
        oprot.writeI32(struct.convertType);
      }
      if (struct.isSetAconvertRate()) {
        oprot.writeDouble(struct.aconvertRate);
      }
      if (struct.isSetBconvertRate()) {
        oprot.writeDouble(struct.bconvertRate);
      }
      if (struct.isSetAbRatio()) {
        oprot.writeDouble(struct.abRatio);
      }
      if (struct.isSetRegDate()) {
        oprot.writeString(struct.regDate);
      }
      if (struct.isSetConvertDate()) {
        oprot.writeString(struct.convertDate);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetImportTime()) {
        oprot.writeString(struct.importTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FundConvertThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.afundCode = iprot.readString();
        struct.setAfundCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.bfundCode = iprot.readString();
        struct.setBfundCodeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.convertType = iprot.readI32();
        struct.setConvertTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.aconvertRate = iprot.readDouble();
        struct.setAconvertRateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.bconvertRate = iprot.readDouble();
        struct.setBconvertRateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.abRatio = iprot.readDouble();
        struct.setAbRatioIsSet(true);
      }
      if (incoming.get(7)) {
        struct.regDate = iprot.readString();
        struct.setRegDateIsSet(true);
      }
      if (incoming.get(8)) {
        struct.convertDate = iprot.readString();
        struct.setConvertDateIsSet(true);
      }
      if (incoming.get(9)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(10)) {
        struct.importTime = iprot.readString();
        struct.setImportTimeIsSet(true);
      }
    }
  }

}

