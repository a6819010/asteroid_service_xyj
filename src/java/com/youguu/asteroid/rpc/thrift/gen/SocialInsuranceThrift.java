/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.youguu.asteroid.rpc.thrift.gen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 社保及公积金缴存比例
 */
public class SocialInsuranceThrift implements org.apache.thrift.TBase<SocialInsuranceThrift, SocialInsuranceThrift._Fields>, java.io.Serializable, Cloneable, Comparable<SocialInsuranceThrift> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SocialInsuranceThrift");

  private static final org.apache.thrift.protocol.TField HOUSE_BASE_FIELD_DESC = new org.apache.thrift.protocol.TField("houseBase", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField HOUSE_DOWN_FIELD_DESC = new org.apache.thrift.protocol.TField("houseDown", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField HOUSE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("houseRate", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField HOUSE_UP_FIELD_DESC = new org.apache.thrift.protocol.TField("houseUp", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField MEDICAL_DOWN_FIELD_DESC = new org.apache.thrift.protocol.TField("medicalDown", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField MEDICAL_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("medicalRate", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField MEDICAL_EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("medicalExt", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField MEDICAL_UP_FIELD_DESC = new org.apache.thrift.protocol.TField("medicalUp", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField SOCIAL_BASE_FIELD_DESC = new org.apache.thrift.protocol.TField("socialBase", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField CITY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("cityCode", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CITY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cityName", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField OLD_DOWN_FIELD_DESC = new org.apache.thrift.protocol.TField("oldDown", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField OLD_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("oldRate", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField BIRTH_DOWN_FIELD_DESC = new org.apache.thrift.protocol.TField("birthDown", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField BIRTH_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("birthRate", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField WORK_UP_FIELD_DESC = new org.apache.thrift.protocol.TField("workUp", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField INJURY_DOWN_FIELD_DESC = new org.apache.thrift.protocol.TField("injuryDown", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField INJURY_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("injuryRate", org.apache.thrift.protocol.TType.DOUBLE, (short)18);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.I64, (short)19);
  private static final org.apache.thrift.protocol.TField BIRTH_UP_FIELD_DESC = new org.apache.thrift.protocol.TField("birthUp", org.apache.thrift.protocol.TType.DOUBLE, (short)20);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField WORK_DOWN_FIELD_DESC = new org.apache.thrift.protocol.TField("workDown", org.apache.thrift.protocol.TType.DOUBLE, (short)22);
  private static final org.apache.thrift.protocol.TField WORK_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("workRate", org.apache.thrift.protocol.TType.DOUBLE, (short)23);
  private static final org.apache.thrift.protocol.TField OLD_UP_FIELD_DESC = new org.apache.thrift.protocol.TField("oldUp", org.apache.thrift.protocol.TType.DOUBLE, (short)24);
  private static final org.apache.thrift.protocol.TField INJURY_UP_FIELD_DESC = new org.apache.thrift.protocol.TField("injuryUp", org.apache.thrift.protocol.TType.DOUBLE, (short)25);
  private static final org.apache.thrift.protocol.TField SOCIAL_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("socialMax", org.apache.thrift.protocol.TType.I32, (short)26);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SocialInsuranceThriftStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SocialInsuranceThriftTupleSchemeFactory());
  }

  public int houseBase; // required
  public double houseDown; // required
  public double houseRate; // required
  public double houseUp; // required
  public double medicalDown; // required
  public double medicalRate; // required
  public double medicalExt; // required
  public double medicalUp; // required
  public int socialBase; // required
  public String cityCode; // required
  public String cityName; // required
  public double oldDown; // required
  public double oldRate; // required
  public double birthDown; // required
  public double birthRate; // required
  public double workUp; // required
  public double injuryDown; // required
  public double injuryRate; // required
  public long updateTime; // required
  public double birthUp; // required
  public int id; // required
  public double workDown; // required
  public double workRate; // required
  public double oldUp; // required
  public double injuryUp; // required
  public int socialMax; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HOUSE_BASE((short)1, "houseBase"),
    HOUSE_DOWN((short)2, "houseDown"),
    HOUSE_RATE((short)3, "houseRate"),
    HOUSE_UP((short)4, "houseUp"),
    MEDICAL_DOWN((short)5, "medicalDown"),
    MEDICAL_RATE((short)6, "medicalRate"),
    MEDICAL_EXT((short)7, "medicalExt"),
    MEDICAL_UP((short)8, "medicalUp"),
    SOCIAL_BASE((short)9, "socialBase"),
    CITY_CODE((short)10, "cityCode"),
    CITY_NAME((short)11, "cityName"),
    OLD_DOWN((short)12, "oldDown"),
    OLD_RATE((short)13, "oldRate"),
    BIRTH_DOWN((short)14, "birthDown"),
    BIRTH_RATE((short)15, "birthRate"),
    WORK_UP((short)16, "workUp"),
    INJURY_DOWN((short)17, "injuryDown"),
    INJURY_RATE((short)18, "injuryRate"),
    UPDATE_TIME((short)19, "updateTime"),
    BIRTH_UP((short)20, "birthUp"),
    ID((short)21, "id"),
    WORK_DOWN((short)22, "workDown"),
    WORK_RATE((short)23, "workRate"),
    OLD_UP((short)24, "oldUp"),
    INJURY_UP((short)25, "injuryUp"),
    SOCIAL_MAX((short)26, "socialMax");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HOUSE_BASE
          return HOUSE_BASE;
        case 2: // HOUSE_DOWN
          return HOUSE_DOWN;
        case 3: // HOUSE_RATE
          return HOUSE_RATE;
        case 4: // HOUSE_UP
          return HOUSE_UP;
        case 5: // MEDICAL_DOWN
          return MEDICAL_DOWN;
        case 6: // MEDICAL_RATE
          return MEDICAL_RATE;
        case 7: // MEDICAL_EXT
          return MEDICAL_EXT;
        case 8: // MEDICAL_UP
          return MEDICAL_UP;
        case 9: // SOCIAL_BASE
          return SOCIAL_BASE;
        case 10: // CITY_CODE
          return CITY_CODE;
        case 11: // CITY_NAME
          return CITY_NAME;
        case 12: // OLD_DOWN
          return OLD_DOWN;
        case 13: // OLD_RATE
          return OLD_RATE;
        case 14: // BIRTH_DOWN
          return BIRTH_DOWN;
        case 15: // BIRTH_RATE
          return BIRTH_RATE;
        case 16: // WORK_UP
          return WORK_UP;
        case 17: // INJURY_DOWN
          return INJURY_DOWN;
        case 18: // INJURY_RATE
          return INJURY_RATE;
        case 19: // UPDATE_TIME
          return UPDATE_TIME;
        case 20: // BIRTH_UP
          return BIRTH_UP;
        case 21: // ID
          return ID;
        case 22: // WORK_DOWN
          return WORK_DOWN;
        case 23: // WORK_RATE
          return WORK_RATE;
        case 24: // OLD_UP
          return OLD_UP;
        case 25: // INJURY_UP
          return INJURY_UP;
        case 26: // SOCIAL_MAX
          return SOCIAL_MAX;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __HOUSEBASE_ISSET_ID = 0;
  private static final int __HOUSEDOWN_ISSET_ID = 1;
  private static final int __HOUSERATE_ISSET_ID = 2;
  private static final int __HOUSEUP_ISSET_ID = 3;
  private static final int __MEDICALDOWN_ISSET_ID = 4;
  private static final int __MEDICALRATE_ISSET_ID = 5;
  private static final int __MEDICALEXT_ISSET_ID = 6;
  private static final int __MEDICALUP_ISSET_ID = 7;
  private static final int __SOCIALBASE_ISSET_ID = 8;
  private static final int __OLDDOWN_ISSET_ID = 9;
  private static final int __OLDRATE_ISSET_ID = 10;
  private static final int __BIRTHDOWN_ISSET_ID = 11;
  private static final int __BIRTHRATE_ISSET_ID = 12;
  private static final int __WORKUP_ISSET_ID = 13;
  private static final int __INJURYDOWN_ISSET_ID = 14;
  private static final int __INJURYRATE_ISSET_ID = 15;
  private static final int __UPDATETIME_ISSET_ID = 16;
  private static final int __BIRTHUP_ISSET_ID = 17;
  private static final int __ID_ISSET_ID = 18;
  private static final int __WORKDOWN_ISSET_ID = 19;
  private static final int __WORKRATE_ISSET_ID = 20;
  private static final int __OLDUP_ISSET_ID = 21;
  private static final int __INJURYUP_ISSET_ID = 22;
  private static final int __SOCIALMAX_ISSET_ID = 23;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HOUSE_BASE, new org.apache.thrift.meta_data.FieldMetaData("houseBase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HOUSE_DOWN, new org.apache.thrift.meta_data.FieldMetaData("houseDown", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HOUSE_RATE, new org.apache.thrift.meta_data.FieldMetaData("houseRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HOUSE_UP, new org.apache.thrift.meta_data.FieldMetaData("houseUp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MEDICAL_DOWN, new org.apache.thrift.meta_data.FieldMetaData("medicalDown", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MEDICAL_RATE, new org.apache.thrift.meta_data.FieldMetaData("medicalRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MEDICAL_EXT, new org.apache.thrift.meta_data.FieldMetaData("medicalExt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MEDICAL_UP, new org.apache.thrift.meta_data.FieldMetaData("medicalUp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SOCIAL_BASE, new org.apache.thrift.meta_data.FieldMetaData("socialBase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CITY_CODE, new org.apache.thrift.meta_data.FieldMetaData("cityCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITY_NAME, new org.apache.thrift.meta_data.FieldMetaData("cityName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OLD_DOWN, new org.apache.thrift.meta_data.FieldMetaData("oldDown", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OLD_RATE, new org.apache.thrift.meta_data.FieldMetaData("oldRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BIRTH_DOWN, new org.apache.thrift.meta_data.FieldMetaData("birthDown", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BIRTH_RATE, new org.apache.thrift.meta_data.FieldMetaData("birthRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.WORK_UP, new org.apache.thrift.meta_data.FieldMetaData("workUp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.INJURY_DOWN, new org.apache.thrift.meta_data.FieldMetaData("injuryDown", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.INJURY_RATE, new org.apache.thrift.meta_data.FieldMetaData("injuryRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BIRTH_UP, new org.apache.thrift.meta_data.FieldMetaData("birthUp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WORK_DOWN, new org.apache.thrift.meta_data.FieldMetaData("workDown", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.WORK_RATE, new org.apache.thrift.meta_data.FieldMetaData("workRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OLD_UP, new org.apache.thrift.meta_data.FieldMetaData("oldUp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.INJURY_UP, new org.apache.thrift.meta_data.FieldMetaData("injuryUp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SOCIAL_MAX, new org.apache.thrift.meta_data.FieldMetaData("socialMax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SocialInsuranceThrift.class, metaDataMap);
  }

  public SocialInsuranceThrift() {
  }

  public SocialInsuranceThrift(
    int houseBase,
    double houseDown,
    double houseRate,
    double houseUp,
    double medicalDown,
    double medicalRate,
    double medicalExt,
    double medicalUp,
    int socialBase,
    String cityCode,
    String cityName,
    double oldDown,
    double oldRate,
    double birthDown,
    double birthRate,
    double workUp,
    double injuryDown,
    double injuryRate,
    long updateTime,
    double birthUp,
    int id,
    double workDown,
    double workRate,
    double oldUp,
    double injuryUp,
    int socialMax)
  {
    this();
    this.houseBase = houseBase;
    setHouseBaseIsSet(true);
    this.houseDown = houseDown;
    setHouseDownIsSet(true);
    this.houseRate = houseRate;
    setHouseRateIsSet(true);
    this.houseUp = houseUp;
    setHouseUpIsSet(true);
    this.medicalDown = medicalDown;
    setMedicalDownIsSet(true);
    this.medicalRate = medicalRate;
    setMedicalRateIsSet(true);
    this.medicalExt = medicalExt;
    setMedicalExtIsSet(true);
    this.medicalUp = medicalUp;
    setMedicalUpIsSet(true);
    this.socialBase = socialBase;
    setSocialBaseIsSet(true);
    this.cityCode = cityCode;
    this.cityName = cityName;
    this.oldDown = oldDown;
    setOldDownIsSet(true);
    this.oldRate = oldRate;
    setOldRateIsSet(true);
    this.birthDown = birthDown;
    setBirthDownIsSet(true);
    this.birthRate = birthRate;
    setBirthRateIsSet(true);
    this.workUp = workUp;
    setWorkUpIsSet(true);
    this.injuryDown = injuryDown;
    setInjuryDownIsSet(true);
    this.injuryRate = injuryRate;
    setInjuryRateIsSet(true);
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    this.birthUp = birthUp;
    setBirthUpIsSet(true);
    this.id = id;
    setIdIsSet(true);
    this.workDown = workDown;
    setWorkDownIsSet(true);
    this.workRate = workRate;
    setWorkRateIsSet(true);
    this.oldUp = oldUp;
    setOldUpIsSet(true);
    this.injuryUp = injuryUp;
    setInjuryUpIsSet(true);
    this.socialMax = socialMax;
    setSocialMaxIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SocialInsuranceThrift(SocialInsuranceThrift other) {
    __isset_bitfield = other.__isset_bitfield;
    this.houseBase = other.houseBase;
    this.houseDown = other.houseDown;
    this.houseRate = other.houseRate;
    this.houseUp = other.houseUp;
    this.medicalDown = other.medicalDown;
    this.medicalRate = other.medicalRate;
    this.medicalExt = other.medicalExt;
    this.medicalUp = other.medicalUp;
    this.socialBase = other.socialBase;
    if (other.isSetCityCode()) {
      this.cityCode = other.cityCode;
    }
    if (other.isSetCityName()) {
      this.cityName = other.cityName;
    }
    this.oldDown = other.oldDown;
    this.oldRate = other.oldRate;
    this.birthDown = other.birthDown;
    this.birthRate = other.birthRate;
    this.workUp = other.workUp;
    this.injuryDown = other.injuryDown;
    this.injuryRate = other.injuryRate;
    this.updateTime = other.updateTime;
    this.birthUp = other.birthUp;
    this.id = other.id;
    this.workDown = other.workDown;
    this.workRate = other.workRate;
    this.oldUp = other.oldUp;
    this.injuryUp = other.injuryUp;
    this.socialMax = other.socialMax;
  }

  public SocialInsuranceThrift deepCopy() {
    return new SocialInsuranceThrift(this);
  }

  @Override
  public void clear() {
    setHouseBaseIsSet(false);
    this.houseBase = 0;
    setHouseDownIsSet(false);
    this.houseDown = 0.0;
    setHouseRateIsSet(false);
    this.houseRate = 0.0;
    setHouseUpIsSet(false);
    this.houseUp = 0.0;
    setMedicalDownIsSet(false);
    this.medicalDown = 0.0;
    setMedicalRateIsSet(false);
    this.medicalRate = 0.0;
    setMedicalExtIsSet(false);
    this.medicalExt = 0.0;
    setMedicalUpIsSet(false);
    this.medicalUp = 0.0;
    setSocialBaseIsSet(false);
    this.socialBase = 0;
    this.cityCode = null;
    this.cityName = null;
    setOldDownIsSet(false);
    this.oldDown = 0.0;
    setOldRateIsSet(false);
    this.oldRate = 0.0;
    setBirthDownIsSet(false);
    this.birthDown = 0.0;
    setBirthRateIsSet(false);
    this.birthRate = 0.0;
    setWorkUpIsSet(false);
    this.workUp = 0.0;
    setInjuryDownIsSet(false);
    this.injuryDown = 0.0;
    setInjuryRateIsSet(false);
    this.injuryRate = 0.0;
    setUpdateTimeIsSet(false);
    this.updateTime = 0;
    setBirthUpIsSet(false);
    this.birthUp = 0.0;
    setIdIsSet(false);
    this.id = 0;
    setWorkDownIsSet(false);
    this.workDown = 0.0;
    setWorkRateIsSet(false);
    this.workRate = 0.0;
    setOldUpIsSet(false);
    this.oldUp = 0.0;
    setInjuryUpIsSet(false);
    this.injuryUp = 0.0;
    setSocialMaxIsSet(false);
    this.socialMax = 0;
  }

  public int getHouseBase() {
    return this.houseBase;
  }

  public SocialInsuranceThrift setHouseBase(int houseBase) {
    this.houseBase = houseBase;
    setHouseBaseIsSet(true);
    return this;
  }

  public void unsetHouseBase() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HOUSEBASE_ISSET_ID);
  }

  /** Returns true if field houseBase is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseBase() {
    return EncodingUtils.testBit(__isset_bitfield, __HOUSEBASE_ISSET_ID);
  }

  public void setHouseBaseIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HOUSEBASE_ISSET_ID, value);
  }

  public double getHouseDown() {
    return this.houseDown;
  }

  public SocialInsuranceThrift setHouseDown(double houseDown) {
    this.houseDown = houseDown;
    setHouseDownIsSet(true);
    return this;
  }

  public void unsetHouseDown() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HOUSEDOWN_ISSET_ID);
  }

  /** Returns true if field houseDown is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseDown() {
    return EncodingUtils.testBit(__isset_bitfield, __HOUSEDOWN_ISSET_ID);
  }

  public void setHouseDownIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HOUSEDOWN_ISSET_ID, value);
  }

  public double getHouseRate() {
    return this.houseRate;
  }

  public SocialInsuranceThrift setHouseRate(double houseRate) {
    this.houseRate = houseRate;
    setHouseRateIsSet(true);
    return this;
  }

  public void unsetHouseRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HOUSERATE_ISSET_ID);
  }

  /** Returns true if field houseRate is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseRate() {
    return EncodingUtils.testBit(__isset_bitfield, __HOUSERATE_ISSET_ID);
  }

  public void setHouseRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HOUSERATE_ISSET_ID, value);
  }

  public double getHouseUp() {
    return this.houseUp;
  }

  public SocialInsuranceThrift setHouseUp(double houseUp) {
    this.houseUp = houseUp;
    setHouseUpIsSet(true);
    return this;
  }

  public void unsetHouseUp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HOUSEUP_ISSET_ID);
  }

  /** Returns true if field houseUp is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseUp() {
    return EncodingUtils.testBit(__isset_bitfield, __HOUSEUP_ISSET_ID);
  }

  public void setHouseUpIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HOUSEUP_ISSET_ID, value);
  }

  public double getMedicalDown() {
    return this.medicalDown;
  }

  public SocialInsuranceThrift setMedicalDown(double medicalDown) {
    this.medicalDown = medicalDown;
    setMedicalDownIsSet(true);
    return this;
  }

  public void unsetMedicalDown() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEDICALDOWN_ISSET_ID);
  }

  /** Returns true if field medicalDown is set (has been assigned a value) and false otherwise */
  public boolean isSetMedicalDown() {
    return EncodingUtils.testBit(__isset_bitfield, __MEDICALDOWN_ISSET_ID);
  }

  public void setMedicalDownIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEDICALDOWN_ISSET_ID, value);
  }

  public double getMedicalRate() {
    return this.medicalRate;
  }

  public SocialInsuranceThrift setMedicalRate(double medicalRate) {
    this.medicalRate = medicalRate;
    setMedicalRateIsSet(true);
    return this;
  }

  public void unsetMedicalRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEDICALRATE_ISSET_ID);
  }

  /** Returns true if field medicalRate is set (has been assigned a value) and false otherwise */
  public boolean isSetMedicalRate() {
    return EncodingUtils.testBit(__isset_bitfield, __MEDICALRATE_ISSET_ID);
  }

  public void setMedicalRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEDICALRATE_ISSET_ID, value);
  }

  public double getMedicalExt() {
    return this.medicalExt;
  }

  public SocialInsuranceThrift setMedicalExt(double medicalExt) {
    this.medicalExt = medicalExt;
    setMedicalExtIsSet(true);
    return this;
  }

  public void unsetMedicalExt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEDICALEXT_ISSET_ID);
  }

  /** Returns true if field medicalExt is set (has been assigned a value) and false otherwise */
  public boolean isSetMedicalExt() {
    return EncodingUtils.testBit(__isset_bitfield, __MEDICALEXT_ISSET_ID);
  }

  public void setMedicalExtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEDICALEXT_ISSET_ID, value);
  }

  public double getMedicalUp() {
    return this.medicalUp;
  }

  public SocialInsuranceThrift setMedicalUp(double medicalUp) {
    this.medicalUp = medicalUp;
    setMedicalUpIsSet(true);
    return this;
  }

  public void unsetMedicalUp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEDICALUP_ISSET_ID);
  }

  /** Returns true if field medicalUp is set (has been assigned a value) and false otherwise */
  public boolean isSetMedicalUp() {
    return EncodingUtils.testBit(__isset_bitfield, __MEDICALUP_ISSET_ID);
  }

  public void setMedicalUpIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEDICALUP_ISSET_ID, value);
  }

  public int getSocialBase() {
    return this.socialBase;
  }

  public SocialInsuranceThrift setSocialBase(int socialBase) {
    this.socialBase = socialBase;
    setSocialBaseIsSet(true);
    return this;
  }

  public void unsetSocialBase() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SOCIALBASE_ISSET_ID);
  }

  /** Returns true if field socialBase is set (has been assigned a value) and false otherwise */
  public boolean isSetSocialBase() {
    return EncodingUtils.testBit(__isset_bitfield, __SOCIALBASE_ISSET_ID);
  }

  public void setSocialBaseIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SOCIALBASE_ISSET_ID, value);
  }

  public String getCityCode() {
    return this.cityCode;
  }

  public SocialInsuranceThrift setCityCode(String cityCode) {
    this.cityCode = cityCode;
    return this;
  }

  public void unsetCityCode() {
    this.cityCode = null;
  }

  /** Returns true if field cityCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCityCode() {
    return this.cityCode != null;
  }

  public void setCityCodeIsSet(boolean value) {
    if (!value) {
      this.cityCode = null;
    }
  }

  public String getCityName() {
    return this.cityName;
  }

  public SocialInsuranceThrift setCityName(String cityName) {
    this.cityName = cityName;
    return this;
  }

  public void unsetCityName() {
    this.cityName = null;
  }

  /** Returns true if field cityName is set (has been assigned a value) and false otherwise */
  public boolean isSetCityName() {
    return this.cityName != null;
  }

  public void setCityNameIsSet(boolean value) {
    if (!value) {
      this.cityName = null;
    }
  }

  public double getOldDown() {
    return this.oldDown;
  }

  public SocialInsuranceThrift setOldDown(double oldDown) {
    this.oldDown = oldDown;
    setOldDownIsSet(true);
    return this;
  }

  public void unsetOldDown() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OLDDOWN_ISSET_ID);
  }

  /** Returns true if field oldDown is set (has been assigned a value) and false otherwise */
  public boolean isSetOldDown() {
    return EncodingUtils.testBit(__isset_bitfield, __OLDDOWN_ISSET_ID);
  }

  public void setOldDownIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OLDDOWN_ISSET_ID, value);
  }

  public double getOldRate() {
    return this.oldRate;
  }

  public SocialInsuranceThrift setOldRate(double oldRate) {
    this.oldRate = oldRate;
    setOldRateIsSet(true);
    return this;
  }

  public void unsetOldRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OLDRATE_ISSET_ID);
  }

  /** Returns true if field oldRate is set (has been assigned a value) and false otherwise */
  public boolean isSetOldRate() {
    return EncodingUtils.testBit(__isset_bitfield, __OLDRATE_ISSET_ID);
  }

  public void setOldRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OLDRATE_ISSET_ID, value);
  }

  public double getBirthDown() {
    return this.birthDown;
  }

  public SocialInsuranceThrift setBirthDown(double birthDown) {
    this.birthDown = birthDown;
    setBirthDownIsSet(true);
    return this;
  }

  public void unsetBirthDown() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIRTHDOWN_ISSET_ID);
  }

  /** Returns true if field birthDown is set (has been assigned a value) and false otherwise */
  public boolean isSetBirthDown() {
    return EncodingUtils.testBit(__isset_bitfield, __BIRTHDOWN_ISSET_ID);
  }

  public void setBirthDownIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIRTHDOWN_ISSET_ID, value);
  }

  public double getBirthRate() {
    return this.birthRate;
  }

  public SocialInsuranceThrift setBirthRate(double birthRate) {
    this.birthRate = birthRate;
    setBirthRateIsSet(true);
    return this;
  }

  public void unsetBirthRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIRTHRATE_ISSET_ID);
  }

  /** Returns true if field birthRate is set (has been assigned a value) and false otherwise */
  public boolean isSetBirthRate() {
    return EncodingUtils.testBit(__isset_bitfield, __BIRTHRATE_ISSET_ID);
  }

  public void setBirthRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIRTHRATE_ISSET_ID, value);
  }

  public double getWorkUp() {
    return this.workUp;
  }

  public SocialInsuranceThrift setWorkUp(double workUp) {
    this.workUp = workUp;
    setWorkUpIsSet(true);
    return this;
  }

  public void unsetWorkUp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WORKUP_ISSET_ID);
  }

  /** Returns true if field workUp is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkUp() {
    return EncodingUtils.testBit(__isset_bitfield, __WORKUP_ISSET_ID);
  }

  public void setWorkUpIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WORKUP_ISSET_ID, value);
  }

  public double getInjuryDown() {
    return this.injuryDown;
  }

  public SocialInsuranceThrift setInjuryDown(double injuryDown) {
    this.injuryDown = injuryDown;
    setInjuryDownIsSet(true);
    return this;
  }

  public void unsetInjuryDown() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INJURYDOWN_ISSET_ID);
  }

  /** Returns true if field injuryDown is set (has been assigned a value) and false otherwise */
  public boolean isSetInjuryDown() {
    return EncodingUtils.testBit(__isset_bitfield, __INJURYDOWN_ISSET_ID);
  }

  public void setInjuryDownIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INJURYDOWN_ISSET_ID, value);
  }

  public double getInjuryRate() {
    return this.injuryRate;
  }

  public SocialInsuranceThrift setInjuryRate(double injuryRate) {
    this.injuryRate = injuryRate;
    setInjuryRateIsSet(true);
    return this;
  }

  public void unsetInjuryRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INJURYRATE_ISSET_ID);
  }

  /** Returns true if field injuryRate is set (has been assigned a value) and false otherwise */
  public boolean isSetInjuryRate() {
    return EncodingUtils.testBit(__isset_bitfield, __INJURYRATE_ISSET_ID);
  }

  public void setInjuryRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INJURYRATE_ISSET_ID, value);
  }

  public long getUpdateTime() {
    return this.updateTime;
  }

  public SocialInsuranceThrift setUpdateTime(long updateTime) {
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    return this;
  }

  public void unsetUpdateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  public void setUpdateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATETIME_ISSET_ID, value);
  }

  public double getBirthUp() {
    return this.birthUp;
  }

  public SocialInsuranceThrift setBirthUp(double birthUp) {
    this.birthUp = birthUp;
    setBirthUpIsSet(true);
    return this;
  }

  public void unsetBirthUp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIRTHUP_ISSET_ID);
  }

  /** Returns true if field birthUp is set (has been assigned a value) and false otherwise */
  public boolean isSetBirthUp() {
    return EncodingUtils.testBit(__isset_bitfield, __BIRTHUP_ISSET_ID);
  }

  public void setBirthUpIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIRTHUP_ISSET_ID, value);
  }

  public int getId() {
    return this.id;
  }

  public SocialInsuranceThrift setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public double getWorkDown() {
    return this.workDown;
  }

  public SocialInsuranceThrift setWorkDown(double workDown) {
    this.workDown = workDown;
    setWorkDownIsSet(true);
    return this;
  }

  public void unsetWorkDown() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WORKDOWN_ISSET_ID);
  }

  /** Returns true if field workDown is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkDown() {
    return EncodingUtils.testBit(__isset_bitfield, __WORKDOWN_ISSET_ID);
  }

  public void setWorkDownIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WORKDOWN_ISSET_ID, value);
  }

  public double getWorkRate() {
    return this.workRate;
  }

  public SocialInsuranceThrift setWorkRate(double workRate) {
    this.workRate = workRate;
    setWorkRateIsSet(true);
    return this;
  }

  public void unsetWorkRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WORKRATE_ISSET_ID);
  }

  /** Returns true if field workRate is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkRate() {
    return EncodingUtils.testBit(__isset_bitfield, __WORKRATE_ISSET_ID);
  }

  public void setWorkRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WORKRATE_ISSET_ID, value);
  }

  public double getOldUp() {
    return this.oldUp;
  }

  public SocialInsuranceThrift setOldUp(double oldUp) {
    this.oldUp = oldUp;
    setOldUpIsSet(true);
    return this;
  }

  public void unsetOldUp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OLDUP_ISSET_ID);
  }

  /** Returns true if field oldUp is set (has been assigned a value) and false otherwise */
  public boolean isSetOldUp() {
    return EncodingUtils.testBit(__isset_bitfield, __OLDUP_ISSET_ID);
  }

  public void setOldUpIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OLDUP_ISSET_ID, value);
  }

  public double getInjuryUp() {
    return this.injuryUp;
  }

  public SocialInsuranceThrift setInjuryUp(double injuryUp) {
    this.injuryUp = injuryUp;
    setInjuryUpIsSet(true);
    return this;
  }

  public void unsetInjuryUp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INJURYUP_ISSET_ID);
  }

  /** Returns true if field injuryUp is set (has been assigned a value) and false otherwise */
  public boolean isSetInjuryUp() {
    return EncodingUtils.testBit(__isset_bitfield, __INJURYUP_ISSET_ID);
  }

  public void setInjuryUpIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INJURYUP_ISSET_ID, value);
  }

  public int getSocialMax() {
    return this.socialMax;
  }

  public SocialInsuranceThrift setSocialMax(int socialMax) {
    this.socialMax = socialMax;
    setSocialMaxIsSet(true);
    return this;
  }

  public void unsetSocialMax() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SOCIALMAX_ISSET_ID);
  }

  /** Returns true if field socialMax is set (has been assigned a value) and false otherwise */
  public boolean isSetSocialMax() {
    return EncodingUtils.testBit(__isset_bitfield, __SOCIALMAX_ISSET_ID);
  }

  public void setSocialMaxIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SOCIALMAX_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HOUSE_BASE:
      if (value == null) {
        unsetHouseBase();
      } else {
        setHouseBase((Integer)value);
      }
      break;

    case HOUSE_DOWN:
      if (value == null) {
        unsetHouseDown();
      } else {
        setHouseDown((Double)value);
      }
      break;

    case HOUSE_RATE:
      if (value == null) {
        unsetHouseRate();
      } else {
        setHouseRate((Double)value);
      }
      break;

    case HOUSE_UP:
      if (value == null) {
        unsetHouseUp();
      } else {
        setHouseUp((Double)value);
      }
      break;

    case MEDICAL_DOWN:
      if (value == null) {
        unsetMedicalDown();
      } else {
        setMedicalDown((Double)value);
      }
      break;

    case MEDICAL_RATE:
      if (value == null) {
        unsetMedicalRate();
      } else {
        setMedicalRate((Double)value);
      }
      break;

    case MEDICAL_EXT:
      if (value == null) {
        unsetMedicalExt();
      } else {
        setMedicalExt((Double)value);
      }
      break;

    case MEDICAL_UP:
      if (value == null) {
        unsetMedicalUp();
      } else {
        setMedicalUp((Double)value);
      }
      break;

    case SOCIAL_BASE:
      if (value == null) {
        unsetSocialBase();
      } else {
        setSocialBase((Integer)value);
      }
      break;

    case CITY_CODE:
      if (value == null) {
        unsetCityCode();
      } else {
        setCityCode((String)value);
      }
      break;

    case CITY_NAME:
      if (value == null) {
        unsetCityName();
      } else {
        setCityName((String)value);
      }
      break;

    case OLD_DOWN:
      if (value == null) {
        unsetOldDown();
      } else {
        setOldDown((Double)value);
      }
      break;

    case OLD_RATE:
      if (value == null) {
        unsetOldRate();
      } else {
        setOldRate((Double)value);
      }
      break;

    case BIRTH_DOWN:
      if (value == null) {
        unsetBirthDown();
      } else {
        setBirthDown((Double)value);
      }
      break;

    case BIRTH_RATE:
      if (value == null) {
        unsetBirthRate();
      } else {
        setBirthRate((Double)value);
      }
      break;

    case WORK_UP:
      if (value == null) {
        unsetWorkUp();
      } else {
        setWorkUp((Double)value);
      }
      break;

    case INJURY_DOWN:
      if (value == null) {
        unsetInjuryDown();
      } else {
        setInjuryDown((Double)value);
      }
      break;

    case INJURY_RATE:
      if (value == null) {
        unsetInjuryRate();
      } else {
        setInjuryRate((Double)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((Long)value);
      }
      break;

    case BIRTH_UP:
      if (value == null) {
        unsetBirthUp();
      } else {
        setBirthUp((Double)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case WORK_DOWN:
      if (value == null) {
        unsetWorkDown();
      } else {
        setWorkDown((Double)value);
      }
      break;

    case WORK_RATE:
      if (value == null) {
        unsetWorkRate();
      } else {
        setWorkRate((Double)value);
      }
      break;

    case OLD_UP:
      if (value == null) {
        unsetOldUp();
      } else {
        setOldUp((Double)value);
      }
      break;

    case INJURY_UP:
      if (value == null) {
        unsetInjuryUp();
      } else {
        setInjuryUp((Double)value);
      }
      break;

    case SOCIAL_MAX:
      if (value == null) {
        unsetSocialMax();
      } else {
        setSocialMax((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HOUSE_BASE:
      return Integer.valueOf(getHouseBase());

    case HOUSE_DOWN:
      return Double.valueOf(getHouseDown());

    case HOUSE_RATE:
      return Double.valueOf(getHouseRate());

    case HOUSE_UP:
      return Double.valueOf(getHouseUp());

    case MEDICAL_DOWN:
      return Double.valueOf(getMedicalDown());

    case MEDICAL_RATE:
      return Double.valueOf(getMedicalRate());

    case MEDICAL_EXT:
      return Double.valueOf(getMedicalExt());

    case MEDICAL_UP:
      return Double.valueOf(getMedicalUp());

    case SOCIAL_BASE:
      return Integer.valueOf(getSocialBase());

    case CITY_CODE:
      return getCityCode();

    case CITY_NAME:
      return getCityName();

    case OLD_DOWN:
      return Double.valueOf(getOldDown());

    case OLD_RATE:
      return Double.valueOf(getOldRate());

    case BIRTH_DOWN:
      return Double.valueOf(getBirthDown());

    case BIRTH_RATE:
      return Double.valueOf(getBirthRate());

    case WORK_UP:
      return Double.valueOf(getWorkUp());

    case INJURY_DOWN:
      return Double.valueOf(getInjuryDown());

    case INJURY_RATE:
      return Double.valueOf(getInjuryRate());

    case UPDATE_TIME:
      return Long.valueOf(getUpdateTime());

    case BIRTH_UP:
      return Double.valueOf(getBirthUp());

    case ID:
      return Integer.valueOf(getId());

    case WORK_DOWN:
      return Double.valueOf(getWorkDown());

    case WORK_RATE:
      return Double.valueOf(getWorkRate());

    case OLD_UP:
      return Double.valueOf(getOldUp());

    case INJURY_UP:
      return Double.valueOf(getInjuryUp());

    case SOCIAL_MAX:
      return Integer.valueOf(getSocialMax());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HOUSE_BASE:
      return isSetHouseBase();
    case HOUSE_DOWN:
      return isSetHouseDown();
    case HOUSE_RATE:
      return isSetHouseRate();
    case HOUSE_UP:
      return isSetHouseUp();
    case MEDICAL_DOWN:
      return isSetMedicalDown();
    case MEDICAL_RATE:
      return isSetMedicalRate();
    case MEDICAL_EXT:
      return isSetMedicalExt();
    case MEDICAL_UP:
      return isSetMedicalUp();
    case SOCIAL_BASE:
      return isSetSocialBase();
    case CITY_CODE:
      return isSetCityCode();
    case CITY_NAME:
      return isSetCityName();
    case OLD_DOWN:
      return isSetOldDown();
    case OLD_RATE:
      return isSetOldRate();
    case BIRTH_DOWN:
      return isSetBirthDown();
    case BIRTH_RATE:
      return isSetBirthRate();
    case WORK_UP:
      return isSetWorkUp();
    case INJURY_DOWN:
      return isSetInjuryDown();
    case INJURY_RATE:
      return isSetInjuryRate();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case BIRTH_UP:
      return isSetBirthUp();
    case ID:
      return isSetId();
    case WORK_DOWN:
      return isSetWorkDown();
    case WORK_RATE:
      return isSetWorkRate();
    case OLD_UP:
      return isSetOldUp();
    case INJURY_UP:
      return isSetInjuryUp();
    case SOCIAL_MAX:
      return isSetSocialMax();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SocialInsuranceThrift)
      return this.equals((SocialInsuranceThrift)that);
    return false;
  }

  public boolean equals(SocialInsuranceThrift that) {
    if (that == null)
      return false;

    boolean this_present_houseBase = true;
    boolean that_present_houseBase = true;
    if (this_present_houseBase || that_present_houseBase) {
      if (!(this_present_houseBase && that_present_houseBase))
        return false;
      if (this.houseBase != that.houseBase)
        return false;
    }

    boolean this_present_houseDown = true;
    boolean that_present_houseDown = true;
    if (this_present_houseDown || that_present_houseDown) {
      if (!(this_present_houseDown && that_present_houseDown))
        return false;
      if (this.houseDown != that.houseDown)
        return false;
    }

    boolean this_present_houseRate = true;
    boolean that_present_houseRate = true;
    if (this_present_houseRate || that_present_houseRate) {
      if (!(this_present_houseRate && that_present_houseRate))
        return false;
      if (this.houseRate != that.houseRate)
        return false;
    }

    boolean this_present_houseUp = true;
    boolean that_present_houseUp = true;
    if (this_present_houseUp || that_present_houseUp) {
      if (!(this_present_houseUp && that_present_houseUp))
        return false;
      if (this.houseUp != that.houseUp)
        return false;
    }

    boolean this_present_medicalDown = true;
    boolean that_present_medicalDown = true;
    if (this_present_medicalDown || that_present_medicalDown) {
      if (!(this_present_medicalDown && that_present_medicalDown))
        return false;
      if (this.medicalDown != that.medicalDown)
        return false;
    }

    boolean this_present_medicalRate = true;
    boolean that_present_medicalRate = true;
    if (this_present_medicalRate || that_present_medicalRate) {
      if (!(this_present_medicalRate && that_present_medicalRate))
        return false;
      if (this.medicalRate != that.medicalRate)
        return false;
    }

    boolean this_present_medicalExt = true;
    boolean that_present_medicalExt = true;
    if (this_present_medicalExt || that_present_medicalExt) {
      if (!(this_present_medicalExt && that_present_medicalExt))
        return false;
      if (this.medicalExt != that.medicalExt)
        return false;
    }

    boolean this_present_medicalUp = true;
    boolean that_present_medicalUp = true;
    if (this_present_medicalUp || that_present_medicalUp) {
      if (!(this_present_medicalUp && that_present_medicalUp))
        return false;
      if (this.medicalUp != that.medicalUp)
        return false;
    }

    boolean this_present_socialBase = true;
    boolean that_present_socialBase = true;
    if (this_present_socialBase || that_present_socialBase) {
      if (!(this_present_socialBase && that_present_socialBase))
        return false;
      if (this.socialBase != that.socialBase)
        return false;
    }

    boolean this_present_cityCode = true && this.isSetCityCode();
    boolean that_present_cityCode = true && that.isSetCityCode();
    if (this_present_cityCode || that_present_cityCode) {
      if (!(this_present_cityCode && that_present_cityCode))
        return false;
      if (!this.cityCode.equals(that.cityCode))
        return false;
    }

    boolean this_present_cityName = true && this.isSetCityName();
    boolean that_present_cityName = true && that.isSetCityName();
    if (this_present_cityName || that_present_cityName) {
      if (!(this_present_cityName && that_present_cityName))
        return false;
      if (!this.cityName.equals(that.cityName))
        return false;
    }

    boolean this_present_oldDown = true;
    boolean that_present_oldDown = true;
    if (this_present_oldDown || that_present_oldDown) {
      if (!(this_present_oldDown && that_present_oldDown))
        return false;
      if (this.oldDown != that.oldDown)
        return false;
    }

    boolean this_present_oldRate = true;
    boolean that_present_oldRate = true;
    if (this_present_oldRate || that_present_oldRate) {
      if (!(this_present_oldRate && that_present_oldRate))
        return false;
      if (this.oldRate != that.oldRate)
        return false;
    }

    boolean this_present_birthDown = true;
    boolean that_present_birthDown = true;
    if (this_present_birthDown || that_present_birthDown) {
      if (!(this_present_birthDown && that_present_birthDown))
        return false;
      if (this.birthDown != that.birthDown)
        return false;
    }

    boolean this_present_birthRate = true;
    boolean that_present_birthRate = true;
    if (this_present_birthRate || that_present_birthRate) {
      if (!(this_present_birthRate && that_present_birthRate))
        return false;
      if (this.birthRate != that.birthRate)
        return false;
    }

    boolean this_present_workUp = true;
    boolean that_present_workUp = true;
    if (this_present_workUp || that_present_workUp) {
      if (!(this_present_workUp && that_present_workUp))
        return false;
      if (this.workUp != that.workUp)
        return false;
    }

    boolean this_present_injuryDown = true;
    boolean that_present_injuryDown = true;
    if (this_present_injuryDown || that_present_injuryDown) {
      if (!(this_present_injuryDown && that_present_injuryDown))
        return false;
      if (this.injuryDown != that.injuryDown)
        return false;
    }

    boolean this_present_injuryRate = true;
    boolean that_present_injuryRate = true;
    if (this_present_injuryRate || that_present_injuryRate) {
      if (!(this_present_injuryRate && that_present_injuryRate))
        return false;
      if (this.injuryRate != that.injuryRate)
        return false;
    }

    boolean this_present_updateTime = true;
    boolean that_present_updateTime = true;
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (this.updateTime != that.updateTime)
        return false;
    }

    boolean this_present_birthUp = true;
    boolean that_present_birthUp = true;
    if (this_present_birthUp || that_present_birthUp) {
      if (!(this_present_birthUp && that_present_birthUp))
        return false;
      if (this.birthUp != that.birthUp)
        return false;
    }

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_workDown = true;
    boolean that_present_workDown = true;
    if (this_present_workDown || that_present_workDown) {
      if (!(this_present_workDown && that_present_workDown))
        return false;
      if (this.workDown != that.workDown)
        return false;
    }

    boolean this_present_workRate = true;
    boolean that_present_workRate = true;
    if (this_present_workRate || that_present_workRate) {
      if (!(this_present_workRate && that_present_workRate))
        return false;
      if (this.workRate != that.workRate)
        return false;
    }

    boolean this_present_oldUp = true;
    boolean that_present_oldUp = true;
    if (this_present_oldUp || that_present_oldUp) {
      if (!(this_present_oldUp && that_present_oldUp))
        return false;
      if (this.oldUp != that.oldUp)
        return false;
    }

    boolean this_present_injuryUp = true;
    boolean that_present_injuryUp = true;
    if (this_present_injuryUp || that_present_injuryUp) {
      if (!(this_present_injuryUp && that_present_injuryUp))
        return false;
      if (this.injuryUp != that.injuryUp)
        return false;
    }

    boolean this_present_socialMax = true;
    boolean that_present_socialMax = true;
    if (this_present_socialMax || that_present_socialMax) {
      if (!(this_present_socialMax && that_present_socialMax))
        return false;
      if (this.socialMax != that.socialMax)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SocialInsuranceThrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHouseBase()).compareTo(other.isSetHouseBase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseBase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseBase, other.houseBase);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseDown()).compareTo(other.isSetHouseDown());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseDown()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseDown, other.houseDown);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseRate()).compareTo(other.isSetHouseRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseRate, other.houseRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseUp()).compareTo(other.isSetHouseUp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseUp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseUp, other.houseUp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMedicalDown()).compareTo(other.isSetMedicalDown());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMedicalDown()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.medicalDown, other.medicalDown);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMedicalRate()).compareTo(other.isSetMedicalRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMedicalRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.medicalRate, other.medicalRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMedicalExt()).compareTo(other.isSetMedicalExt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMedicalExt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.medicalExt, other.medicalExt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMedicalUp()).compareTo(other.isSetMedicalUp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMedicalUp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.medicalUp, other.medicalUp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSocialBase()).compareTo(other.isSetSocialBase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSocialBase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.socialBase, other.socialBase);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCityCode()).compareTo(other.isSetCityCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCityCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cityCode, other.cityCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCityName()).compareTo(other.isSetCityName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCityName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cityName, other.cityName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOldDown()).compareTo(other.isSetOldDown());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldDown()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldDown, other.oldDown);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOldRate()).compareTo(other.isSetOldRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldRate, other.oldRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBirthDown()).compareTo(other.isSetBirthDown());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBirthDown()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.birthDown, other.birthDown);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBirthRate()).compareTo(other.isSetBirthRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBirthRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.birthRate, other.birthRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkUp()).compareTo(other.isSetWorkUp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkUp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workUp, other.workUp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInjuryDown()).compareTo(other.isSetInjuryDown());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInjuryDown()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.injuryDown, other.injuryDown);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInjuryRate()).compareTo(other.isSetInjuryRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInjuryRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.injuryRate, other.injuryRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBirthUp()).compareTo(other.isSetBirthUp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBirthUp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.birthUp, other.birthUp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkDown()).compareTo(other.isSetWorkDown());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkDown()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workDown, other.workDown);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkRate()).compareTo(other.isSetWorkRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workRate, other.workRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOldUp()).compareTo(other.isSetOldUp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldUp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldUp, other.oldUp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInjuryUp()).compareTo(other.isSetInjuryUp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInjuryUp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.injuryUp, other.injuryUp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSocialMax()).compareTo(other.isSetSocialMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSocialMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.socialMax, other.socialMax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SocialInsuranceThrift(");
    boolean first = true;

    sb.append("houseBase:");
    sb.append(this.houseBase);
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseDown:");
    sb.append(this.houseDown);
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseRate:");
    sb.append(this.houseRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseUp:");
    sb.append(this.houseUp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("medicalDown:");
    sb.append(this.medicalDown);
    first = false;
    if (!first) sb.append(", ");
    sb.append("medicalRate:");
    sb.append(this.medicalRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("medicalExt:");
    sb.append(this.medicalExt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("medicalUp:");
    sb.append(this.medicalUp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("socialBase:");
    sb.append(this.socialBase);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cityCode:");
    if (this.cityCode == null) {
      sb.append("null");
    } else {
      sb.append(this.cityCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cityName:");
    if (this.cityName == null) {
      sb.append("null");
    } else {
      sb.append(this.cityName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("oldDown:");
    sb.append(this.oldDown);
    first = false;
    if (!first) sb.append(", ");
    sb.append("oldRate:");
    sb.append(this.oldRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("birthDown:");
    sb.append(this.birthDown);
    first = false;
    if (!first) sb.append(", ");
    sb.append("birthRate:");
    sb.append(this.birthRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("workUp:");
    sb.append(this.workUp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("injuryDown:");
    sb.append(this.injuryDown);
    first = false;
    if (!first) sb.append(", ");
    sb.append("injuryRate:");
    sb.append(this.injuryRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTime:");
    sb.append(this.updateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("birthUp:");
    sb.append(this.birthUp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("workDown:");
    sb.append(this.workDown);
    first = false;
    if (!first) sb.append(", ");
    sb.append("workRate:");
    sb.append(this.workRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("oldUp:");
    sb.append(this.oldUp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("injuryUp:");
    sb.append(this.injuryUp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("socialMax:");
    sb.append(this.socialMax);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SocialInsuranceThriftStandardSchemeFactory implements SchemeFactory {
    public SocialInsuranceThriftStandardScheme getScheme() {
      return new SocialInsuranceThriftStandardScheme();
    }
  }

  private static class SocialInsuranceThriftStandardScheme extends StandardScheme<SocialInsuranceThrift> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SocialInsuranceThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HOUSE_BASE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.houseBase = iprot.readI32();
              struct.setHouseBaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HOUSE_DOWN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.houseDown = iprot.readDouble();
              struct.setHouseDownIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HOUSE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.houseRate = iprot.readDouble();
              struct.setHouseRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HOUSE_UP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.houseUp = iprot.readDouble();
              struct.setHouseUpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MEDICAL_DOWN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.medicalDown = iprot.readDouble();
              struct.setMedicalDownIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MEDICAL_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.medicalRate = iprot.readDouble();
              struct.setMedicalRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MEDICAL_EXT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.medicalExt = iprot.readDouble();
              struct.setMedicalExtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MEDICAL_UP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.medicalUp = iprot.readDouble();
              struct.setMedicalUpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SOCIAL_BASE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.socialBase = iprot.readI32();
              struct.setSocialBaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CITY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cityCode = iprot.readString();
              struct.setCityCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CITY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cityName = iprot.readString();
              struct.setCityNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // OLD_DOWN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.oldDown = iprot.readDouble();
              struct.setOldDownIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // OLD_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.oldRate = iprot.readDouble();
              struct.setOldRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // BIRTH_DOWN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.birthDown = iprot.readDouble();
              struct.setBirthDownIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // BIRTH_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.birthRate = iprot.readDouble();
              struct.setBirthRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // WORK_UP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.workUp = iprot.readDouble();
              struct.setWorkUpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // INJURY_DOWN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.injuryDown = iprot.readDouble();
              struct.setInjuryDownIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // INJURY_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.injuryRate = iprot.readDouble();
              struct.setInjuryRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updateTime = iprot.readI64();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // BIRTH_UP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.birthUp = iprot.readDouble();
              struct.setBirthUpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // WORK_DOWN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.workDown = iprot.readDouble();
              struct.setWorkDownIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // WORK_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.workRate = iprot.readDouble();
              struct.setWorkRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // OLD_UP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.oldUp = iprot.readDouble();
              struct.setOldUpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // INJURY_UP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.injuryUp = iprot.readDouble();
              struct.setInjuryUpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // SOCIAL_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.socialMax = iprot.readI32();
              struct.setSocialMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SocialInsuranceThrift struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(HOUSE_BASE_FIELD_DESC);
      oprot.writeI32(struct.houseBase);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HOUSE_DOWN_FIELD_DESC);
      oprot.writeDouble(struct.houseDown);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HOUSE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.houseRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HOUSE_UP_FIELD_DESC);
      oprot.writeDouble(struct.houseUp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MEDICAL_DOWN_FIELD_DESC);
      oprot.writeDouble(struct.medicalDown);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MEDICAL_RATE_FIELD_DESC);
      oprot.writeDouble(struct.medicalRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MEDICAL_EXT_FIELD_DESC);
      oprot.writeDouble(struct.medicalExt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MEDICAL_UP_FIELD_DESC);
      oprot.writeDouble(struct.medicalUp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SOCIAL_BASE_FIELD_DESC);
      oprot.writeI32(struct.socialBase);
      oprot.writeFieldEnd();
      if (struct.cityCode != null) {
        oprot.writeFieldBegin(CITY_CODE_FIELD_DESC);
        oprot.writeString(struct.cityCode);
        oprot.writeFieldEnd();
      }
      if (struct.cityName != null) {
        oprot.writeFieldBegin(CITY_NAME_FIELD_DESC);
        oprot.writeString(struct.cityName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OLD_DOWN_FIELD_DESC);
      oprot.writeDouble(struct.oldDown);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OLD_RATE_FIELD_DESC);
      oprot.writeDouble(struct.oldRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BIRTH_DOWN_FIELD_DESC);
      oprot.writeDouble(struct.birthDown);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BIRTH_RATE_FIELD_DESC);
      oprot.writeDouble(struct.birthRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WORK_UP_FIELD_DESC);
      oprot.writeDouble(struct.workUp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INJURY_DOWN_FIELD_DESC);
      oprot.writeDouble(struct.injuryDown);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INJURY_RATE_FIELD_DESC);
      oprot.writeDouble(struct.injuryRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.updateTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BIRTH_UP_FIELD_DESC);
      oprot.writeDouble(struct.birthUp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WORK_DOWN_FIELD_DESC);
      oprot.writeDouble(struct.workDown);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WORK_RATE_FIELD_DESC);
      oprot.writeDouble(struct.workRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OLD_UP_FIELD_DESC);
      oprot.writeDouble(struct.oldUp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INJURY_UP_FIELD_DESC);
      oprot.writeDouble(struct.injuryUp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SOCIAL_MAX_FIELD_DESC);
      oprot.writeI32(struct.socialMax);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SocialInsuranceThriftTupleSchemeFactory implements SchemeFactory {
    public SocialInsuranceThriftTupleScheme getScheme() {
      return new SocialInsuranceThriftTupleScheme();
    }
  }

  private static class SocialInsuranceThriftTupleScheme extends TupleScheme<SocialInsuranceThrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SocialInsuranceThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetHouseBase()) {
        optionals.set(0);
      }
      if (struct.isSetHouseDown()) {
        optionals.set(1);
      }
      if (struct.isSetHouseRate()) {
        optionals.set(2);
      }
      if (struct.isSetHouseUp()) {
        optionals.set(3);
      }
      if (struct.isSetMedicalDown()) {
        optionals.set(4);
      }
      if (struct.isSetMedicalRate()) {
        optionals.set(5);
      }
      if (struct.isSetMedicalExt()) {
        optionals.set(6);
      }
      if (struct.isSetMedicalUp()) {
        optionals.set(7);
      }
      if (struct.isSetSocialBase()) {
        optionals.set(8);
      }
      if (struct.isSetCityCode()) {
        optionals.set(9);
      }
      if (struct.isSetCityName()) {
        optionals.set(10);
      }
      if (struct.isSetOldDown()) {
        optionals.set(11);
      }
      if (struct.isSetOldRate()) {
        optionals.set(12);
      }
      if (struct.isSetBirthDown()) {
        optionals.set(13);
      }
      if (struct.isSetBirthRate()) {
        optionals.set(14);
      }
      if (struct.isSetWorkUp()) {
        optionals.set(15);
      }
      if (struct.isSetInjuryDown()) {
        optionals.set(16);
      }
      if (struct.isSetInjuryRate()) {
        optionals.set(17);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(18);
      }
      if (struct.isSetBirthUp()) {
        optionals.set(19);
      }
      if (struct.isSetId()) {
        optionals.set(20);
      }
      if (struct.isSetWorkDown()) {
        optionals.set(21);
      }
      if (struct.isSetWorkRate()) {
        optionals.set(22);
      }
      if (struct.isSetOldUp()) {
        optionals.set(23);
      }
      if (struct.isSetInjuryUp()) {
        optionals.set(24);
      }
      if (struct.isSetSocialMax()) {
        optionals.set(25);
      }
      oprot.writeBitSet(optionals, 26);
      if (struct.isSetHouseBase()) {
        oprot.writeI32(struct.houseBase);
      }
      if (struct.isSetHouseDown()) {
        oprot.writeDouble(struct.houseDown);
      }
      if (struct.isSetHouseRate()) {
        oprot.writeDouble(struct.houseRate);
      }
      if (struct.isSetHouseUp()) {
        oprot.writeDouble(struct.houseUp);
      }
      if (struct.isSetMedicalDown()) {
        oprot.writeDouble(struct.medicalDown);
      }
      if (struct.isSetMedicalRate()) {
        oprot.writeDouble(struct.medicalRate);
      }
      if (struct.isSetMedicalExt()) {
        oprot.writeDouble(struct.medicalExt);
      }
      if (struct.isSetMedicalUp()) {
        oprot.writeDouble(struct.medicalUp);
      }
      if (struct.isSetSocialBase()) {
        oprot.writeI32(struct.socialBase);
      }
      if (struct.isSetCityCode()) {
        oprot.writeString(struct.cityCode);
      }
      if (struct.isSetCityName()) {
        oprot.writeString(struct.cityName);
      }
      if (struct.isSetOldDown()) {
        oprot.writeDouble(struct.oldDown);
      }
      if (struct.isSetOldRate()) {
        oprot.writeDouble(struct.oldRate);
      }
      if (struct.isSetBirthDown()) {
        oprot.writeDouble(struct.birthDown);
      }
      if (struct.isSetBirthRate()) {
        oprot.writeDouble(struct.birthRate);
      }
      if (struct.isSetWorkUp()) {
        oprot.writeDouble(struct.workUp);
      }
      if (struct.isSetInjuryDown()) {
        oprot.writeDouble(struct.injuryDown);
      }
      if (struct.isSetInjuryRate()) {
        oprot.writeDouble(struct.injuryRate);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeI64(struct.updateTime);
      }
      if (struct.isSetBirthUp()) {
        oprot.writeDouble(struct.birthUp);
      }
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetWorkDown()) {
        oprot.writeDouble(struct.workDown);
      }
      if (struct.isSetWorkRate()) {
        oprot.writeDouble(struct.workRate);
      }
      if (struct.isSetOldUp()) {
        oprot.writeDouble(struct.oldUp);
      }
      if (struct.isSetInjuryUp()) {
        oprot.writeDouble(struct.injuryUp);
      }
      if (struct.isSetSocialMax()) {
        oprot.writeI32(struct.socialMax);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SocialInsuranceThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(26);
      if (incoming.get(0)) {
        struct.houseBase = iprot.readI32();
        struct.setHouseBaseIsSet(true);
      }
      if (incoming.get(1)) {
        struct.houseDown = iprot.readDouble();
        struct.setHouseDownIsSet(true);
      }
      if (incoming.get(2)) {
        struct.houseRate = iprot.readDouble();
        struct.setHouseRateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.houseUp = iprot.readDouble();
        struct.setHouseUpIsSet(true);
      }
      if (incoming.get(4)) {
        struct.medicalDown = iprot.readDouble();
        struct.setMedicalDownIsSet(true);
      }
      if (incoming.get(5)) {
        struct.medicalRate = iprot.readDouble();
        struct.setMedicalRateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.medicalExt = iprot.readDouble();
        struct.setMedicalExtIsSet(true);
      }
      if (incoming.get(7)) {
        struct.medicalUp = iprot.readDouble();
        struct.setMedicalUpIsSet(true);
      }
      if (incoming.get(8)) {
        struct.socialBase = iprot.readI32();
        struct.setSocialBaseIsSet(true);
      }
      if (incoming.get(9)) {
        struct.cityCode = iprot.readString();
        struct.setCityCodeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.cityName = iprot.readString();
        struct.setCityNameIsSet(true);
      }
      if (incoming.get(11)) {
        struct.oldDown = iprot.readDouble();
        struct.setOldDownIsSet(true);
      }
      if (incoming.get(12)) {
        struct.oldRate = iprot.readDouble();
        struct.setOldRateIsSet(true);
      }
      if (incoming.get(13)) {
        struct.birthDown = iprot.readDouble();
        struct.setBirthDownIsSet(true);
      }
      if (incoming.get(14)) {
        struct.birthRate = iprot.readDouble();
        struct.setBirthRateIsSet(true);
      }
      if (incoming.get(15)) {
        struct.workUp = iprot.readDouble();
        struct.setWorkUpIsSet(true);
      }
      if (incoming.get(16)) {
        struct.injuryDown = iprot.readDouble();
        struct.setInjuryDownIsSet(true);
      }
      if (incoming.get(17)) {
        struct.injuryRate = iprot.readDouble();
        struct.setInjuryRateIsSet(true);
      }
      if (incoming.get(18)) {
        struct.updateTime = iprot.readI64();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(19)) {
        struct.birthUp = iprot.readDouble();
        struct.setBirthUpIsSet(true);
      }
      if (incoming.get(20)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(21)) {
        struct.workDown = iprot.readDouble();
        struct.setWorkDownIsSet(true);
      }
      if (incoming.get(22)) {
        struct.workRate = iprot.readDouble();
        struct.setWorkRateIsSet(true);
      }
      if (incoming.get(23)) {
        struct.oldUp = iprot.readDouble();
        struct.setOldUpIsSet(true);
      }
      if (incoming.get(24)) {
        struct.injuryUp = iprot.readDouble();
        struct.setInjuryUpIsSet(true);
      }
      if (incoming.get(25)) {
        struct.socialMax = iprot.readI32();
        struct.setSocialMaxIsSet(true);
      }
    }
  }

}

