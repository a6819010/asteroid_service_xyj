/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.youguu.asteroid.rpc.thrift.gen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 存款利率表
 */
public class DepositRateThrift implements org.apache.thrift.TBase<DepositRateThrift, DepositRateThrift._Fields>, java.io.Serializable, Cloneable, Comparable<DepositRateThrift> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DepositRateThrift");

  private static final org.apache.thrift.protocol.TField BANK_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("bankCode", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField BANK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bankName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CURRENT_DEPOSIT_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("currentDepositRate", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField FIXED_DEPOSIT3MONTH_FIELD_DESC = new org.apache.thrift.protocol.TField("fixedDeposit3month", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField FIXED_DEPOSIT6MONTH_FIELD_DESC = new org.apache.thrift.protocol.TField("fixedDeposit6month", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField FIXED_DEPOSIT1YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("fixedDeposit1year", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField FIXED_DEPOSIT2YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("fixedDeposit2year", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField FIXED_DEPOSIT3YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("fixedDeposit3year", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField FIXED_DEPOSIT5YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("fixedDeposit5year", org.apache.thrift.protocol.TType.DOUBLE, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DepositRateThriftStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DepositRateThriftTupleSchemeFactory());
  }

  public String bankCode; // required
  public String bankName; // required
  public double currentDepositRate; // required
  public double fixedDeposit3month; // required
  public double fixedDeposit6month; // required
  public long updateTime; // required
  public int id; // required
  public double fixedDeposit1year; // required
  public double fixedDeposit2year; // required
  public double fixedDeposit3year; // required
  public double fixedDeposit5year; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BANK_CODE((short)1, "bankCode"),
    BANK_NAME((short)2, "bankName"),
    CURRENT_DEPOSIT_RATE((short)3, "currentDepositRate"),
    FIXED_DEPOSIT3MONTH((short)4, "fixedDeposit3month"),
    FIXED_DEPOSIT6MONTH((short)5, "fixedDeposit6month"),
    UPDATE_TIME((short)6, "updateTime"),
    ID((short)7, "id"),
    FIXED_DEPOSIT1YEAR((short)8, "fixedDeposit1year"),
    FIXED_DEPOSIT2YEAR((short)9, "fixedDeposit2year"),
    FIXED_DEPOSIT3YEAR((short)10, "fixedDeposit3year"),
    FIXED_DEPOSIT5YEAR((short)11, "fixedDeposit5year");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BANK_CODE
          return BANK_CODE;
        case 2: // BANK_NAME
          return BANK_NAME;
        case 3: // CURRENT_DEPOSIT_RATE
          return CURRENT_DEPOSIT_RATE;
        case 4: // FIXED_DEPOSIT3MONTH
          return FIXED_DEPOSIT3MONTH;
        case 5: // FIXED_DEPOSIT6MONTH
          return FIXED_DEPOSIT6MONTH;
        case 6: // UPDATE_TIME
          return UPDATE_TIME;
        case 7: // ID
          return ID;
        case 8: // FIXED_DEPOSIT1YEAR
          return FIXED_DEPOSIT1YEAR;
        case 9: // FIXED_DEPOSIT2YEAR
          return FIXED_DEPOSIT2YEAR;
        case 10: // FIXED_DEPOSIT3YEAR
          return FIXED_DEPOSIT3YEAR;
        case 11: // FIXED_DEPOSIT5YEAR
          return FIXED_DEPOSIT5YEAR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CURRENTDEPOSITRATE_ISSET_ID = 0;
  private static final int __FIXEDDEPOSIT3MONTH_ISSET_ID = 1;
  private static final int __FIXEDDEPOSIT6MONTH_ISSET_ID = 2;
  private static final int __UPDATETIME_ISSET_ID = 3;
  private static final int __ID_ISSET_ID = 4;
  private static final int __FIXEDDEPOSIT1YEAR_ISSET_ID = 5;
  private static final int __FIXEDDEPOSIT2YEAR_ISSET_ID = 6;
  private static final int __FIXEDDEPOSIT3YEAR_ISSET_ID = 7;
  private static final int __FIXEDDEPOSIT5YEAR_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BANK_CODE, new org.apache.thrift.meta_data.FieldMetaData("bankCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_NAME, new org.apache.thrift.meta_data.FieldMetaData("bankName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CURRENT_DEPOSIT_RATE, new org.apache.thrift.meta_data.FieldMetaData("currentDepositRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FIXED_DEPOSIT3MONTH, new org.apache.thrift.meta_data.FieldMetaData("fixedDeposit3month", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FIXED_DEPOSIT6MONTH, new org.apache.thrift.meta_data.FieldMetaData("fixedDeposit6month", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FIXED_DEPOSIT1YEAR, new org.apache.thrift.meta_data.FieldMetaData("fixedDeposit1year", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FIXED_DEPOSIT2YEAR, new org.apache.thrift.meta_data.FieldMetaData("fixedDeposit2year", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FIXED_DEPOSIT3YEAR, new org.apache.thrift.meta_data.FieldMetaData("fixedDeposit3year", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FIXED_DEPOSIT5YEAR, new org.apache.thrift.meta_data.FieldMetaData("fixedDeposit5year", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DepositRateThrift.class, metaDataMap);
  }

  public DepositRateThrift() {
  }

  public DepositRateThrift(
    String bankCode,
    String bankName,
    double currentDepositRate,
    double fixedDeposit3month,
    double fixedDeposit6month,
    long updateTime,
    int id,
    double fixedDeposit1year,
    double fixedDeposit2year,
    double fixedDeposit3year,
    double fixedDeposit5year)
  {
    this();
    this.bankCode = bankCode;
    this.bankName = bankName;
    this.currentDepositRate = currentDepositRate;
    setCurrentDepositRateIsSet(true);
    this.fixedDeposit3month = fixedDeposit3month;
    setFixedDeposit3monthIsSet(true);
    this.fixedDeposit6month = fixedDeposit6month;
    setFixedDeposit6monthIsSet(true);
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    this.id = id;
    setIdIsSet(true);
    this.fixedDeposit1year = fixedDeposit1year;
    setFixedDeposit1yearIsSet(true);
    this.fixedDeposit2year = fixedDeposit2year;
    setFixedDeposit2yearIsSet(true);
    this.fixedDeposit3year = fixedDeposit3year;
    setFixedDeposit3yearIsSet(true);
    this.fixedDeposit5year = fixedDeposit5year;
    setFixedDeposit5yearIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DepositRateThrift(DepositRateThrift other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBankCode()) {
      this.bankCode = other.bankCode;
    }
    if (other.isSetBankName()) {
      this.bankName = other.bankName;
    }
    this.currentDepositRate = other.currentDepositRate;
    this.fixedDeposit3month = other.fixedDeposit3month;
    this.fixedDeposit6month = other.fixedDeposit6month;
    this.updateTime = other.updateTime;
    this.id = other.id;
    this.fixedDeposit1year = other.fixedDeposit1year;
    this.fixedDeposit2year = other.fixedDeposit2year;
    this.fixedDeposit3year = other.fixedDeposit3year;
    this.fixedDeposit5year = other.fixedDeposit5year;
  }

  public DepositRateThrift deepCopy() {
    return new DepositRateThrift(this);
  }

  @Override
  public void clear() {
    this.bankCode = null;
    this.bankName = null;
    setCurrentDepositRateIsSet(false);
    this.currentDepositRate = 0.0;
    setFixedDeposit3monthIsSet(false);
    this.fixedDeposit3month = 0.0;
    setFixedDeposit6monthIsSet(false);
    this.fixedDeposit6month = 0.0;
    setUpdateTimeIsSet(false);
    this.updateTime = 0;
    setIdIsSet(false);
    this.id = 0;
    setFixedDeposit1yearIsSet(false);
    this.fixedDeposit1year = 0.0;
    setFixedDeposit2yearIsSet(false);
    this.fixedDeposit2year = 0.0;
    setFixedDeposit3yearIsSet(false);
    this.fixedDeposit3year = 0.0;
    setFixedDeposit5yearIsSet(false);
    this.fixedDeposit5year = 0.0;
  }

  public String getBankCode() {
    return this.bankCode;
  }

  public DepositRateThrift setBankCode(String bankCode) {
    this.bankCode = bankCode;
    return this;
  }

  public void unsetBankCode() {
    this.bankCode = null;
  }

  /** Returns true if field bankCode is set (has been assigned a value) and false otherwise */
  public boolean isSetBankCode() {
    return this.bankCode != null;
  }

  public void setBankCodeIsSet(boolean value) {
    if (!value) {
      this.bankCode = null;
    }
  }

  public String getBankName() {
    return this.bankName;
  }

  public DepositRateThrift setBankName(String bankName) {
    this.bankName = bankName;
    return this;
  }

  public void unsetBankName() {
    this.bankName = null;
  }

  /** Returns true if field bankName is set (has been assigned a value) and false otherwise */
  public boolean isSetBankName() {
    return this.bankName != null;
  }

  public void setBankNameIsSet(boolean value) {
    if (!value) {
      this.bankName = null;
    }
  }

  public double getCurrentDepositRate() {
    return this.currentDepositRate;
  }

  public DepositRateThrift setCurrentDepositRate(double currentDepositRate) {
    this.currentDepositRate = currentDepositRate;
    setCurrentDepositRateIsSet(true);
    return this;
  }

  public void unsetCurrentDepositRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRENTDEPOSITRATE_ISSET_ID);
  }

  /** Returns true if field currentDepositRate is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentDepositRate() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRENTDEPOSITRATE_ISSET_ID);
  }

  public void setCurrentDepositRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRENTDEPOSITRATE_ISSET_ID, value);
  }

  public double getFixedDeposit3month() {
    return this.fixedDeposit3month;
  }

  public DepositRateThrift setFixedDeposit3month(double fixedDeposit3month) {
    this.fixedDeposit3month = fixedDeposit3month;
    setFixedDeposit3monthIsSet(true);
    return this;
  }

  public void unsetFixedDeposit3month() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIXEDDEPOSIT3MONTH_ISSET_ID);
  }

  /** Returns true if field fixedDeposit3month is set (has been assigned a value) and false otherwise */
  public boolean isSetFixedDeposit3month() {
    return EncodingUtils.testBit(__isset_bitfield, __FIXEDDEPOSIT3MONTH_ISSET_ID);
  }

  public void setFixedDeposit3monthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIXEDDEPOSIT3MONTH_ISSET_ID, value);
  }

  public double getFixedDeposit6month() {
    return this.fixedDeposit6month;
  }

  public DepositRateThrift setFixedDeposit6month(double fixedDeposit6month) {
    this.fixedDeposit6month = fixedDeposit6month;
    setFixedDeposit6monthIsSet(true);
    return this;
  }

  public void unsetFixedDeposit6month() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIXEDDEPOSIT6MONTH_ISSET_ID);
  }

  /** Returns true if field fixedDeposit6month is set (has been assigned a value) and false otherwise */
  public boolean isSetFixedDeposit6month() {
    return EncodingUtils.testBit(__isset_bitfield, __FIXEDDEPOSIT6MONTH_ISSET_ID);
  }

  public void setFixedDeposit6monthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIXEDDEPOSIT6MONTH_ISSET_ID, value);
  }

  public long getUpdateTime() {
    return this.updateTime;
  }

  public DepositRateThrift setUpdateTime(long updateTime) {
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    return this;
  }

  public void unsetUpdateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  public void setUpdateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATETIME_ISSET_ID, value);
  }

  public int getId() {
    return this.id;
  }

  public DepositRateThrift setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public double getFixedDeposit1year() {
    return this.fixedDeposit1year;
  }

  public DepositRateThrift setFixedDeposit1year(double fixedDeposit1year) {
    this.fixedDeposit1year = fixedDeposit1year;
    setFixedDeposit1yearIsSet(true);
    return this;
  }

  public void unsetFixedDeposit1year() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIXEDDEPOSIT1YEAR_ISSET_ID);
  }

  /** Returns true if field fixedDeposit1year is set (has been assigned a value) and false otherwise */
  public boolean isSetFixedDeposit1year() {
    return EncodingUtils.testBit(__isset_bitfield, __FIXEDDEPOSIT1YEAR_ISSET_ID);
  }

  public void setFixedDeposit1yearIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIXEDDEPOSIT1YEAR_ISSET_ID, value);
  }

  public double getFixedDeposit2year() {
    return this.fixedDeposit2year;
  }

  public DepositRateThrift setFixedDeposit2year(double fixedDeposit2year) {
    this.fixedDeposit2year = fixedDeposit2year;
    setFixedDeposit2yearIsSet(true);
    return this;
  }

  public void unsetFixedDeposit2year() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIXEDDEPOSIT2YEAR_ISSET_ID);
  }

  /** Returns true if field fixedDeposit2year is set (has been assigned a value) and false otherwise */
  public boolean isSetFixedDeposit2year() {
    return EncodingUtils.testBit(__isset_bitfield, __FIXEDDEPOSIT2YEAR_ISSET_ID);
  }

  public void setFixedDeposit2yearIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIXEDDEPOSIT2YEAR_ISSET_ID, value);
  }

  public double getFixedDeposit3year() {
    return this.fixedDeposit3year;
  }

  public DepositRateThrift setFixedDeposit3year(double fixedDeposit3year) {
    this.fixedDeposit3year = fixedDeposit3year;
    setFixedDeposit3yearIsSet(true);
    return this;
  }

  public void unsetFixedDeposit3year() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIXEDDEPOSIT3YEAR_ISSET_ID);
  }

  /** Returns true if field fixedDeposit3year is set (has been assigned a value) and false otherwise */
  public boolean isSetFixedDeposit3year() {
    return EncodingUtils.testBit(__isset_bitfield, __FIXEDDEPOSIT3YEAR_ISSET_ID);
  }

  public void setFixedDeposit3yearIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIXEDDEPOSIT3YEAR_ISSET_ID, value);
  }

  public double getFixedDeposit5year() {
    return this.fixedDeposit5year;
  }

  public DepositRateThrift setFixedDeposit5year(double fixedDeposit5year) {
    this.fixedDeposit5year = fixedDeposit5year;
    setFixedDeposit5yearIsSet(true);
    return this;
  }

  public void unsetFixedDeposit5year() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIXEDDEPOSIT5YEAR_ISSET_ID);
  }

  /** Returns true if field fixedDeposit5year is set (has been assigned a value) and false otherwise */
  public boolean isSetFixedDeposit5year() {
    return EncodingUtils.testBit(__isset_bitfield, __FIXEDDEPOSIT5YEAR_ISSET_ID);
  }

  public void setFixedDeposit5yearIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIXEDDEPOSIT5YEAR_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BANK_CODE:
      if (value == null) {
        unsetBankCode();
      } else {
        setBankCode((String)value);
      }
      break;

    case BANK_NAME:
      if (value == null) {
        unsetBankName();
      } else {
        setBankName((String)value);
      }
      break;

    case CURRENT_DEPOSIT_RATE:
      if (value == null) {
        unsetCurrentDepositRate();
      } else {
        setCurrentDepositRate((Double)value);
      }
      break;

    case FIXED_DEPOSIT3MONTH:
      if (value == null) {
        unsetFixedDeposit3month();
      } else {
        setFixedDeposit3month((Double)value);
      }
      break;

    case FIXED_DEPOSIT6MONTH:
      if (value == null) {
        unsetFixedDeposit6month();
      } else {
        setFixedDeposit6month((Double)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((Long)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case FIXED_DEPOSIT1YEAR:
      if (value == null) {
        unsetFixedDeposit1year();
      } else {
        setFixedDeposit1year((Double)value);
      }
      break;

    case FIXED_DEPOSIT2YEAR:
      if (value == null) {
        unsetFixedDeposit2year();
      } else {
        setFixedDeposit2year((Double)value);
      }
      break;

    case FIXED_DEPOSIT3YEAR:
      if (value == null) {
        unsetFixedDeposit3year();
      } else {
        setFixedDeposit3year((Double)value);
      }
      break;

    case FIXED_DEPOSIT5YEAR:
      if (value == null) {
        unsetFixedDeposit5year();
      } else {
        setFixedDeposit5year((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BANK_CODE:
      return getBankCode();

    case BANK_NAME:
      return getBankName();

    case CURRENT_DEPOSIT_RATE:
      return Double.valueOf(getCurrentDepositRate());

    case FIXED_DEPOSIT3MONTH:
      return Double.valueOf(getFixedDeposit3month());

    case FIXED_DEPOSIT6MONTH:
      return Double.valueOf(getFixedDeposit6month());

    case UPDATE_TIME:
      return Long.valueOf(getUpdateTime());

    case ID:
      return Integer.valueOf(getId());

    case FIXED_DEPOSIT1YEAR:
      return Double.valueOf(getFixedDeposit1year());

    case FIXED_DEPOSIT2YEAR:
      return Double.valueOf(getFixedDeposit2year());

    case FIXED_DEPOSIT3YEAR:
      return Double.valueOf(getFixedDeposit3year());

    case FIXED_DEPOSIT5YEAR:
      return Double.valueOf(getFixedDeposit5year());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BANK_CODE:
      return isSetBankCode();
    case BANK_NAME:
      return isSetBankName();
    case CURRENT_DEPOSIT_RATE:
      return isSetCurrentDepositRate();
    case FIXED_DEPOSIT3MONTH:
      return isSetFixedDeposit3month();
    case FIXED_DEPOSIT6MONTH:
      return isSetFixedDeposit6month();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case ID:
      return isSetId();
    case FIXED_DEPOSIT1YEAR:
      return isSetFixedDeposit1year();
    case FIXED_DEPOSIT2YEAR:
      return isSetFixedDeposit2year();
    case FIXED_DEPOSIT3YEAR:
      return isSetFixedDeposit3year();
    case FIXED_DEPOSIT5YEAR:
      return isSetFixedDeposit5year();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DepositRateThrift)
      return this.equals((DepositRateThrift)that);
    return false;
  }

  public boolean equals(DepositRateThrift that) {
    if (that == null)
      return false;

    boolean this_present_bankCode = true && this.isSetBankCode();
    boolean that_present_bankCode = true && that.isSetBankCode();
    if (this_present_bankCode || that_present_bankCode) {
      if (!(this_present_bankCode && that_present_bankCode))
        return false;
      if (!this.bankCode.equals(that.bankCode))
        return false;
    }

    boolean this_present_bankName = true && this.isSetBankName();
    boolean that_present_bankName = true && that.isSetBankName();
    if (this_present_bankName || that_present_bankName) {
      if (!(this_present_bankName && that_present_bankName))
        return false;
      if (!this.bankName.equals(that.bankName))
        return false;
    }

    boolean this_present_currentDepositRate = true;
    boolean that_present_currentDepositRate = true;
    if (this_present_currentDepositRate || that_present_currentDepositRate) {
      if (!(this_present_currentDepositRate && that_present_currentDepositRate))
        return false;
      if (this.currentDepositRate != that.currentDepositRate)
        return false;
    }

    boolean this_present_fixedDeposit3month = true;
    boolean that_present_fixedDeposit3month = true;
    if (this_present_fixedDeposit3month || that_present_fixedDeposit3month) {
      if (!(this_present_fixedDeposit3month && that_present_fixedDeposit3month))
        return false;
      if (this.fixedDeposit3month != that.fixedDeposit3month)
        return false;
    }

    boolean this_present_fixedDeposit6month = true;
    boolean that_present_fixedDeposit6month = true;
    if (this_present_fixedDeposit6month || that_present_fixedDeposit6month) {
      if (!(this_present_fixedDeposit6month && that_present_fixedDeposit6month))
        return false;
      if (this.fixedDeposit6month != that.fixedDeposit6month)
        return false;
    }

    boolean this_present_updateTime = true;
    boolean that_present_updateTime = true;
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (this.updateTime != that.updateTime)
        return false;
    }

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_fixedDeposit1year = true;
    boolean that_present_fixedDeposit1year = true;
    if (this_present_fixedDeposit1year || that_present_fixedDeposit1year) {
      if (!(this_present_fixedDeposit1year && that_present_fixedDeposit1year))
        return false;
      if (this.fixedDeposit1year != that.fixedDeposit1year)
        return false;
    }

    boolean this_present_fixedDeposit2year = true;
    boolean that_present_fixedDeposit2year = true;
    if (this_present_fixedDeposit2year || that_present_fixedDeposit2year) {
      if (!(this_present_fixedDeposit2year && that_present_fixedDeposit2year))
        return false;
      if (this.fixedDeposit2year != that.fixedDeposit2year)
        return false;
    }

    boolean this_present_fixedDeposit3year = true;
    boolean that_present_fixedDeposit3year = true;
    if (this_present_fixedDeposit3year || that_present_fixedDeposit3year) {
      if (!(this_present_fixedDeposit3year && that_present_fixedDeposit3year))
        return false;
      if (this.fixedDeposit3year != that.fixedDeposit3year)
        return false;
    }

    boolean this_present_fixedDeposit5year = true;
    boolean that_present_fixedDeposit5year = true;
    if (this_present_fixedDeposit5year || that_present_fixedDeposit5year) {
      if (!(this_present_fixedDeposit5year && that_present_fixedDeposit5year))
        return false;
      if (this.fixedDeposit5year != that.fixedDeposit5year)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(DepositRateThrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBankCode()).compareTo(other.isSetBankCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankCode, other.bankCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankName()).compareTo(other.isSetBankName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankName, other.bankName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrentDepositRate()).compareTo(other.isSetCurrentDepositRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentDepositRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentDepositRate, other.currentDepositRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFixedDeposit3month()).compareTo(other.isSetFixedDeposit3month());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFixedDeposit3month()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fixedDeposit3month, other.fixedDeposit3month);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFixedDeposit6month()).compareTo(other.isSetFixedDeposit6month());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFixedDeposit6month()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fixedDeposit6month, other.fixedDeposit6month);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFixedDeposit1year()).compareTo(other.isSetFixedDeposit1year());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFixedDeposit1year()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fixedDeposit1year, other.fixedDeposit1year);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFixedDeposit2year()).compareTo(other.isSetFixedDeposit2year());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFixedDeposit2year()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fixedDeposit2year, other.fixedDeposit2year);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFixedDeposit3year()).compareTo(other.isSetFixedDeposit3year());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFixedDeposit3year()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fixedDeposit3year, other.fixedDeposit3year);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFixedDeposit5year()).compareTo(other.isSetFixedDeposit5year());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFixedDeposit5year()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fixedDeposit5year, other.fixedDeposit5year);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DepositRateThrift(");
    boolean first = true;

    sb.append("bankCode:");
    if (this.bankCode == null) {
      sb.append("null");
    } else {
      sb.append(this.bankCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankName:");
    if (this.bankName == null) {
      sb.append("null");
    } else {
      sb.append(this.bankName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currentDepositRate:");
    sb.append(this.currentDepositRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fixedDeposit3month:");
    sb.append(this.fixedDeposit3month);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fixedDeposit6month:");
    sb.append(this.fixedDeposit6month);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTime:");
    sb.append(this.updateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fixedDeposit1year:");
    sb.append(this.fixedDeposit1year);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fixedDeposit2year:");
    sb.append(this.fixedDeposit2year);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fixedDeposit3year:");
    sb.append(this.fixedDeposit3year);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fixedDeposit5year:");
    sb.append(this.fixedDeposit5year);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DepositRateThriftStandardSchemeFactory implements SchemeFactory {
    public DepositRateThriftStandardScheme getScheme() {
      return new DepositRateThriftStandardScheme();
    }
  }

  private static class DepositRateThriftStandardScheme extends StandardScheme<DepositRateThrift> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DepositRateThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BANK_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankCode = iprot.readString();
              struct.setBankCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BANK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankName = iprot.readString();
              struct.setBankNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CURRENT_DEPOSIT_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.currentDepositRate = iprot.readDouble();
              struct.setCurrentDepositRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FIXED_DEPOSIT3MONTH
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fixedDeposit3month = iprot.readDouble();
              struct.setFixedDeposit3monthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FIXED_DEPOSIT6MONTH
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fixedDeposit6month = iprot.readDouble();
              struct.setFixedDeposit6monthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updateTime = iprot.readI64();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FIXED_DEPOSIT1YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fixedDeposit1year = iprot.readDouble();
              struct.setFixedDeposit1yearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FIXED_DEPOSIT2YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fixedDeposit2year = iprot.readDouble();
              struct.setFixedDeposit2yearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FIXED_DEPOSIT3YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fixedDeposit3year = iprot.readDouble();
              struct.setFixedDeposit3yearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // FIXED_DEPOSIT5YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fixedDeposit5year = iprot.readDouble();
              struct.setFixedDeposit5yearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DepositRateThrift struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.bankCode != null) {
        oprot.writeFieldBegin(BANK_CODE_FIELD_DESC);
        oprot.writeString(struct.bankCode);
        oprot.writeFieldEnd();
      }
      if (struct.bankName != null) {
        oprot.writeFieldBegin(BANK_NAME_FIELD_DESC);
        oprot.writeString(struct.bankName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CURRENT_DEPOSIT_RATE_FIELD_DESC);
      oprot.writeDouble(struct.currentDepositRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIXED_DEPOSIT3MONTH_FIELD_DESC);
      oprot.writeDouble(struct.fixedDeposit3month);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIXED_DEPOSIT6MONTH_FIELD_DESC);
      oprot.writeDouble(struct.fixedDeposit6month);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.updateTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIXED_DEPOSIT1YEAR_FIELD_DESC);
      oprot.writeDouble(struct.fixedDeposit1year);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIXED_DEPOSIT2YEAR_FIELD_DESC);
      oprot.writeDouble(struct.fixedDeposit2year);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIXED_DEPOSIT3YEAR_FIELD_DESC);
      oprot.writeDouble(struct.fixedDeposit3year);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIXED_DEPOSIT5YEAR_FIELD_DESC);
      oprot.writeDouble(struct.fixedDeposit5year);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DepositRateThriftTupleSchemeFactory implements SchemeFactory {
    public DepositRateThriftTupleScheme getScheme() {
      return new DepositRateThriftTupleScheme();
    }
  }

  private static class DepositRateThriftTupleScheme extends TupleScheme<DepositRateThrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DepositRateThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBankCode()) {
        optionals.set(0);
      }
      if (struct.isSetBankName()) {
        optionals.set(1);
      }
      if (struct.isSetCurrentDepositRate()) {
        optionals.set(2);
      }
      if (struct.isSetFixedDeposit3month()) {
        optionals.set(3);
      }
      if (struct.isSetFixedDeposit6month()) {
        optionals.set(4);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(5);
      }
      if (struct.isSetId()) {
        optionals.set(6);
      }
      if (struct.isSetFixedDeposit1year()) {
        optionals.set(7);
      }
      if (struct.isSetFixedDeposit2year()) {
        optionals.set(8);
      }
      if (struct.isSetFixedDeposit3year()) {
        optionals.set(9);
      }
      if (struct.isSetFixedDeposit5year()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetBankCode()) {
        oprot.writeString(struct.bankCode);
      }
      if (struct.isSetBankName()) {
        oprot.writeString(struct.bankName);
      }
      if (struct.isSetCurrentDepositRate()) {
        oprot.writeDouble(struct.currentDepositRate);
      }
      if (struct.isSetFixedDeposit3month()) {
        oprot.writeDouble(struct.fixedDeposit3month);
      }
      if (struct.isSetFixedDeposit6month()) {
        oprot.writeDouble(struct.fixedDeposit6month);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeI64(struct.updateTime);
      }
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetFixedDeposit1year()) {
        oprot.writeDouble(struct.fixedDeposit1year);
      }
      if (struct.isSetFixedDeposit2year()) {
        oprot.writeDouble(struct.fixedDeposit2year);
      }
      if (struct.isSetFixedDeposit3year()) {
        oprot.writeDouble(struct.fixedDeposit3year);
      }
      if (struct.isSetFixedDeposit5year()) {
        oprot.writeDouble(struct.fixedDeposit5year);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DepositRateThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.bankCode = iprot.readString();
        struct.setBankCodeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.bankName = iprot.readString();
        struct.setBankNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.currentDepositRate = iprot.readDouble();
        struct.setCurrentDepositRateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.fixedDeposit3month = iprot.readDouble();
        struct.setFixedDeposit3monthIsSet(true);
      }
      if (incoming.get(4)) {
        struct.fixedDeposit6month = iprot.readDouble();
        struct.setFixedDeposit6monthIsSet(true);
      }
      if (incoming.get(5)) {
        struct.updateTime = iprot.readI64();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.fixedDeposit1year = iprot.readDouble();
        struct.setFixedDeposit1yearIsSet(true);
      }
      if (incoming.get(8)) {
        struct.fixedDeposit2year = iprot.readDouble();
        struct.setFixedDeposit2yearIsSet(true);
      }
      if (incoming.get(9)) {
        struct.fixedDeposit3year = iprot.readDouble();
        struct.setFixedDeposit3yearIsSet(true);
      }
      if (incoming.get(10)) {
        struct.fixedDeposit5year = iprot.readDouble();
        struct.setFixedDeposit5yearIsSet(true);
      }
    }
  }

}

