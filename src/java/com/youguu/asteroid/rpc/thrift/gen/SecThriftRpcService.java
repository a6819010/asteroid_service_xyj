/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.youguu.asteroid.rpc.thrift.gen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SecThriftRpcService {

  /**
   * 券商开户service *
   */
  public interface Iface {

    /**
     * 添加券商 *
     * 
     * @param secAccountAndTradeThrift
     */
    public int addSecAccountAndTrade(SecAccountAndTradeThrift secAccountAndTradeThrift) throws org.apache.thrift.TException;

    /**
     * 删除券商 *
     * 
     * @param id
     */
    public int delSecAccountAndTradeById(int id) throws org.apache.thrift.TException;

    /**
     * 更新券商信息 *
     * 
     * @param secAccountAndTradeThrift
     */
    public int updateSecAccountAndTrade(SecAccountAndTradeThrift secAccountAndTradeThrift) throws org.apache.thrift.TException;

    /**
     * 通过券商信息ID 获取券商信息 *
     * 
     * @param id
     */
    public SecAccountAndTradeThrift getSecAccountAndTradeById(int id) throws org.apache.thrift.TException;

    /**
     * 通过查询条件获取券商列表 *
     * 
     * @param osType
     * @param type
     */
    public List<SecAccountAndTradeThrift> getSecAccountAndTradeList(int osType, int type) throws org.apache.thrift.TException;

    /**
     * 添加券商开户的客户信息 *
     * 
     * @param secAccountRecordThrift
     */
    public int addSecAccountRecord(SecAccountRecordThrift secAccountRecordThrift) throws org.apache.thrift.TException;

    /**
     * 通过信息id获取券商开户的客户信息 *
     * 
     * @param id
     */
    public SecAccountRecordThrift getSecAccountRecordById(int id) throws org.apache.thrift.TException;

    /**
     * 通过查询条件获取券商开户信息 *
     * 
     * @param phone
     * @param secNo
     * @param createtime
     */
    public List<SecAccountRecordThrift> getSecAccountRecordThriftList(String phone, int secNo, long createtime) throws org.apache.thrift.TException;

    /**
     * 分页查询券商开户的客户信息 *
     * 
     * @param phone
     * @param secNo
     * @param createtime
     * @param pageIndex
     * @param pageSize
     */
    public ByteBuffer querySecAccountRecord(String phone, int secNo, long createtime, int pageIndex, int pageSize) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void addSecAccountAndTrade(SecAccountAndTradeThrift secAccountAndTradeThrift, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delSecAccountAndTradeById(int id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateSecAccountAndTrade(SecAccountAndTradeThrift secAccountAndTradeThrift, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSecAccountAndTradeById(int id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSecAccountAndTradeList(int osType, int type, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addSecAccountRecord(SecAccountRecordThrift secAccountRecordThrift, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSecAccountRecordById(int id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSecAccountRecordThriftList(String phone, int secNo, long createtime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void querySecAccountRecord(String phone, int secNo, long createtime, int pageIndex, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int addSecAccountAndTrade(SecAccountAndTradeThrift secAccountAndTradeThrift) throws org.apache.thrift.TException
    {
      send_addSecAccountAndTrade(secAccountAndTradeThrift);
      return recv_addSecAccountAndTrade();
    }

    public void send_addSecAccountAndTrade(SecAccountAndTradeThrift secAccountAndTradeThrift) throws org.apache.thrift.TException
    {
      addSecAccountAndTrade_args args = new addSecAccountAndTrade_args();
      args.setSecAccountAndTradeThrift(secAccountAndTradeThrift);
      sendBase("addSecAccountAndTrade", args);
    }

    public int recv_addSecAccountAndTrade() throws org.apache.thrift.TException
    {
      addSecAccountAndTrade_result result = new addSecAccountAndTrade_result();
      receiveBase(result, "addSecAccountAndTrade");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addSecAccountAndTrade failed: unknown result");
    }

    public int delSecAccountAndTradeById(int id) throws org.apache.thrift.TException
    {
      send_delSecAccountAndTradeById(id);
      return recv_delSecAccountAndTradeById();
    }

    public void send_delSecAccountAndTradeById(int id) throws org.apache.thrift.TException
    {
      delSecAccountAndTradeById_args args = new delSecAccountAndTradeById_args();
      args.setId(id);
      sendBase("delSecAccountAndTradeById", args);
    }

    public int recv_delSecAccountAndTradeById() throws org.apache.thrift.TException
    {
      delSecAccountAndTradeById_result result = new delSecAccountAndTradeById_result();
      receiveBase(result, "delSecAccountAndTradeById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delSecAccountAndTradeById failed: unknown result");
    }

    public int updateSecAccountAndTrade(SecAccountAndTradeThrift secAccountAndTradeThrift) throws org.apache.thrift.TException
    {
      send_updateSecAccountAndTrade(secAccountAndTradeThrift);
      return recv_updateSecAccountAndTrade();
    }

    public void send_updateSecAccountAndTrade(SecAccountAndTradeThrift secAccountAndTradeThrift) throws org.apache.thrift.TException
    {
      updateSecAccountAndTrade_args args = new updateSecAccountAndTrade_args();
      args.setSecAccountAndTradeThrift(secAccountAndTradeThrift);
      sendBase("updateSecAccountAndTrade", args);
    }

    public int recv_updateSecAccountAndTrade() throws org.apache.thrift.TException
    {
      updateSecAccountAndTrade_result result = new updateSecAccountAndTrade_result();
      receiveBase(result, "updateSecAccountAndTrade");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateSecAccountAndTrade failed: unknown result");
    }

    public SecAccountAndTradeThrift getSecAccountAndTradeById(int id) throws org.apache.thrift.TException
    {
      send_getSecAccountAndTradeById(id);
      return recv_getSecAccountAndTradeById();
    }

    public void send_getSecAccountAndTradeById(int id) throws org.apache.thrift.TException
    {
      getSecAccountAndTradeById_args args = new getSecAccountAndTradeById_args();
      args.setId(id);
      sendBase("getSecAccountAndTradeById", args);
    }

    public SecAccountAndTradeThrift recv_getSecAccountAndTradeById() throws org.apache.thrift.TException
    {
      getSecAccountAndTradeById_result result = new getSecAccountAndTradeById_result();
      receiveBase(result, "getSecAccountAndTradeById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSecAccountAndTradeById failed: unknown result");
    }

    public List<SecAccountAndTradeThrift> getSecAccountAndTradeList(int osType, int type) throws org.apache.thrift.TException
    {
      send_getSecAccountAndTradeList(osType, type);
      return recv_getSecAccountAndTradeList();
    }

    public void send_getSecAccountAndTradeList(int osType, int type) throws org.apache.thrift.TException
    {
      getSecAccountAndTradeList_args args = new getSecAccountAndTradeList_args();
      args.setOsType(osType);
      args.setType(type);
      sendBase("getSecAccountAndTradeList", args);
    }

    public List<SecAccountAndTradeThrift> recv_getSecAccountAndTradeList() throws org.apache.thrift.TException
    {
      getSecAccountAndTradeList_result result = new getSecAccountAndTradeList_result();
      receiveBase(result, "getSecAccountAndTradeList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSecAccountAndTradeList failed: unknown result");
    }

    public int addSecAccountRecord(SecAccountRecordThrift secAccountRecordThrift) throws org.apache.thrift.TException
    {
      send_addSecAccountRecord(secAccountRecordThrift);
      return recv_addSecAccountRecord();
    }

    public void send_addSecAccountRecord(SecAccountRecordThrift secAccountRecordThrift) throws org.apache.thrift.TException
    {
      addSecAccountRecord_args args = new addSecAccountRecord_args();
      args.setSecAccountRecordThrift(secAccountRecordThrift);
      sendBase("addSecAccountRecord", args);
    }

    public int recv_addSecAccountRecord() throws org.apache.thrift.TException
    {
      addSecAccountRecord_result result = new addSecAccountRecord_result();
      receiveBase(result, "addSecAccountRecord");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addSecAccountRecord failed: unknown result");
    }

    public SecAccountRecordThrift getSecAccountRecordById(int id) throws org.apache.thrift.TException
    {
      send_getSecAccountRecordById(id);
      return recv_getSecAccountRecordById();
    }

    public void send_getSecAccountRecordById(int id) throws org.apache.thrift.TException
    {
      getSecAccountRecordById_args args = new getSecAccountRecordById_args();
      args.setId(id);
      sendBase("getSecAccountRecordById", args);
    }

    public SecAccountRecordThrift recv_getSecAccountRecordById() throws org.apache.thrift.TException
    {
      getSecAccountRecordById_result result = new getSecAccountRecordById_result();
      receiveBase(result, "getSecAccountRecordById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSecAccountRecordById failed: unknown result");
    }

    public List<SecAccountRecordThrift> getSecAccountRecordThriftList(String phone, int secNo, long createtime) throws org.apache.thrift.TException
    {
      send_getSecAccountRecordThriftList(phone, secNo, createtime);
      return recv_getSecAccountRecordThriftList();
    }

    public void send_getSecAccountRecordThriftList(String phone, int secNo, long createtime) throws org.apache.thrift.TException
    {
      getSecAccountRecordThriftList_args args = new getSecAccountRecordThriftList_args();
      args.setPhone(phone);
      args.setSecNo(secNo);
      args.setCreatetime(createtime);
      sendBase("getSecAccountRecordThriftList", args);
    }

    public List<SecAccountRecordThrift> recv_getSecAccountRecordThriftList() throws org.apache.thrift.TException
    {
      getSecAccountRecordThriftList_result result = new getSecAccountRecordThriftList_result();
      receiveBase(result, "getSecAccountRecordThriftList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSecAccountRecordThriftList failed: unknown result");
    }

    public ByteBuffer querySecAccountRecord(String phone, int secNo, long createtime, int pageIndex, int pageSize) throws org.apache.thrift.TException
    {
      send_querySecAccountRecord(phone, secNo, createtime, pageIndex, pageSize);
      return recv_querySecAccountRecord();
    }

    public void send_querySecAccountRecord(String phone, int secNo, long createtime, int pageIndex, int pageSize) throws org.apache.thrift.TException
    {
      querySecAccountRecord_args args = new querySecAccountRecord_args();
      args.setPhone(phone);
      args.setSecNo(secNo);
      args.setCreatetime(createtime);
      args.setPageIndex(pageIndex);
      args.setPageSize(pageSize);
      sendBase("querySecAccountRecord", args);
    }

    public ByteBuffer recv_querySecAccountRecord() throws org.apache.thrift.TException
    {
      querySecAccountRecord_result result = new querySecAccountRecord_result();
      receiveBase(result, "querySecAccountRecord");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "querySecAccountRecord failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addSecAccountAndTrade(SecAccountAndTradeThrift secAccountAndTradeThrift, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addSecAccountAndTrade_call method_call = new addSecAccountAndTrade_call(secAccountAndTradeThrift, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addSecAccountAndTrade_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SecAccountAndTradeThrift secAccountAndTradeThrift;
      public addSecAccountAndTrade_call(SecAccountAndTradeThrift secAccountAndTradeThrift, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.secAccountAndTradeThrift = secAccountAndTradeThrift;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addSecAccountAndTrade", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addSecAccountAndTrade_args args = new addSecAccountAndTrade_args();
        args.setSecAccountAndTradeThrift(secAccountAndTradeThrift);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addSecAccountAndTrade();
      }
    }

    public void delSecAccountAndTradeById(int id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delSecAccountAndTradeById_call method_call = new delSecAccountAndTradeById_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delSecAccountAndTradeById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int id;
      public delSecAccountAndTradeById_call(int id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delSecAccountAndTradeById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delSecAccountAndTradeById_args args = new delSecAccountAndTradeById_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delSecAccountAndTradeById();
      }
    }

    public void updateSecAccountAndTrade(SecAccountAndTradeThrift secAccountAndTradeThrift, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateSecAccountAndTrade_call method_call = new updateSecAccountAndTrade_call(secAccountAndTradeThrift, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateSecAccountAndTrade_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SecAccountAndTradeThrift secAccountAndTradeThrift;
      public updateSecAccountAndTrade_call(SecAccountAndTradeThrift secAccountAndTradeThrift, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.secAccountAndTradeThrift = secAccountAndTradeThrift;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateSecAccountAndTrade", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateSecAccountAndTrade_args args = new updateSecAccountAndTrade_args();
        args.setSecAccountAndTradeThrift(secAccountAndTradeThrift);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateSecAccountAndTrade();
      }
    }

    public void getSecAccountAndTradeById(int id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSecAccountAndTradeById_call method_call = new getSecAccountAndTradeById_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSecAccountAndTradeById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int id;
      public getSecAccountAndTradeById_call(int id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSecAccountAndTradeById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSecAccountAndTradeById_args args = new getSecAccountAndTradeById_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SecAccountAndTradeThrift getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSecAccountAndTradeById();
      }
    }

    public void getSecAccountAndTradeList(int osType, int type, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSecAccountAndTradeList_call method_call = new getSecAccountAndTradeList_call(osType, type, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSecAccountAndTradeList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int osType;
      private int type;
      public getSecAccountAndTradeList_call(int osType, int type, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.osType = osType;
        this.type = type;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSecAccountAndTradeList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSecAccountAndTradeList_args args = new getSecAccountAndTradeList_args();
        args.setOsType(osType);
        args.setType(type);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<SecAccountAndTradeThrift> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSecAccountAndTradeList();
      }
    }

    public void addSecAccountRecord(SecAccountRecordThrift secAccountRecordThrift, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addSecAccountRecord_call method_call = new addSecAccountRecord_call(secAccountRecordThrift, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addSecAccountRecord_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SecAccountRecordThrift secAccountRecordThrift;
      public addSecAccountRecord_call(SecAccountRecordThrift secAccountRecordThrift, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.secAccountRecordThrift = secAccountRecordThrift;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addSecAccountRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addSecAccountRecord_args args = new addSecAccountRecord_args();
        args.setSecAccountRecordThrift(secAccountRecordThrift);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addSecAccountRecord();
      }
    }

    public void getSecAccountRecordById(int id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSecAccountRecordById_call method_call = new getSecAccountRecordById_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSecAccountRecordById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int id;
      public getSecAccountRecordById_call(int id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSecAccountRecordById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSecAccountRecordById_args args = new getSecAccountRecordById_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SecAccountRecordThrift getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSecAccountRecordById();
      }
    }

    public void getSecAccountRecordThriftList(String phone, int secNo, long createtime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSecAccountRecordThriftList_call method_call = new getSecAccountRecordThriftList_call(phone, secNo, createtime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSecAccountRecordThriftList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String phone;
      private int secNo;
      private long createtime;
      public getSecAccountRecordThriftList_call(String phone, int secNo, long createtime, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.phone = phone;
        this.secNo = secNo;
        this.createtime = createtime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSecAccountRecordThriftList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSecAccountRecordThriftList_args args = new getSecAccountRecordThriftList_args();
        args.setPhone(phone);
        args.setSecNo(secNo);
        args.setCreatetime(createtime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<SecAccountRecordThrift> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSecAccountRecordThriftList();
      }
    }

    public void querySecAccountRecord(String phone, int secNo, long createtime, int pageIndex, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      querySecAccountRecord_call method_call = new querySecAccountRecord_call(phone, secNo, createtime, pageIndex, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class querySecAccountRecord_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String phone;
      private int secNo;
      private long createtime;
      private int pageIndex;
      private int pageSize;
      public querySecAccountRecord_call(String phone, int secNo, long createtime, int pageIndex, int pageSize, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.phone = phone;
        this.secNo = secNo;
        this.createtime = createtime;
        this.pageIndex = pageIndex;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("querySecAccountRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        querySecAccountRecord_args args = new querySecAccountRecord_args();
        args.setPhone(phone);
        args.setSecNo(secNo);
        args.setCreatetime(createtime);
        args.setPageIndex(pageIndex);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ByteBuffer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_querySecAccountRecord();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addSecAccountAndTrade", new addSecAccountAndTrade());
      processMap.put("delSecAccountAndTradeById", new delSecAccountAndTradeById());
      processMap.put("updateSecAccountAndTrade", new updateSecAccountAndTrade());
      processMap.put("getSecAccountAndTradeById", new getSecAccountAndTradeById());
      processMap.put("getSecAccountAndTradeList", new getSecAccountAndTradeList());
      processMap.put("addSecAccountRecord", new addSecAccountRecord());
      processMap.put("getSecAccountRecordById", new getSecAccountRecordById());
      processMap.put("getSecAccountRecordThriftList", new getSecAccountRecordThriftList());
      processMap.put("querySecAccountRecord", new querySecAccountRecord());
      return processMap;
    }

    public static class addSecAccountAndTrade<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addSecAccountAndTrade_args> {
      public addSecAccountAndTrade() {
        super("addSecAccountAndTrade");
      }

      public addSecAccountAndTrade_args getEmptyArgsInstance() {
        return new addSecAccountAndTrade_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addSecAccountAndTrade_result getResult(I iface, addSecAccountAndTrade_args args) throws org.apache.thrift.TException {
        addSecAccountAndTrade_result result = new addSecAccountAndTrade_result();
        result.success = iface.addSecAccountAndTrade(args.secAccountAndTradeThrift);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class delSecAccountAndTradeById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delSecAccountAndTradeById_args> {
      public delSecAccountAndTradeById() {
        super("delSecAccountAndTradeById");
      }

      public delSecAccountAndTradeById_args getEmptyArgsInstance() {
        return new delSecAccountAndTradeById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delSecAccountAndTradeById_result getResult(I iface, delSecAccountAndTradeById_args args) throws org.apache.thrift.TException {
        delSecAccountAndTradeById_result result = new delSecAccountAndTradeById_result();
        result.success = iface.delSecAccountAndTradeById(args.id);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateSecAccountAndTrade<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateSecAccountAndTrade_args> {
      public updateSecAccountAndTrade() {
        super("updateSecAccountAndTrade");
      }

      public updateSecAccountAndTrade_args getEmptyArgsInstance() {
        return new updateSecAccountAndTrade_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateSecAccountAndTrade_result getResult(I iface, updateSecAccountAndTrade_args args) throws org.apache.thrift.TException {
        updateSecAccountAndTrade_result result = new updateSecAccountAndTrade_result();
        result.success = iface.updateSecAccountAndTrade(args.secAccountAndTradeThrift);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getSecAccountAndTradeById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSecAccountAndTradeById_args> {
      public getSecAccountAndTradeById() {
        super("getSecAccountAndTradeById");
      }

      public getSecAccountAndTradeById_args getEmptyArgsInstance() {
        return new getSecAccountAndTradeById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSecAccountAndTradeById_result getResult(I iface, getSecAccountAndTradeById_args args) throws org.apache.thrift.TException {
        getSecAccountAndTradeById_result result = new getSecAccountAndTradeById_result();
        result.success = iface.getSecAccountAndTradeById(args.id);
        return result;
      }
    }

    public static class getSecAccountAndTradeList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSecAccountAndTradeList_args> {
      public getSecAccountAndTradeList() {
        super("getSecAccountAndTradeList");
      }

      public getSecAccountAndTradeList_args getEmptyArgsInstance() {
        return new getSecAccountAndTradeList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSecAccountAndTradeList_result getResult(I iface, getSecAccountAndTradeList_args args) throws org.apache.thrift.TException {
        getSecAccountAndTradeList_result result = new getSecAccountAndTradeList_result();
        result.success = iface.getSecAccountAndTradeList(args.osType, args.type);
        return result;
      }
    }

    public static class addSecAccountRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addSecAccountRecord_args> {
      public addSecAccountRecord() {
        super("addSecAccountRecord");
      }

      public addSecAccountRecord_args getEmptyArgsInstance() {
        return new addSecAccountRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addSecAccountRecord_result getResult(I iface, addSecAccountRecord_args args) throws org.apache.thrift.TException {
        addSecAccountRecord_result result = new addSecAccountRecord_result();
        result.success = iface.addSecAccountRecord(args.secAccountRecordThrift);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getSecAccountRecordById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSecAccountRecordById_args> {
      public getSecAccountRecordById() {
        super("getSecAccountRecordById");
      }

      public getSecAccountRecordById_args getEmptyArgsInstance() {
        return new getSecAccountRecordById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSecAccountRecordById_result getResult(I iface, getSecAccountRecordById_args args) throws org.apache.thrift.TException {
        getSecAccountRecordById_result result = new getSecAccountRecordById_result();
        result.success = iface.getSecAccountRecordById(args.id);
        return result;
      }
    }

    public static class getSecAccountRecordThriftList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSecAccountRecordThriftList_args> {
      public getSecAccountRecordThriftList() {
        super("getSecAccountRecordThriftList");
      }

      public getSecAccountRecordThriftList_args getEmptyArgsInstance() {
        return new getSecAccountRecordThriftList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSecAccountRecordThriftList_result getResult(I iface, getSecAccountRecordThriftList_args args) throws org.apache.thrift.TException {
        getSecAccountRecordThriftList_result result = new getSecAccountRecordThriftList_result();
        result.success = iface.getSecAccountRecordThriftList(args.phone, args.secNo, args.createtime);
        return result;
      }
    }

    public static class querySecAccountRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, querySecAccountRecord_args> {
      public querySecAccountRecord() {
        super("querySecAccountRecord");
      }

      public querySecAccountRecord_args getEmptyArgsInstance() {
        return new querySecAccountRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public querySecAccountRecord_result getResult(I iface, querySecAccountRecord_args args) throws org.apache.thrift.TException {
        querySecAccountRecord_result result = new querySecAccountRecord_result();
        result.success = iface.querySecAccountRecord(args.phone, args.secNo, args.createtime, args.pageIndex, args.pageSize);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addSecAccountAndTrade", new addSecAccountAndTrade());
      processMap.put("delSecAccountAndTradeById", new delSecAccountAndTradeById());
      processMap.put("updateSecAccountAndTrade", new updateSecAccountAndTrade());
      processMap.put("getSecAccountAndTradeById", new getSecAccountAndTradeById());
      processMap.put("getSecAccountAndTradeList", new getSecAccountAndTradeList());
      processMap.put("addSecAccountRecord", new addSecAccountRecord());
      processMap.put("getSecAccountRecordById", new getSecAccountRecordById());
      processMap.put("getSecAccountRecordThriftList", new getSecAccountRecordThriftList());
      processMap.put("querySecAccountRecord", new querySecAccountRecord());
      return processMap;
    }

    public static class addSecAccountAndTrade<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addSecAccountAndTrade_args, Integer> {
      public addSecAccountAndTrade() {
        super("addSecAccountAndTrade");
      }

      public addSecAccountAndTrade_args getEmptyArgsInstance() {
        return new addSecAccountAndTrade_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            addSecAccountAndTrade_result result = new addSecAccountAndTrade_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addSecAccountAndTrade_result result = new addSecAccountAndTrade_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addSecAccountAndTrade_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.addSecAccountAndTrade(args.secAccountAndTradeThrift,resultHandler);
      }
    }

    public static class delSecAccountAndTradeById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delSecAccountAndTradeById_args, Integer> {
      public delSecAccountAndTradeById() {
        super("delSecAccountAndTradeById");
      }

      public delSecAccountAndTradeById_args getEmptyArgsInstance() {
        return new delSecAccountAndTradeById_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            delSecAccountAndTradeById_result result = new delSecAccountAndTradeById_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delSecAccountAndTradeById_result result = new delSecAccountAndTradeById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delSecAccountAndTradeById_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.delSecAccountAndTradeById(args.id,resultHandler);
      }
    }

    public static class updateSecAccountAndTrade<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateSecAccountAndTrade_args, Integer> {
      public updateSecAccountAndTrade() {
        super("updateSecAccountAndTrade");
      }

      public updateSecAccountAndTrade_args getEmptyArgsInstance() {
        return new updateSecAccountAndTrade_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateSecAccountAndTrade_result result = new updateSecAccountAndTrade_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateSecAccountAndTrade_result result = new updateSecAccountAndTrade_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateSecAccountAndTrade_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateSecAccountAndTrade(args.secAccountAndTradeThrift,resultHandler);
      }
    }

    public static class getSecAccountAndTradeById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSecAccountAndTradeById_args, SecAccountAndTradeThrift> {
      public getSecAccountAndTradeById() {
        super("getSecAccountAndTradeById");
      }

      public getSecAccountAndTradeById_args getEmptyArgsInstance() {
        return new getSecAccountAndTradeById_args();
      }

      public AsyncMethodCallback<SecAccountAndTradeThrift> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<SecAccountAndTradeThrift>() { 
          public void onComplete(SecAccountAndTradeThrift o) {
            getSecAccountAndTradeById_result result = new getSecAccountAndTradeById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSecAccountAndTradeById_result result = new getSecAccountAndTradeById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSecAccountAndTradeById_args args, org.apache.thrift.async.AsyncMethodCallback<SecAccountAndTradeThrift> resultHandler) throws TException {
        iface.getSecAccountAndTradeById(args.id,resultHandler);
      }
    }

    public static class getSecAccountAndTradeList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSecAccountAndTradeList_args, List<SecAccountAndTradeThrift>> {
      public getSecAccountAndTradeList() {
        super("getSecAccountAndTradeList");
      }

      public getSecAccountAndTradeList_args getEmptyArgsInstance() {
        return new getSecAccountAndTradeList_args();
      }

      public AsyncMethodCallback<List<SecAccountAndTradeThrift>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<SecAccountAndTradeThrift>>() { 
          public void onComplete(List<SecAccountAndTradeThrift> o) {
            getSecAccountAndTradeList_result result = new getSecAccountAndTradeList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSecAccountAndTradeList_result result = new getSecAccountAndTradeList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSecAccountAndTradeList_args args, org.apache.thrift.async.AsyncMethodCallback<List<SecAccountAndTradeThrift>> resultHandler) throws TException {
        iface.getSecAccountAndTradeList(args.osType, args.type,resultHandler);
      }
    }

    public static class addSecAccountRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addSecAccountRecord_args, Integer> {
      public addSecAccountRecord() {
        super("addSecAccountRecord");
      }

      public addSecAccountRecord_args getEmptyArgsInstance() {
        return new addSecAccountRecord_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            addSecAccountRecord_result result = new addSecAccountRecord_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addSecAccountRecord_result result = new addSecAccountRecord_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addSecAccountRecord_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.addSecAccountRecord(args.secAccountRecordThrift,resultHandler);
      }
    }

    public static class getSecAccountRecordById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSecAccountRecordById_args, SecAccountRecordThrift> {
      public getSecAccountRecordById() {
        super("getSecAccountRecordById");
      }

      public getSecAccountRecordById_args getEmptyArgsInstance() {
        return new getSecAccountRecordById_args();
      }

      public AsyncMethodCallback<SecAccountRecordThrift> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<SecAccountRecordThrift>() { 
          public void onComplete(SecAccountRecordThrift o) {
            getSecAccountRecordById_result result = new getSecAccountRecordById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSecAccountRecordById_result result = new getSecAccountRecordById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSecAccountRecordById_args args, org.apache.thrift.async.AsyncMethodCallback<SecAccountRecordThrift> resultHandler) throws TException {
        iface.getSecAccountRecordById(args.id,resultHandler);
      }
    }

    public static class getSecAccountRecordThriftList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSecAccountRecordThriftList_args, List<SecAccountRecordThrift>> {
      public getSecAccountRecordThriftList() {
        super("getSecAccountRecordThriftList");
      }

      public getSecAccountRecordThriftList_args getEmptyArgsInstance() {
        return new getSecAccountRecordThriftList_args();
      }

      public AsyncMethodCallback<List<SecAccountRecordThrift>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<SecAccountRecordThrift>>() { 
          public void onComplete(List<SecAccountRecordThrift> o) {
            getSecAccountRecordThriftList_result result = new getSecAccountRecordThriftList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSecAccountRecordThriftList_result result = new getSecAccountRecordThriftList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSecAccountRecordThriftList_args args, org.apache.thrift.async.AsyncMethodCallback<List<SecAccountRecordThrift>> resultHandler) throws TException {
        iface.getSecAccountRecordThriftList(args.phone, args.secNo, args.createtime,resultHandler);
      }
    }

    public static class querySecAccountRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, querySecAccountRecord_args, ByteBuffer> {
      public querySecAccountRecord() {
        super("querySecAccountRecord");
      }

      public querySecAccountRecord_args getEmptyArgsInstance() {
        return new querySecAccountRecord_args();
      }

      public AsyncMethodCallback<ByteBuffer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ByteBuffer>() { 
          public void onComplete(ByteBuffer o) {
            querySecAccountRecord_result result = new querySecAccountRecord_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            querySecAccountRecord_result result = new querySecAccountRecord_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, querySecAccountRecord_args args, org.apache.thrift.async.AsyncMethodCallback<ByteBuffer> resultHandler) throws TException {
        iface.querySecAccountRecord(args.phone, args.secNo, args.createtime, args.pageIndex, args.pageSize,resultHandler);
      }
    }

  }

  public static class addSecAccountAndTrade_args implements org.apache.thrift.TBase<addSecAccountAndTrade_args, addSecAccountAndTrade_args._Fields>, java.io.Serializable, Cloneable, Comparable<addSecAccountAndTrade_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSecAccountAndTrade_args");

    private static final org.apache.thrift.protocol.TField SEC_ACCOUNT_AND_TRADE_THRIFT_FIELD_DESC = new org.apache.thrift.protocol.TField("secAccountAndTradeThrift", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addSecAccountAndTrade_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addSecAccountAndTrade_argsTupleSchemeFactory());
    }

    public SecAccountAndTradeThrift secAccountAndTradeThrift; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SEC_ACCOUNT_AND_TRADE_THRIFT((short)1, "secAccountAndTradeThrift");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SEC_ACCOUNT_AND_TRADE_THRIFT
            return SEC_ACCOUNT_AND_TRADE_THRIFT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEC_ACCOUNT_AND_TRADE_THRIFT, new org.apache.thrift.meta_data.FieldMetaData("secAccountAndTradeThrift", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SecAccountAndTradeThrift.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSecAccountAndTrade_args.class, metaDataMap);
    }

    public addSecAccountAndTrade_args() {
    }

    public addSecAccountAndTrade_args(
      SecAccountAndTradeThrift secAccountAndTradeThrift)
    {
      this();
      this.secAccountAndTradeThrift = secAccountAndTradeThrift;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSecAccountAndTrade_args(addSecAccountAndTrade_args other) {
      if (other.isSetSecAccountAndTradeThrift()) {
        this.secAccountAndTradeThrift = new SecAccountAndTradeThrift(other.secAccountAndTradeThrift);
      }
    }

    public addSecAccountAndTrade_args deepCopy() {
      return new addSecAccountAndTrade_args(this);
    }

    @Override
    public void clear() {
      this.secAccountAndTradeThrift = null;
    }

    public SecAccountAndTradeThrift getSecAccountAndTradeThrift() {
      return this.secAccountAndTradeThrift;
    }

    public addSecAccountAndTrade_args setSecAccountAndTradeThrift(SecAccountAndTradeThrift secAccountAndTradeThrift) {
      this.secAccountAndTradeThrift = secAccountAndTradeThrift;
      return this;
    }

    public void unsetSecAccountAndTradeThrift() {
      this.secAccountAndTradeThrift = null;
    }

    /** Returns true if field secAccountAndTradeThrift is set (has been assigned a value) and false otherwise */
    public boolean isSetSecAccountAndTradeThrift() {
      return this.secAccountAndTradeThrift != null;
    }

    public void setSecAccountAndTradeThriftIsSet(boolean value) {
      if (!value) {
        this.secAccountAndTradeThrift = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SEC_ACCOUNT_AND_TRADE_THRIFT:
        if (value == null) {
          unsetSecAccountAndTradeThrift();
        } else {
          setSecAccountAndTradeThrift((SecAccountAndTradeThrift)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SEC_ACCOUNT_AND_TRADE_THRIFT:
        return getSecAccountAndTradeThrift();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SEC_ACCOUNT_AND_TRADE_THRIFT:
        return isSetSecAccountAndTradeThrift();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSecAccountAndTrade_args)
        return this.equals((addSecAccountAndTrade_args)that);
      return false;
    }

    public boolean equals(addSecAccountAndTrade_args that) {
      if (that == null)
        return false;

      boolean this_present_secAccountAndTradeThrift = true && this.isSetSecAccountAndTradeThrift();
      boolean that_present_secAccountAndTradeThrift = true && that.isSetSecAccountAndTradeThrift();
      if (this_present_secAccountAndTradeThrift || that_present_secAccountAndTradeThrift) {
        if (!(this_present_secAccountAndTradeThrift && that_present_secAccountAndTradeThrift))
          return false;
        if (!this.secAccountAndTradeThrift.equals(that.secAccountAndTradeThrift))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addSecAccountAndTrade_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSecAccountAndTradeThrift()).compareTo(other.isSetSecAccountAndTradeThrift());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecAccountAndTradeThrift()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secAccountAndTradeThrift, other.secAccountAndTradeThrift);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSecAccountAndTrade_args(");
      boolean first = true;

      sb.append("secAccountAndTradeThrift:");
      if (this.secAccountAndTradeThrift == null) {
        sb.append("null");
      } else {
        sb.append(this.secAccountAndTradeThrift);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (secAccountAndTradeThrift != null) {
        secAccountAndTradeThrift.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSecAccountAndTrade_argsStandardSchemeFactory implements SchemeFactory {
      public addSecAccountAndTrade_argsStandardScheme getScheme() {
        return new addSecAccountAndTrade_argsStandardScheme();
      }
    }

    private static class addSecAccountAndTrade_argsStandardScheme extends StandardScheme<addSecAccountAndTrade_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSecAccountAndTrade_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SEC_ACCOUNT_AND_TRADE_THRIFT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.secAccountAndTradeThrift = new SecAccountAndTradeThrift();
                struct.secAccountAndTradeThrift.read(iprot);
                struct.setSecAccountAndTradeThriftIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSecAccountAndTrade_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.secAccountAndTradeThrift != null) {
          oprot.writeFieldBegin(SEC_ACCOUNT_AND_TRADE_THRIFT_FIELD_DESC);
          struct.secAccountAndTradeThrift.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSecAccountAndTrade_argsTupleSchemeFactory implements SchemeFactory {
      public addSecAccountAndTrade_argsTupleScheme getScheme() {
        return new addSecAccountAndTrade_argsTupleScheme();
      }
    }

    private static class addSecAccountAndTrade_argsTupleScheme extends TupleScheme<addSecAccountAndTrade_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSecAccountAndTrade_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSecAccountAndTradeThrift()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSecAccountAndTradeThrift()) {
          struct.secAccountAndTradeThrift.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSecAccountAndTrade_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.secAccountAndTradeThrift = new SecAccountAndTradeThrift();
          struct.secAccountAndTradeThrift.read(iprot);
          struct.setSecAccountAndTradeThriftIsSet(true);
        }
      }
    }

  }

  public static class addSecAccountAndTrade_result implements org.apache.thrift.TBase<addSecAccountAndTrade_result, addSecAccountAndTrade_result._Fields>, java.io.Serializable, Cloneable, Comparable<addSecAccountAndTrade_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSecAccountAndTrade_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addSecAccountAndTrade_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addSecAccountAndTrade_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSecAccountAndTrade_result.class, metaDataMap);
    }

    public addSecAccountAndTrade_result() {
    }

    public addSecAccountAndTrade_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSecAccountAndTrade_result(addSecAccountAndTrade_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addSecAccountAndTrade_result deepCopy() {
      return new addSecAccountAndTrade_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public addSecAccountAndTrade_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSecAccountAndTrade_result)
        return this.equals((addSecAccountAndTrade_result)that);
      return false;
    }

    public boolean equals(addSecAccountAndTrade_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addSecAccountAndTrade_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSecAccountAndTrade_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSecAccountAndTrade_resultStandardSchemeFactory implements SchemeFactory {
      public addSecAccountAndTrade_resultStandardScheme getScheme() {
        return new addSecAccountAndTrade_resultStandardScheme();
      }
    }

    private static class addSecAccountAndTrade_resultStandardScheme extends StandardScheme<addSecAccountAndTrade_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSecAccountAndTrade_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSecAccountAndTrade_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSecAccountAndTrade_resultTupleSchemeFactory implements SchemeFactory {
      public addSecAccountAndTrade_resultTupleScheme getScheme() {
        return new addSecAccountAndTrade_resultTupleScheme();
      }
    }

    private static class addSecAccountAndTrade_resultTupleScheme extends TupleScheme<addSecAccountAndTrade_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSecAccountAndTrade_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSecAccountAndTrade_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delSecAccountAndTradeById_args implements org.apache.thrift.TBase<delSecAccountAndTradeById_args, delSecAccountAndTradeById_args._Fields>, java.io.Serializable, Cloneable, Comparable<delSecAccountAndTradeById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delSecAccountAndTradeById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delSecAccountAndTradeById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delSecAccountAndTradeById_argsTupleSchemeFactory());
    }

    public int id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delSecAccountAndTradeById_args.class, metaDataMap);
    }

    public delSecAccountAndTradeById_args() {
    }

    public delSecAccountAndTradeById_args(
      int id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delSecAccountAndTradeById_args(delSecAccountAndTradeById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
    }

    public delSecAccountAndTradeById_args deepCopy() {
      return new delSecAccountAndTradeById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public int getId() {
      return this.id;
    }

    public delSecAccountAndTradeById_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Integer.valueOf(getId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delSecAccountAndTradeById_args)
        return this.equals((delSecAccountAndTradeById_args)that);
      return false;
    }

    public boolean equals(delSecAccountAndTradeById_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(delSecAccountAndTradeById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delSecAccountAndTradeById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delSecAccountAndTradeById_argsStandardSchemeFactory implements SchemeFactory {
      public delSecAccountAndTradeById_argsStandardScheme getScheme() {
        return new delSecAccountAndTradeById_argsStandardScheme();
      }
    }

    private static class delSecAccountAndTradeById_argsStandardScheme extends StandardScheme<delSecAccountAndTradeById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delSecAccountAndTradeById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delSecAccountAndTradeById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delSecAccountAndTradeById_argsTupleSchemeFactory implements SchemeFactory {
      public delSecAccountAndTradeById_argsTupleScheme getScheme() {
        return new delSecAccountAndTradeById_argsTupleScheme();
      }
    }

    private static class delSecAccountAndTradeById_argsTupleScheme extends TupleScheme<delSecAccountAndTradeById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delSecAccountAndTradeById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delSecAccountAndTradeById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class delSecAccountAndTradeById_result implements org.apache.thrift.TBase<delSecAccountAndTradeById_result, delSecAccountAndTradeById_result._Fields>, java.io.Serializable, Cloneable, Comparable<delSecAccountAndTradeById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delSecAccountAndTradeById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delSecAccountAndTradeById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delSecAccountAndTradeById_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delSecAccountAndTradeById_result.class, metaDataMap);
    }

    public delSecAccountAndTradeById_result() {
    }

    public delSecAccountAndTradeById_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delSecAccountAndTradeById_result(delSecAccountAndTradeById_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public delSecAccountAndTradeById_result deepCopy() {
      return new delSecAccountAndTradeById_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public delSecAccountAndTradeById_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delSecAccountAndTradeById_result)
        return this.equals((delSecAccountAndTradeById_result)that);
      return false;
    }

    public boolean equals(delSecAccountAndTradeById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(delSecAccountAndTradeById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delSecAccountAndTradeById_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delSecAccountAndTradeById_resultStandardSchemeFactory implements SchemeFactory {
      public delSecAccountAndTradeById_resultStandardScheme getScheme() {
        return new delSecAccountAndTradeById_resultStandardScheme();
      }
    }

    private static class delSecAccountAndTradeById_resultStandardScheme extends StandardScheme<delSecAccountAndTradeById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delSecAccountAndTradeById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delSecAccountAndTradeById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delSecAccountAndTradeById_resultTupleSchemeFactory implements SchemeFactory {
      public delSecAccountAndTradeById_resultTupleScheme getScheme() {
        return new delSecAccountAndTradeById_resultTupleScheme();
      }
    }

    private static class delSecAccountAndTradeById_resultTupleScheme extends TupleScheme<delSecAccountAndTradeById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delSecAccountAndTradeById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delSecAccountAndTradeById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateSecAccountAndTrade_args implements org.apache.thrift.TBase<updateSecAccountAndTrade_args, updateSecAccountAndTrade_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateSecAccountAndTrade_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSecAccountAndTrade_args");

    private static final org.apache.thrift.protocol.TField SEC_ACCOUNT_AND_TRADE_THRIFT_FIELD_DESC = new org.apache.thrift.protocol.TField("secAccountAndTradeThrift", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSecAccountAndTrade_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSecAccountAndTrade_argsTupleSchemeFactory());
    }

    public SecAccountAndTradeThrift secAccountAndTradeThrift; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SEC_ACCOUNT_AND_TRADE_THRIFT((short)1, "secAccountAndTradeThrift");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SEC_ACCOUNT_AND_TRADE_THRIFT
            return SEC_ACCOUNT_AND_TRADE_THRIFT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEC_ACCOUNT_AND_TRADE_THRIFT, new org.apache.thrift.meta_data.FieldMetaData("secAccountAndTradeThrift", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SecAccountAndTradeThrift.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSecAccountAndTrade_args.class, metaDataMap);
    }

    public updateSecAccountAndTrade_args() {
    }

    public updateSecAccountAndTrade_args(
      SecAccountAndTradeThrift secAccountAndTradeThrift)
    {
      this();
      this.secAccountAndTradeThrift = secAccountAndTradeThrift;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSecAccountAndTrade_args(updateSecAccountAndTrade_args other) {
      if (other.isSetSecAccountAndTradeThrift()) {
        this.secAccountAndTradeThrift = new SecAccountAndTradeThrift(other.secAccountAndTradeThrift);
      }
    }

    public updateSecAccountAndTrade_args deepCopy() {
      return new updateSecAccountAndTrade_args(this);
    }

    @Override
    public void clear() {
      this.secAccountAndTradeThrift = null;
    }

    public SecAccountAndTradeThrift getSecAccountAndTradeThrift() {
      return this.secAccountAndTradeThrift;
    }

    public updateSecAccountAndTrade_args setSecAccountAndTradeThrift(SecAccountAndTradeThrift secAccountAndTradeThrift) {
      this.secAccountAndTradeThrift = secAccountAndTradeThrift;
      return this;
    }

    public void unsetSecAccountAndTradeThrift() {
      this.secAccountAndTradeThrift = null;
    }

    /** Returns true if field secAccountAndTradeThrift is set (has been assigned a value) and false otherwise */
    public boolean isSetSecAccountAndTradeThrift() {
      return this.secAccountAndTradeThrift != null;
    }

    public void setSecAccountAndTradeThriftIsSet(boolean value) {
      if (!value) {
        this.secAccountAndTradeThrift = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SEC_ACCOUNT_AND_TRADE_THRIFT:
        if (value == null) {
          unsetSecAccountAndTradeThrift();
        } else {
          setSecAccountAndTradeThrift((SecAccountAndTradeThrift)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SEC_ACCOUNT_AND_TRADE_THRIFT:
        return getSecAccountAndTradeThrift();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SEC_ACCOUNT_AND_TRADE_THRIFT:
        return isSetSecAccountAndTradeThrift();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSecAccountAndTrade_args)
        return this.equals((updateSecAccountAndTrade_args)that);
      return false;
    }

    public boolean equals(updateSecAccountAndTrade_args that) {
      if (that == null)
        return false;

      boolean this_present_secAccountAndTradeThrift = true && this.isSetSecAccountAndTradeThrift();
      boolean that_present_secAccountAndTradeThrift = true && that.isSetSecAccountAndTradeThrift();
      if (this_present_secAccountAndTradeThrift || that_present_secAccountAndTradeThrift) {
        if (!(this_present_secAccountAndTradeThrift && that_present_secAccountAndTradeThrift))
          return false;
        if (!this.secAccountAndTradeThrift.equals(that.secAccountAndTradeThrift))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateSecAccountAndTrade_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSecAccountAndTradeThrift()).compareTo(other.isSetSecAccountAndTradeThrift());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecAccountAndTradeThrift()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secAccountAndTradeThrift, other.secAccountAndTradeThrift);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSecAccountAndTrade_args(");
      boolean first = true;

      sb.append("secAccountAndTradeThrift:");
      if (this.secAccountAndTradeThrift == null) {
        sb.append("null");
      } else {
        sb.append(this.secAccountAndTradeThrift);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (secAccountAndTradeThrift != null) {
        secAccountAndTradeThrift.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSecAccountAndTrade_argsStandardSchemeFactory implements SchemeFactory {
      public updateSecAccountAndTrade_argsStandardScheme getScheme() {
        return new updateSecAccountAndTrade_argsStandardScheme();
      }
    }

    private static class updateSecAccountAndTrade_argsStandardScheme extends StandardScheme<updateSecAccountAndTrade_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSecAccountAndTrade_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SEC_ACCOUNT_AND_TRADE_THRIFT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.secAccountAndTradeThrift = new SecAccountAndTradeThrift();
                struct.secAccountAndTradeThrift.read(iprot);
                struct.setSecAccountAndTradeThriftIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSecAccountAndTrade_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.secAccountAndTradeThrift != null) {
          oprot.writeFieldBegin(SEC_ACCOUNT_AND_TRADE_THRIFT_FIELD_DESC);
          struct.secAccountAndTradeThrift.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSecAccountAndTrade_argsTupleSchemeFactory implements SchemeFactory {
      public updateSecAccountAndTrade_argsTupleScheme getScheme() {
        return new updateSecAccountAndTrade_argsTupleScheme();
      }
    }

    private static class updateSecAccountAndTrade_argsTupleScheme extends TupleScheme<updateSecAccountAndTrade_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSecAccountAndTrade_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSecAccountAndTradeThrift()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSecAccountAndTradeThrift()) {
          struct.secAccountAndTradeThrift.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSecAccountAndTrade_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.secAccountAndTradeThrift = new SecAccountAndTradeThrift();
          struct.secAccountAndTradeThrift.read(iprot);
          struct.setSecAccountAndTradeThriftIsSet(true);
        }
      }
    }

  }

  public static class updateSecAccountAndTrade_result implements org.apache.thrift.TBase<updateSecAccountAndTrade_result, updateSecAccountAndTrade_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateSecAccountAndTrade_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSecAccountAndTrade_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSecAccountAndTrade_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSecAccountAndTrade_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSecAccountAndTrade_result.class, metaDataMap);
    }

    public updateSecAccountAndTrade_result() {
    }

    public updateSecAccountAndTrade_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSecAccountAndTrade_result(updateSecAccountAndTrade_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateSecAccountAndTrade_result deepCopy() {
      return new updateSecAccountAndTrade_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateSecAccountAndTrade_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSecAccountAndTrade_result)
        return this.equals((updateSecAccountAndTrade_result)that);
      return false;
    }

    public boolean equals(updateSecAccountAndTrade_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateSecAccountAndTrade_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSecAccountAndTrade_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSecAccountAndTrade_resultStandardSchemeFactory implements SchemeFactory {
      public updateSecAccountAndTrade_resultStandardScheme getScheme() {
        return new updateSecAccountAndTrade_resultStandardScheme();
      }
    }

    private static class updateSecAccountAndTrade_resultStandardScheme extends StandardScheme<updateSecAccountAndTrade_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSecAccountAndTrade_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSecAccountAndTrade_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSecAccountAndTrade_resultTupleSchemeFactory implements SchemeFactory {
      public updateSecAccountAndTrade_resultTupleScheme getScheme() {
        return new updateSecAccountAndTrade_resultTupleScheme();
      }
    }

    private static class updateSecAccountAndTrade_resultTupleScheme extends TupleScheme<updateSecAccountAndTrade_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSecAccountAndTrade_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSecAccountAndTrade_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSecAccountAndTradeById_args implements org.apache.thrift.TBase<getSecAccountAndTradeById_args, getSecAccountAndTradeById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSecAccountAndTradeById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSecAccountAndTradeById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSecAccountAndTradeById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSecAccountAndTradeById_argsTupleSchemeFactory());
    }

    public int id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSecAccountAndTradeById_args.class, metaDataMap);
    }

    public getSecAccountAndTradeById_args() {
    }

    public getSecAccountAndTradeById_args(
      int id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSecAccountAndTradeById_args(getSecAccountAndTradeById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
    }

    public getSecAccountAndTradeById_args deepCopy() {
      return new getSecAccountAndTradeById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public int getId() {
      return this.id;
    }

    public getSecAccountAndTradeById_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Integer.valueOf(getId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSecAccountAndTradeById_args)
        return this.equals((getSecAccountAndTradeById_args)that);
      return false;
    }

    public boolean equals(getSecAccountAndTradeById_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSecAccountAndTradeById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSecAccountAndTradeById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSecAccountAndTradeById_argsStandardSchemeFactory implements SchemeFactory {
      public getSecAccountAndTradeById_argsStandardScheme getScheme() {
        return new getSecAccountAndTradeById_argsStandardScheme();
      }
    }

    private static class getSecAccountAndTradeById_argsStandardScheme extends StandardScheme<getSecAccountAndTradeById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSecAccountAndTradeById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSecAccountAndTradeById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSecAccountAndTradeById_argsTupleSchemeFactory implements SchemeFactory {
      public getSecAccountAndTradeById_argsTupleScheme getScheme() {
        return new getSecAccountAndTradeById_argsTupleScheme();
      }
    }

    private static class getSecAccountAndTradeById_argsTupleScheme extends TupleScheme<getSecAccountAndTradeById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSecAccountAndTradeById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSecAccountAndTradeById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class getSecAccountAndTradeById_result implements org.apache.thrift.TBase<getSecAccountAndTradeById_result, getSecAccountAndTradeById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSecAccountAndTradeById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSecAccountAndTradeById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSecAccountAndTradeById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSecAccountAndTradeById_resultTupleSchemeFactory());
    }

    public SecAccountAndTradeThrift success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SecAccountAndTradeThrift.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSecAccountAndTradeById_result.class, metaDataMap);
    }

    public getSecAccountAndTradeById_result() {
    }

    public getSecAccountAndTradeById_result(
      SecAccountAndTradeThrift success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSecAccountAndTradeById_result(getSecAccountAndTradeById_result other) {
      if (other.isSetSuccess()) {
        this.success = new SecAccountAndTradeThrift(other.success);
      }
    }

    public getSecAccountAndTradeById_result deepCopy() {
      return new getSecAccountAndTradeById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public SecAccountAndTradeThrift getSuccess() {
      return this.success;
    }

    public getSecAccountAndTradeById_result setSuccess(SecAccountAndTradeThrift success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SecAccountAndTradeThrift)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSecAccountAndTradeById_result)
        return this.equals((getSecAccountAndTradeById_result)that);
      return false;
    }

    public boolean equals(getSecAccountAndTradeById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSecAccountAndTradeById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSecAccountAndTradeById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSecAccountAndTradeById_resultStandardSchemeFactory implements SchemeFactory {
      public getSecAccountAndTradeById_resultStandardScheme getScheme() {
        return new getSecAccountAndTradeById_resultStandardScheme();
      }
    }

    private static class getSecAccountAndTradeById_resultStandardScheme extends StandardScheme<getSecAccountAndTradeById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSecAccountAndTradeById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SecAccountAndTradeThrift();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSecAccountAndTradeById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSecAccountAndTradeById_resultTupleSchemeFactory implements SchemeFactory {
      public getSecAccountAndTradeById_resultTupleScheme getScheme() {
        return new getSecAccountAndTradeById_resultTupleScheme();
      }
    }

    private static class getSecAccountAndTradeById_resultTupleScheme extends TupleScheme<getSecAccountAndTradeById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSecAccountAndTradeById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSecAccountAndTradeById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new SecAccountAndTradeThrift();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSecAccountAndTradeList_args implements org.apache.thrift.TBase<getSecAccountAndTradeList_args, getSecAccountAndTradeList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSecAccountAndTradeList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSecAccountAndTradeList_args");

    private static final org.apache.thrift.protocol.TField OS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("osType", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSecAccountAndTradeList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSecAccountAndTradeList_argsTupleSchemeFactory());
    }

    public int osType; // required
    public int type; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OS_TYPE((short)1, "osType"),
      TYPE((short)2, "type");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OS_TYPE
            return OS_TYPE;
          case 2: // TYPE
            return TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __OSTYPE_ISSET_ID = 0;
    private static final int __TYPE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("osType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSecAccountAndTradeList_args.class, metaDataMap);
    }

    public getSecAccountAndTradeList_args() {
    }

    public getSecAccountAndTradeList_args(
      int osType,
      int type)
    {
      this();
      this.osType = osType;
      setOsTypeIsSet(true);
      this.type = type;
      setTypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSecAccountAndTradeList_args(getSecAccountAndTradeList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.osType = other.osType;
      this.type = other.type;
    }

    public getSecAccountAndTradeList_args deepCopy() {
      return new getSecAccountAndTradeList_args(this);
    }

    @Override
    public void clear() {
      setOsTypeIsSet(false);
      this.osType = 0;
      setTypeIsSet(false);
      this.type = 0;
    }

    public int getOsType() {
      return this.osType;
    }

    public getSecAccountAndTradeList_args setOsType(int osType) {
      this.osType = osType;
      setOsTypeIsSet(true);
      return this;
    }

    public void unsetOsType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OSTYPE_ISSET_ID);
    }

    /** Returns true if field osType is set (has been assigned a value) and false otherwise */
    public boolean isSetOsType() {
      return EncodingUtils.testBit(__isset_bitfield, __OSTYPE_ISSET_ID);
    }

    public void setOsTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OSTYPE_ISSET_ID, value);
    }

    public int getType() {
      return this.type;
    }

    public getSecAccountAndTradeList_args setType(int type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OS_TYPE:
        if (value == null) {
          unsetOsType();
        } else {
          setOsType((Integer)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OS_TYPE:
        return Integer.valueOf(getOsType());

      case TYPE:
        return Integer.valueOf(getType());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OS_TYPE:
        return isSetOsType();
      case TYPE:
        return isSetType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSecAccountAndTradeList_args)
        return this.equals((getSecAccountAndTradeList_args)that);
      return false;
    }

    public boolean equals(getSecAccountAndTradeList_args that) {
      if (that == null)
        return false;

      boolean this_present_osType = true;
      boolean that_present_osType = true;
      if (this_present_osType || that_present_osType) {
        if (!(this_present_osType && that_present_osType))
          return false;
        if (this.osType != that.osType)
          return false;
      }

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSecAccountAndTradeList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOsType()).compareTo(other.isSetOsType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOsType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.osType, other.osType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSecAccountAndTradeList_args(");
      boolean first = true;

      sb.append("osType:");
      sb.append(this.osType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSecAccountAndTradeList_argsStandardSchemeFactory implements SchemeFactory {
      public getSecAccountAndTradeList_argsStandardScheme getScheme() {
        return new getSecAccountAndTradeList_argsStandardScheme();
      }
    }

    private static class getSecAccountAndTradeList_argsStandardScheme extends StandardScheme<getSecAccountAndTradeList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSecAccountAndTradeList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OS_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.osType = iprot.readI32();
                struct.setOsTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = iprot.readI32();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSecAccountAndTradeList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(OS_TYPE_FIELD_DESC);
        oprot.writeI32(struct.osType);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSecAccountAndTradeList_argsTupleSchemeFactory implements SchemeFactory {
      public getSecAccountAndTradeList_argsTupleScheme getScheme() {
        return new getSecAccountAndTradeList_argsTupleScheme();
      }
    }

    private static class getSecAccountAndTradeList_argsTupleScheme extends TupleScheme<getSecAccountAndTradeList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSecAccountAndTradeList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOsType()) {
          optionals.set(0);
        }
        if (struct.isSetType()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOsType()) {
          oprot.writeI32(struct.osType);
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSecAccountAndTradeList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.osType = iprot.readI32();
          struct.setOsTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.type = iprot.readI32();
          struct.setTypeIsSet(true);
        }
      }
    }

  }

  public static class getSecAccountAndTradeList_result implements org.apache.thrift.TBase<getSecAccountAndTradeList_result, getSecAccountAndTradeList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSecAccountAndTradeList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSecAccountAndTradeList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSecAccountAndTradeList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSecAccountAndTradeList_resultTupleSchemeFactory());
    }

    public List<SecAccountAndTradeThrift> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SecAccountAndTradeThrift.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSecAccountAndTradeList_result.class, metaDataMap);
    }

    public getSecAccountAndTradeList_result() {
    }

    public getSecAccountAndTradeList_result(
      List<SecAccountAndTradeThrift> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSecAccountAndTradeList_result(getSecAccountAndTradeList_result other) {
      if (other.isSetSuccess()) {
        List<SecAccountAndTradeThrift> __this__success = new ArrayList<SecAccountAndTradeThrift>(other.success.size());
        for (SecAccountAndTradeThrift other_element : other.success) {
          __this__success.add(new SecAccountAndTradeThrift(other_element));
        }
        this.success = __this__success;
      }
    }

    public getSecAccountAndTradeList_result deepCopy() {
      return new getSecAccountAndTradeList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SecAccountAndTradeThrift> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SecAccountAndTradeThrift elem) {
      if (this.success == null) {
        this.success = new ArrayList<SecAccountAndTradeThrift>();
      }
      this.success.add(elem);
    }

    public List<SecAccountAndTradeThrift> getSuccess() {
      return this.success;
    }

    public getSecAccountAndTradeList_result setSuccess(List<SecAccountAndTradeThrift> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<SecAccountAndTradeThrift>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSecAccountAndTradeList_result)
        return this.equals((getSecAccountAndTradeList_result)that);
      return false;
    }

    public boolean equals(getSecAccountAndTradeList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSecAccountAndTradeList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSecAccountAndTradeList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSecAccountAndTradeList_resultStandardSchemeFactory implements SchemeFactory {
      public getSecAccountAndTradeList_resultStandardScheme getScheme() {
        return new getSecAccountAndTradeList_resultStandardScheme();
      }
    }

    private static class getSecAccountAndTradeList_resultStandardScheme extends StandardScheme<getSecAccountAndTradeList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSecAccountAndTradeList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list172 = iprot.readListBegin();
                  struct.success = new ArrayList<SecAccountAndTradeThrift>(_list172.size);
                  for (int _i173 = 0; _i173 < _list172.size; ++_i173)
                  {
                    SecAccountAndTradeThrift _elem174;
                    _elem174 = new SecAccountAndTradeThrift();
                    _elem174.read(iprot);
                    struct.success.add(_elem174);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSecAccountAndTradeList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SecAccountAndTradeThrift _iter175 : struct.success)
            {
              _iter175.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSecAccountAndTradeList_resultTupleSchemeFactory implements SchemeFactory {
      public getSecAccountAndTradeList_resultTupleScheme getScheme() {
        return new getSecAccountAndTradeList_resultTupleScheme();
      }
    }

    private static class getSecAccountAndTradeList_resultTupleScheme extends TupleScheme<getSecAccountAndTradeList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSecAccountAndTradeList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SecAccountAndTradeThrift _iter176 : struct.success)
            {
              _iter176.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSecAccountAndTradeList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list177 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<SecAccountAndTradeThrift>(_list177.size);
            for (int _i178 = 0; _i178 < _list177.size; ++_i178)
            {
              SecAccountAndTradeThrift _elem179;
              _elem179 = new SecAccountAndTradeThrift();
              _elem179.read(iprot);
              struct.success.add(_elem179);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addSecAccountRecord_args implements org.apache.thrift.TBase<addSecAccountRecord_args, addSecAccountRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<addSecAccountRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSecAccountRecord_args");

    private static final org.apache.thrift.protocol.TField SEC_ACCOUNT_RECORD_THRIFT_FIELD_DESC = new org.apache.thrift.protocol.TField("secAccountRecordThrift", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addSecAccountRecord_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addSecAccountRecord_argsTupleSchemeFactory());
    }

    public SecAccountRecordThrift secAccountRecordThrift; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SEC_ACCOUNT_RECORD_THRIFT((short)1, "secAccountRecordThrift");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SEC_ACCOUNT_RECORD_THRIFT
            return SEC_ACCOUNT_RECORD_THRIFT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEC_ACCOUNT_RECORD_THRIFT, new org.apache.thrift.meta_data.FieldMetaData("secAccountRecordThrift", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SecAccountRecordThrift.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSecAccountRecord_args.class, metaDataMap);
    }

    public addSecAccountRecord_args() {
    }

    public addSecAccountRecord_args(
      SecAccountRecordThrift secAccountRecordThrift)
    {
      this();
      this.secAccountRecordThrift = secAccountRecordThrift;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSecAccountRecord_args(addSecAccountRecord_args other) {
      if (other.isSetSecAccountRecordThrift()) {
        this.secAccountRecordThrift = new SecAccountRecordThrift(other.secAccountRecordThrift);
      }
    }

    public addSecAccountRecord_args deepCopy() {
      return new addSecAccountRecord_args(this);
    }

    @Override
    public void clear() {
      this.secAccountRecordThrift = null;
    }

    public SecAccountRecordThrift getSecAccountRecordThrift() {
      return this.secAccountRecordThrift;
    }

    public addSecAccountRecord_args setSecAccountRecordThrift(SecAccountRecordThrift secAccountRecordThrift) {
      this.secAccountRecordThrift = secAccountRecordThrift;
      return this;
    }

    public void unsetSecAccountRecordThrift() {
      this.secAccountRecordThrift = null;
    }

    /** Returns true if field secAccountRecordThrift is set (has been assigned a value) and false otherwise */
    public boolean isSetSecAccountRecordThrift() {
      return this.secAccountRecordThrift != null;
    }

    public void setSecAccountRecordThriftIsSet(boolean value) {
      if (!value) {
        this.secAccountRecordThrift = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SEC_ACCOUNT_RECORD_THRIFT:
        if (value == null) {
          unsetSecAccountRecordThrift();
        } else {
          setSecAccountRecordThrift((SecAccountRecordThrift)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SEC_ACCOUNT_RECORD_THRIFT:
        return getSecAccountRecordThrift();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SEC_ACCOUNT_RECORD_THRIFT:
        return isSetSecAccountRecordThrift();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSecAccountRecord_args)
        return this.equals((addSecAccountRecord_args)that);
      return false;
    }

    public boolean equals(addSecAccountRecord_args that) {
      if (that == null)
        return false;

      boolean this_present_secAccountRecordThrift = true && this.isSetSecAccountRecordThrift();
      boolean that_present_secAccountRecordThrift = true && that.isSetSecAccountRecordThrift();
      if (this_present_secAccountRecordThrift || that_present_secAccountRecordThrift) {
        if (!(this_present_secAccountRecordThrift && that_present_secAccountRecordThrift))
          return false;
        if (!this.secAccountRecordThrift.equals(that.secAccountRecordThrift))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addSecAccountRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSecAccountRecordThrift()).compareTo(other.isSetSecAccountRecordThrift());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecAccountRecordThrift()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secAccountRecordThrift, other.secAccountRecordThrift);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSecAccountRecord_args(");
      boolean first = true;

      sb.append("secAccountRecordThrift:");
      if (this.secAccountRecordThrift == null) {
        sb.append("null");
      } else {
        sb.append(this.secAccountRecordThrift);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (secAccountRecordThrift != null) {
        secAccountRecordThrift.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSecAccountRecord_argsStandardSchemeFactory implements SchemeFactory {
      public addSecAccountRecord_argsStandardScheme getScheme() {
        return new addSecAccountRecord_argsStandardScheme();
      }
    }

    private static class addSecAccountRecord_argsStandardScheme extends StandardScheme<addSecAccountRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSecAccountRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SEC_ACCOUNT_RECORD_THRIFT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.secAccountRecordThrift = new SecAccountRecordThrift();
                struct.secAccountRecordThrift.read(iprot);
                struct.setSecAccountRecordThriftIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSecAccountRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.secAccountRecordThrift != null) {
          oprot.writeFieldBegin(SEC_ACCOUNT_RECORD_THRIFT_FIELD_DESC);
          struct.secAccountRecordThrift.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSecAccountRecord_argsTupleSchemeFactory implements SchemeFactory {
      public addSecAccountRecord_argsTupleScheme getScheme() {
        return new addSecAccountRecord_argsTupleScheme();
      }
    }

    private static class addSecAccountRecord_argsTupleScheme extends TupleScheme<addSecAccountRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSecAccountRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSecAccountRecordThrift()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSecAccountRecordThrift()) {
          struct.secAccountRecordThrift.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSecAccountRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.secAccountRecordThrift = new SecAccountRecordThrift();
          struct.secAccountRecordThrift.read(iprot);
          struct.setSecAccountRecordThriftIsSet(true);
        }
      }
    }

  }

  public static class addSecAccountRecord_result implements org.apache.thrift.TBase<addSecAccountRecord_result, addSecAccountRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<addSecAccountRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSecAccountRecord_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addSecAccountRecord_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addSecAccountRecord_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSecAccountRecord_result.class, metaDataMap);
    }

    public addSecAccountRecord_result() {
    }

    public addSecAccountRecord_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSecAccountRecord_result(addSecAccountRecord_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addSecAccountRecord_result deepCopy() {
      return new addSecAccountRecord_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public addSecAccountRecord_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSecAccountRecord_result)
        return this.equals((addSecAccountRecord_result)that);
      return false;
    }

    public boolean equals(addSecAccountRecord_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addSecAccountRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSecAccountRecord_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSecAccountRecord_resultStandardSchemeFactory implements SchemeFactory {
      public addSecAccountRecord_resultStandardScheme getScheme() {
        return new addSecAccountRecord_resultStandardScheme();
      }
    }

    private static class addSecAccountRecord_resultStandardScheme extends StandardScheme<addSecAccountRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSecAccountRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSecAccountRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSecAccountRecord_resultTupleSchemeFactory implements SchemeFactory {
      public addSecAccountRecord_resultTupleScheme getScheme() {
        return new addSecAccountRecord_resultTupleScheme();
      }
    }

    private static class addSecAccountRecord_resultTupleScheme extends TupleScheme<addSecAccountRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSecAccountRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSecAccountRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSecAccountRecordById_args implements org.apache.thrift.TBase<getSecAccountRecordById_args, getSecAccountRecordById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSecAccountRecordById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSecAccountRecordById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSecAccountRecordById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSecAccountRecordById_argsTupleSchemeFactory());
    }

    public int id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSecAccountRecordById_args.class, metaDataMap);
    }

    public getSecAccountRecordById_args() {
    }

    public getSecAccountRecordById_args(
      int id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSecAccountRecordById_args(getSecAccountRecordById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
    }

    public getSecAccountRecordById_args deepCopy() {
      return new getSecAccountRecordById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public int getId() {
      return this.id;
    }

    public getSecAccountRecordById_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Integer.valueOf(getId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSecAccountRecordById_args)
        return this.equals((getSecAccountRecordById_args)that);
      return false;
    }

    public boolean equals(getSecAccountRecordById_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSecAccountRecordById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSecAccountRecordById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSecAccountRecordById_argsStandardSchemeFactory implements SchemeFactory {
      public getSecAccountRecordById_argsStandardScheme getScheme() {
        return new getSecAccountRecordById_argsStandardScheme();
      }
    }

    private static class getSecAccountRecordById_argsStandardScheme extends StandardScheme<getSecAccountRecordById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSecAccountRecordById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSecAccountRecordById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSecAccountRecordById_argsTupleSchemeFactory implements SchemeFactory {
      public getSecAccountRecordById_argsTupleScheme getScheme() {
        return new getSecAccountRecordById_argsTupleScheme();
      }
    }

    private static class getSecAccountRecordById_argsTupleScheme extends TupleScheme<getSecAccountRecordById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSecAccountRecordById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSecAccountRecordById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class getSecAccountRecordById_result implements org.apache.thrift.TBase<getSecAccountRecordById_result, getSecAccountRecordById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSecAccountRecordById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSecAccountRecordById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSecAccountRecordById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSecAccountRecordById_resultTupleSchemeFactory());
    }

    public SecAccountRecordThrift success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SecAccountRecordThrift.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSecAccountRecordById_result.class, metaDataMap);
    }

    public getSecAccountRecordById_result() {
    }

    public getSecAccountRecordById_result(
      SecAccountRecordThrift success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSecAccountRecordById_result(getSecAccountRecordById_result other) {
      if (other.isSetSuccess()) {
        this.success = new SecAccountRecordThrift(other.success);
      }
    }

    public getSecAccountRecordById_result deepCopy() {
      return new getSecAccountRecordById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public SecAccountRecordThrift getSuccess() {
      return this.success;
    }

    public getSecAccountRecordById_result setSuccess(SecAccountRecordThrift success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SecAccountRecordThrift)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSecAccountRecordById_result)
        return this.equals((getSecAccountRecordById_result)that);
      return false;
    }

    public boolean equals(getSecAccountRecordById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSecAccountRecordById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSecAccountRecordById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSecAccountRecordById_resultStandardSchemeFactory implements SchemeFactory {
      public getSecAccountRecordById_resultStandardScheme getScheme() {
        return new getSecAccountRecordById_resultStandardScheme();
      }
    }

    private static class getSecAccountRecordById_resultStandardScheme extends StandardScheme<getSecAccountRecordById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSecAccountRecordById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SecAccountRecordThrift();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSecAccountRecordById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSecAccountRecordById_resultTupleSchemeFactory implements SchemeFactory {
      public getSecAccountRecordById_resultTupleScheme getScheme() {
        return new getSecAccountRecordById_resultTupleScheme();
      }
    }

    private static class getSecAccountRecordById_resultTupleScheme extends TupleScheme<getSecAccountRecordById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSecAccountRecordById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSecAccountRecordById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new SecAccountRecordThrift();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSecAccountRecordThriftList_args implements org.apache.thrift.TBase<getSecAccountRecordThriftList_args, getSecAccountRecordThriftList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSecAccountRecordThriftList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSecAccountRecordThriftList_args");

    private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SEC_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("secNo", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField CREATETIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createtime", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSecAccountRecordThriftList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSecAccountRecordThriftList_argsTupleSchemeFactory());
    }

    public String phone; // required
    public int secNo; // required
    public long createtime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PHONE((short)1, "phone"),
      SEC_NO((short)2, "secNo"),
      CREATETIME((short)3, "createtime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PHONE
            return PHONE;
          case 2: // SEC_NO
            return SEC_NO;
          case 3: // CREATETIME
            return CREATETIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SECNO_ISSET_ID = 0;
    private static final int __CREATETIME_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SEC_NO, new org.apache.thrift.meta_data.FieldMetaData("secNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CREATETIME, new org.apache.thrift.meta_data.FieldMetaData("createtime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSecAccountRecordThriftList_args.class, metaDataMap);
    }

    public getSecAccountRecordThriftList_args() {
    }

    public getSecAccountRecordThriftList_args(
      String phone,
      int secNo,
      long createtime)
    {
      this();
      this.phone = phone;
      this.secNo = secNo;
      setSecNoIsSet(true);
      this.createtime = createtime;
      setCreatetimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSecAccountRecordThriftList_args(getSecAccountRecordThriftList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPhone()) {
        this.phone = other.phone;
      }
      this.secNo = other.secNo;
      this.createtime = other.createtime;
    }

    public getSecAccountRecordThriftList_args deepCopy() {
      return new getSecAccountRecordThriftList_args(this);
    }

    @Override
    public void clear() {
      this.phone = null;
      setSecNoIsSet(false);
      this.secNo = 0;
      setCreatetimeIsSet(false);
      this.createtime = 0;
    }

    public String getPhone() {
      return this.phone;
    }

    public getSecAccountRecordThriftList_args setPhone(String phone) {
      this.phone = phone;
      return this;
    }

    public void unsetPhone() {
      this.phone = null;
    }

    /** Returns true if field phone is set (has been assigned a value) and false otherwise */
    public boolean isSetPhone() {
      return this.phone != null;
    }

    public void setPhoneIsSet(boolean value) {
      if (!value) {
        this.phone = null;
      }
    }

    public int getSecNo() {
      return this.secNo;
    }

    public getSecAccountRecordThriftList_args setSecNo(int secNo) {
      this.secNo = secNo;
      setSecNoIsSet(true);
      return this;
    }

    public void unsetSecNo() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SECNO_ISSET_ID);
    }

    /** Returns true if field secNo is set (has been assigned a value) and false otherwise */
    public boolean isSetSecNo() {
      return EncodingUtils.testBit(__isset_bitfield, __SECNO_ISSET_ID);
    }

    public void setSecNoIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SECNO_ISSET_ID, value);
    }

    public long getCreatetime() {
      return this.createtime;
    }

    public getSecAccountRecordThriftList_args setCreatetime(long createtime) {
      this.createtime = createtime;
      setCreatetimeIsSet(true);
      return this;
    }

    public void unsetCreatetime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
    }

    /** Returns true if field createtime is set (has been assigned a value) and false otherwise */
    public boolean isSetCreatetime() {
      return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
    }

    public void setCreatetimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PHONE:
        if (value == null) {
          unsetPhone();
        } else {
          setPhone((String)value);
        }
        break;

      case SEC_NO:
        if (value == null) {
          unsetSecNo();
        } else {
          setSecNo((Integer)value);
        }
        break;

      case CREATETIME:
        if (value == null) {
          unsetCreatetime();
        } else {
          setCreatetime((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PHONE:
        return getPhone();

      case SEC_NO:
        return Integer.valueOf(getSecNo());

      case CREATETIME:
        return Long.valueOf(getCreatetime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PHONE:
        return isSetPhone();
      case SEC_NO:
        return isSetSecNo();
      case CREATETIME:
        return isSetCreatetime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSecAccountRecordThriftList_args)
        return this.equals((getSecAccountRecordThriftList_args)that);
      return false;
    }

    public boolean equals(getSecAccountRecordThriftList_args that) {
      if (that == null)
        return false;

      boolean this_present_phone = true && this.isSetPhone();
      boolean that_present_phone = true && that.isSetPhone();
      if (this_present_phone || that_present_phone) {
        if (!(this_present_phone && that_present_phone))
          return false;
        if (!this.phone.equals(that.phone))
          return false;
      }

      boolean this_present_secNo = true;
      boolean that_present_secNo = true;
      if (this_present_secNo || that_present_secNo) {
        if (!(this_present_secNo && that_present_secNo))
          return false;
        if (this.secNo != that.secNo)
          return false;
      }

      boolean this_present_createtime = true;
      boolean that_present_createtime = true;
      if (this_present_createtime || that_present_createtime) {
        if (!(this_present_createtime && that_present_createtime))
          return false;
        if (this.createtime != that.createtime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSecAccountRecordThriftList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPhone()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecNo()).compareTo(other.isSetSecNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secNo, other.secNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCreatetime()).compareTo(other.isSetCreatetime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCreatetime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createtime, other.createtime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSecAccountRecordThriftList_args(");
      boolean first = true;

      sb.append("phone:");
      if (this.phone == null) {
        sb.append("null");
      } else {
        sb.append(this.phone);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("secNo:");
      sb.append(this.secNo);
      first = false;
      if (!first) sb.append(", ");
      sb.append("createtime:");
      sb.append(this.createtime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSecAccountRecordThriftList_argsStandardSchemeFactory implements SchemeFactory {
      public getSecAccountRecordThriftList_argsStandardScheme getScheme() {
        return new getSecAccountRecordThriftList_argsStandardScheme();
      }
    }

    private static class getSecAccountRecordThriftList_argsStandardScheme extends StandardScheme<getSecAccountRecordThriftList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSecAccountRecordThriftList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PHONE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.phone = iprot.readString();
                struct.setPhoneIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SEC_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.secNo = iprot.readI32();
                struct.setSecNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CREATETIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.createtime = iprot.readI64();
                struct.setCreatetimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSecAccountRecordThriftList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.phone != null) {
          oprot.writeFieldBegin(PHONE_FIELD_DESC);
          oprot.writeString(struct.phone);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SEC_NO_FIELD_DESC);
        oprot.writeI32(struct.secNo);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CREATETIME_FIELD_DESC);
        oprot.writeI64(struct.createtime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSecAccountRecordThriftList_argsTupleSchemeFactory implements SchemeFactory {
      public getSecAccountRecordThriftList_argsTupleScheme getScheme() {
        return new getSecAccountRecordThriftList_argsTupleScheme();
      }
    }

    private static class getSecAccountRecordThriftList_argsTupleScheme extends TupleScheme<getSecAccountRecordThriftList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSecAccountRecordThriftList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPhone()) {
          optionals.set(0);
        }
        if (struct.isSetSecNo()) {
          optionals.set(1);
        }
        if (struct.isSetCreatetime()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPhone()) {
          oprot.writeString(struct.phone);
        }
        if (struct.isSetSecNo()) {
          oprot.writeI32(struct.secNo);
        }
        if (struct.isSetCreatetime()) {
          oprot.writeI64(struct.createtime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSecAccountRecordThriftList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.phone = iprot.readString();
          struct.setPhoneIsSet(true);
        }
        if (incoming.get(1)) {
          struct.secNo = iprot.readI32();
          struct.setSecNoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.createtime = iprot.readI64();
          struct.setCreatetimeIsSet(true);
        }
      }
    }

  }

  public static class getSecAccountRecordThriftList_result implements org.apache.thrift.TBase<getSecAccountRecordThriftList_result, getSecAccountRecordThriftList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSecAccountRecordThriftList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSecAccountRecordThriftList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSecAccountRecordThriftList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSecAccountRecordThriftList_resultTupleSchemeFactory());
    }

    public List<SecAccountRecordThrift> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SecAccountRecordThrift.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSecAccountRecordThriftList_result.class, metaDataMap);
    }

    public getSecAccountRecordThriftList_result() {
    }

    public getSecAccountRecordThriftList_result(
      List<SecAccountRecordThrift> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSecAccountRecordThriftList_result(getSecAccountRecordThriftList_result other) {
      if (other.isSetSuccess()) {
        List<SecAccountRecordThrift> __this__success = new ArrayList<SecAccountRecordThrift>(other.success.size());
        for (SecAccountRecordThrift other_element : other.success) {
          __this__success.add(new SecAccountRecordThrift(other_element));
        }
        this.success = __this__success;
      }
    }

    public getSecAccountRecordThriftList_result deepCopy() {
      return new getSecAccountRecordThriftList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SecAccountRecordThrift> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SecAccountRecordThrift elem) {
      if (this.success == null) {
        this.success = new ArrayList<SecAccountRecordThrift>();
      }
      this.success.add(elem);
    }

    public List<SecAccountRecordThrift> getSuccess() {
      return this.success;
    }

    public getSecAccountRecordThriftList_result setSuccess(List<SecAccountRecordThrift> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<SecAccountRecordThrift>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSecAccountRecordThriftList_result)
        return this.equals((getSecAccountRecordThriftList_result)that);
      return false;
    }

    public boolean equals(getSecAccountRecordThriftList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getSecAccountRecordThriftList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSecAccountRecordThriftList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSecAccountRecordThriftList_resultStandardSchemeFactory implements SchemeFactory {
      public getSecAccountRecordThriftList_resultStandardScheme getScheme() {
        return new getSecAccountRecordThriftList_resultStandardScheme();
      }
    }

    private static class getSecAccountRecordThriftList_resultStandardScheme extends StandardScheme<getSecAccountRecordThriftList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSecAccountRecordThriftList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list180 = iprot.readListBegin();
                  struct.success = new ArrayList<SecAccountRecordThrift>(_list180.size);
                  for (int _i181 = 0; _i181 < _list180.size; ++_i181)
                  {
                    SecAccountRecordThrift _elem182;
                    _elem182 = new SecAccountRecordThrift();
                    _elem182.read(iprot);
                    struct.success.add(_elem182);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSecAccountRecordThriftList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SecAccountRecordThrift _iter183 : struct.success)
            {
              _iter183.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSecAccountRecordThriftList_resultTupleSchemeFactory implements SchemeFactory {
      public getSecAccountRecordThriftList_resultTupleScheme getScheme() {
        return new getSecAccountRecordThriftList_resultTupleScheme();
      }
    }

    private static class getSecAccountRecordThriftList_resultTupleScheme extends TupleScheme<getSecAccountRecordThriftList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSecAccountRecordThriftList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SecAccountRecordThrift _iter184 : struct.success)
            {
              _iter184.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSecAccountRecordThriftList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list185 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<SecAccountRecordThrift>(_list185.size);
            for (int _i186 = 0; _i186 < _list185.size; ++_i186)
            {
              SecAccountRecordThrift _elem187;
              _elem187 = new SecAccountRecordThrift();
              _elem187.read(iprot);
              struct.success.add(_elem187);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class querySecAccountRecord_args implements org.apache.thrift.TBase<querySecAccountRecord_args, querySecAccountRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<querySecAccountRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySecAccountRecord_args");

    private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SEC_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("secNo", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField CREATETIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createtime", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField PAGE_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("pageIndex", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySecAccountRecord_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySecAccountRecord_argsTupleSchemeFactory());
    }

    public String phone; // required
    public int secNo; // required
    public long createtime; // required
    public int pageIndex; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PHONE((short)1, "phone"),
      SEC_NO((short)2, "secNo"),
      CREATETIME((short)3, "createtime"),
      PAGE_INDEX((short)4, "pageIndex"),
      PAGE_SIZE((short)5, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PHONE
            return PHONE;
          case 2: // SEC_NO
            return SEC_NO;
          case 3: // CREATETIME
            return CREATETIME;
          case 4: // PAGE_INDEX
            return PAGE_INDEX;
          case 5: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SECNO_ISSET_ID = 0;
    private static final int __CREATETIME_ISSET_ID = 1;
    private static final int __PAGEINDEX_ISSET_ID = 2;
    private static final int __PAGESIZE_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SEC_NO, new org.apache.thrift.meta_data.FieldMetaData("secNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CREATETIME, new org.apache.thrift.meta_data.FieldMetaData("createtime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PAGE_INDEX, new org.apache.thrift.meta_data.FieldMetaData("pageIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySecAccountRecord_args.class, metaDataMap);
    }

    public querySecAccountRecord_args() {
    }

    public querySecAccountRecord_args(
      String phone,
      int secNo,
      long createtime,
      int pageIndex,
      int pageSize)
    {
      this();
      this.phone = phone;
      this.secNo = secNo;
      setSecNoIsSet(true);
      this.createtime = createtime;
      setCreatetimeIsSet(true);
      this.pageIndex = pageIndex;
      setPageIndexIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySecAccountRecord_args(querySecAccountRecord_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPhone()) {
        this.phone = other.phone;
      }
      this.secNo = other.secNo;
      this.createtime = other.createtime;
      this.pageIndex = other.pageIndex;
      this.pageSize = other.pageSize;
    }

    public querySecAccountRecord_args deepCopy() {
      return new querySecAccountRecord_args(this);
    }

    @Override
    public void clear() {
      this.phone = null;
      setSecNoIsSet(false);
      this.secNo = 0;
      setCreatetimeIsSet(false);
      this.createtime = 0;
      setPageIndexIsSet(false);
      this.pageIndex = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public String getPhone() {
      return this.phone;
    }

    public querySecAccountRecord_args setPhone(String phone) {
      this.phone = phone;
      return this;
    }

    public void unsetPhone() {
      this.phone = null;
    }

    /** Returns true if field phone is set (has been assigned a value) and false otherwise */
    public boolean isSetPhone() {
      return this.phone != null;
    }

    public void setPhoneIsSet(boolean value) {
      if (!value) {
        this.phone = null;
      }
    }

    public int getSecNo() {
      return this.secNo;
    }

    public querySecAccountRecord_args setSecNo(int secNo) {
      this.secNo = secNo;
      setSecNoIsSet(true);
      return this;
    }

    public void unsetSecNo() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SECNO_ISSET_ID);
    }

    /** Returns true if field secNo is set (has been assigned a value) and false otherwise */
    public boolean isSetSecNo() {
      return EncodingUtils.testBit(__isset_bitfield, __SECNO_ISSET_ID);
    }

    public void setSecNoIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SECNO_ISSET_ID, value);
    }

    public long getCreatetime() {
      return this.createtime;
    }

    public querySecAccountRecord_args setCreatetime(long createtime) {
      this.createtime = createtime;
      setCreatetimeIsSet(true);
      return this;
    }

    public void unsetCreatetime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
    }

    /** Returns true if field createtime is set (has been assigned a value) and false otherwise */
    public boolean isSetCreatetime() {
      return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
    }

    public void setCreatetimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
    }

    public int getPageIndex() {
      return this.pageIndex;
    }

    public querySecAccountRecord_args setPageIndex(int pageIndex) {
      this.pageIndex = pageIndex;
      setPageIndexIsSet(true);
      return this;
    }

    public void unsetPageIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGEINDEX_ISSET_ID);
    }

    /** Returns true if field pageIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetPageIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGEINDEX_ISSET_ID);
    }

    public void setPageIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGEINDEX_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public querySecAccountRecord_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PHONE:
        if (value == null) {
          unsetPhone();
        } else {
          setPhone((String)value);
        }
        break;

      case SEC_NO:
        if (value == null) {
          unsetSecNo();
        } else {
          setSecNo((Integer)value);
        }
        break;

      case CREATETIME:
        if (value == null) {
          unsetCreatetime();
        } else {
          setCreatetime((Long)value);
        }
        break;

      case PAGE_INDEX:
        if (value == null) {
          unsetPageIndex();
        } else {
          setPageIndex((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PHONE:
        return getPhone();

      case SEC_NO:
        return Integer.valueOf(getSecNo());

      case CREATETIME:
        return Long.valueOf(getCreatetime());

      case PAGE_INDEX:
        return Integer.valueOf(getPageIndex());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PHONE:
        return isSetPhone();
      case SEC_NO:
        return isSetSecNo();
      case CREATETIME:
        return isSetCreatetime();
      case PAGE_INDEX:
        return isSetPageIndex();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySecAccountRecord_args)
        return this.equals((querySecAccountRecord_args)that);
      return false;
    }

    public boolean equals(querySecAccountRecord_args that) {
      if (that == null)
        return false;

      boolean this_present_phone = true && this.isSetPhone();
      boolean that_present_phone = true && that.isSetPhone();
      if (this_present_phone || that_present_phone) {
        if (!(this_present_phone && that_present_phone))
          return false;
        if (!this.phone.equals(that.phone))
          return false;
      }

      boolean this_present_secNo = true;
      boolean that_present_secNo = true;
      if (this_present_secNo || that_present_secNo) {
        if (!(this_present_secNo && that_present_secNo))
          return false;
        if (this.secNo != that.secNo)
          return false;
      }

      boolean this_present_createtime = true;
      boolean that_present_createtime = true;
      if (this_present_createtime || that_present_createtime) {
        if (!(this_present_createtime && that_present_createtime))
          return false;
        if (this.createtime != that.createtime)
          return false;
      }

      boolean this_present_pageIndex = true;
      boolean that_present_pageIndex = true;
      if (this_present_pageIndex || that_present_pageIndex) {
        if (!(this_present_pageIndex && that_present_pageIndex))
          return false;
        if (this.pageIndex != that.pageIndex)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(querySecAccountRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPhone()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecNo()).compareTo(other.isSetSecNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secNo, other.secNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCreatetime()).compareTo(other.isSetCreatetime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCreatetime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createtime, other.createtime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageIndex()).compareTo(other.isSetPageIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageIndex, other.pageIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySecAccountRecord_args(");
      boolean first = true;

      sb.append("phone:");
      if (this.phone == null) {
        sb.append("null");
      } else {
        sb.append(this.phone);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("secNo:");
      sb.append(this.secNo);
      first = false;
      if (!first) sb.append(", ");
      sb.append("createtime:");
      sb.append(this.createtime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageIndex:");
      sb.append(this.pageIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySecAccountRecord_argsStandardSchemeFactory implements SchemeFactory {
      public querySecAccountRecord_argsStandardScheme getScheme() {
        return new querySecAccountRecord_argsStandardScheme();
      }
    }

    private static class querySecAccountRecord_argsStandardScheme extends StandardScheme<querySecAccountRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySecAccountRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PHONE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.phone = iprot.readString();
                struct.setPhoneIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SEC_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.secNo = iprot.readI32();
                struct.setSecNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CREATETIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.createtime = iprot.readI64();
                struct.setCreatetimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGE_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageIndex = iprot.readI32();
                struct.setPageIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySecAccountRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.phone != null) {
          oprot.writeFieldBegin(PHONE_FIELD_DESC);
          oprot.writeString(struct.phone);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SEC_NO_FIELD_DESC);
        oprot.writeI32(struct.secNo);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CREATETIME_FIELD_DESC);
        oprot.writeI64(struct.createtime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_INDEX_FIELD_DESC);
        oprot.writeI32(struct.pageIndex);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySecAccountRecord_argsTupleSchemeFactory implements SchemeFactory {
      public querySecAccountRecord_argsTupleScheme getScheme() {
        return new querySecAccountRecord_argsTupleScheme();
      }
    }

    private static class querySecAccountRecord_argsTupleScheme extends TupleScheme<querySecAccountRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySecAccountRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPhone()) {
          optionals.set(0);
        }
        if (struct.isSetSecNo()) {
          optionals.set(1);
        }
        if (struct.isSetCreatetime()) {
          optionals.set(2);
        }
        if (struct.isSetPageIndex()) {
          optionals.set(3);
        }
        if (struct.isSetPageSize()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetPhone()) {
          oprot.writeString(struct.phone);
        }
        if (struct.isSetSecNo()) {
          oprot.writeI32(struct.secNo);
        }
        if (struct.isSetCreatetime()) {
          oprot.writeI64(struct.createtime);
        }
        if (struct.isSetPageIndex()) {
          oprot.writeI32(struct.pageIndex);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySecAccountRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.phone = iprot.readString();
          struct.setPhoneIsSet(true);
        }
        if (incoming.get(1)) {
          struct.secNo = iprot.readI32();
          struct.setSecNoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.createtime = iprot.readI64();
          struct.setCreatetimeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.pageIndex = iprot.readI32();
          struct.setPageIndexIsSet(true);
        }
        if (incoming.get(4)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class querySecAccountRecord_result implements org.apache.thrift.TBase<querySecAccountRecord_result, querySecAccountRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<querySecAccountRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySecAccountRecord_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySecAccountRecord_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySecAccountRecord_resultTupleSchemeFactory());
    }

    public ByteBuffer success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySecAccountRecord_result.class, metaDataMap);
    }

    public querySecAccountRecord_result() {
    }

    public querySecAccountRecord_result(
      ByteBuffer success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySecAccountRecord_result(querySecAccountRecord_result other) {
      if (other.isSetSuccess()) {
        this.success = org.apache.thrift.TBaseHelper.copyBinary(other.success);
;
      }
    }

    public querySecAccountRecord_result deepCopy() {
      return new querySecAccountRecord_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public byte[] getSuccess() {
      setSuccess(org.apache.thrift.TBaseHelper.rightSize(success));
      return success == null ? null : success.array();
    }

    public ByteBuffer bufferForSuccess() {
      return success;
    }

    public querySecAccountRecord_result setSuccess(byte[] success) {
      setSuccess(success == null ? (ByteBuffer)null : ByteBuffer.wrap(success));
      return this;
    }

    public querySecAccountRecord_result setSuccess(ByteBuffer success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySecAccountRecord_result)
        return this.equals((querySecAccountRecord_result)that);
      return false;
    }

    public boolean equals(querySecAccountRecord_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(querySecAccountRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySecAccountRecord_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.success, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySecAccountRecord_resultStandardSchemeFactory implements SchemeFactory {
      public querySecAccountRecord_resultStandardScheme getScheme() {
        return new querySecAccountRecord_resultStandardScheme();
      }
    }

    private static class querySecAccountRecord_resultStandardScheme extends StandardScheme<querySecAccountRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySecAccountRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readBinary();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySecAccountRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBinary(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySecAccountRecord_resultTupleSchemeFactory implements SchemeFactory {
      public querySecAccountRecord_resultTupleScheme getScheme() {
        return new querySecAccountRecord_resultTupleScheme();
      }
    }

    private static class querySecAccountRecord_resultTupleScheme extends TupleScheme<querySecAccountRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySecAccountRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBinary(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySecAccountRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBinary();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
