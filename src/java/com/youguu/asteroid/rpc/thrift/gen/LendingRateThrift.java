/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.youguu.asteroid.rpc.thrift.gen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LendingRateThrift implements org.apache.thrift.TBase<LendingRateThrift, LendingRateThrift._Fields>, java.io.Serializable, Cloneable, Comparable<LendingRateThrift> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LendingRateThrift");

  private static final org.apache.thrift.protocol.TField BANK_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("bankCode", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField BANK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bankName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField YEAR3_TO_YEAR5_FIELD_DESC = new org.apache.thrift.protocol.TField("year3ToYear5", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField MONTH6_TO_YEAR1_FIELD_DESC = new org.apache.thrift.protocol.TField("month6ToYear1", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField MONTH6_BELOW_FIELD_DESC = new org.apache.thrift.protocol.TField("month6Below", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField YEAR1_TO_YEAR3_FIELD_DESC = new org.apache.thrift.protocol.TField("year1ToYear3", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField YEAR5_ABOVE_FIELD_DESC = new org.apache.thrift.protocol.TField("year5Above", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField YEAR5_BELOW_FIELD_DESC = new org.apache.thrift.protocol.TField("year5Below", org.apache.thrift.protocol.TType.DOUBLE, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LendingRateThriftStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LendingRateThriftTupleSchemeFactory());
  }

  public String bankCode; // required
  public String bankName; // required
  public double year3ToYear5; // required
  public double month6ToYear1; // required
  public long updateTime; // required
  public double month6Below; // required
  public double year1ToYear3; // required
  public int id; // required
  public double year5Above; // required
  public double year5Below; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BANK_CODE((short)1, "bankCode"),
    BANK_NAME((short)2, "bankName"),
    YEAR3_TO_YEAR5((short)3, "year3ToYear5"),
    MONTH6_TO_YEAR1((short)4, "month6ToYear1"),
    UPDATE_TIME((short)5, "updateTime"),
    MONTH6_BELOW((short)6, "month6Below"),
    YEAR1_TO_YEAR3((short)7, "year1ToYear3"),
    ID((short)8, "id"),
    YEAR5_ABOVE((short)9, "year5Above"),
    YEAR5_BELOW((short)10, "year5Below");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BANK_CODE
          return BANK_CODE;
        case 2: // BANK_NAME
          return BANK_NAME;
        case 3: // YEAR3_TO_YEAR5
          return YEAR3_TO_YEAR5;
        case 4: // MONTH6_TO_YEAR1
          return MONTH6_TO_YEAR1;
        case 5: // UPDATE_TIME
          return UPDATE_TIME;
        case 6: // MONTH6_BELOW
          return MONTH6_BELOW;
        case 7: // YEAR1_TO_YEAR3
          return YEAR1_TO_YEAR3;
        case 8: // ID
          return ID;
        case 9: // YEAR5_ABOVE
          return YEAR5_ABOVE;
        case 10: // YEAR5_BELOW
          return YEAR5_BELOW;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __YEAR3TOYEAR5_ISSET_ID = 0;
  private static final int __MONTH6TOYEAR1_ISSET_ID = 1;
  private static final int __UPDATETIME_ISSET_ID = 2;
  private static final int __MONTH6BELOW_ISSET_ID = 3;
  private static final int __YEAR1TOYEAR3_ISSET_ID = 4;
  private static final int __ID_ISSET_ID = 5;
  private static final int __YEAR5ABOVE_ISSET_ID = 6;
  private static final int __YEAR5BELOW_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BANK_CODE, new org.apache.thrift.meta_data.FieldMetaData("bankCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_NAME, new org.apache.thrift.meta_data.FieldMetaData("bankName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.YEAR3_TO_YEAR5, new org.apache.thrift.meta_data.FieldMetaData("year3ToYear5", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MONTH6_TO_YEAR1, new org.apache.thrift.meta_data.FieldMetaData("month6ToYear1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MONTH6_BELOW, new org.apache.thrift.meta_data.FieldMetaData("month6Below", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.YEAR1_TO_YEAR3, new org.apache.thrift.meta_data.FieldMetaData("year1ToYear3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.YEAR5_ABOVE, new org.apache.thrift.meta_data.FieldMetaData("year5Above", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.YEAR5_BELOW, new org.apache.thrift.meta_data.FieldMetaData("year5Below", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LendingRateThrift.class, metaDataMap);
  }

  public LendingRateThrift() {
  }

  public LendingRateThrift(
    String bankCode,
    String bankName,
    double year3ToYear5,
    double month6ToYear1,
    long updateTime,
    double month6Below,
    double year1ToYear3,
    int id,
    double year5Above,
    double year5Below)
  {
    this();
    this.bankCode = bankCode;
    this.bankName = bankName;
    this.year3ToYear5 = year3ToYear5;
    setYear3ToYear5IsSet(true);
    this.month6ToYear1 = month6ToYear1;
    setMonth6ToYear1IsSet(true);
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    this.month6Below = month6Below;
    setMonth6BelowIsSet(true);
    this.year1ToYear3 = year1ToYear3;
    setYear1ToYear3IsSet(true);
    this.id = id;
    setIdIsSet(true);
    this.year5Above = year5Above;
    setYear5AboveIsSet(true);
    this.year5Below = year5Below;
    setYear5BelowIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LendingRateThrift(LendingRateThrift other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBankCode()) {
      this.bankCode = other.bankCode;
    }
    if (other.isSetBankName()) {
      this.bankName = other.bankName;
    }
    this.year3ToYear5 = other.year3ToYear5;
    this.month6ToYear1 = other.month6ToYear1;
    this.updateTime = other.updateTime;
    this.month6Below = other.month6Below;
    this.year1ToYear3 = other.year1ToYear3;
    this.id = other.id;
    this.year5Above = other.year5Above;
    this.year5Below = other.year5Below;
  }

  public LendingRateThrift deepCopy() {
    return new LendingRateThrift(this);
  }

  @Override
  public void clear() {
    this.bankCode = null;
    this.bankName = null;
    setYear3ToYear5IsSet(false);
    this.year3ToYear5 = 0.0;
    setMonth6ToYear1IsSet(false);
    this.month6ToYear1 = 0.0;
    setUpdateTimeIsSet(false);
    this.updateTime = 0;
    setMonth6BelowIsSet(false);
    this.month6Below = 0.0;
    setYear1ToYear3IsSet(false);
    this.year1ToYear3 = 0.0;
    setIdIsSet(false);
    this.id = 0;
    setYear5AboveIsSet(false);
    this.year5Above = 0.0;
    setYear5BelowIsSet(false);
    this.year5Below = 0.0;
  }

  public String getBankCode() {
    return this.bankCode;
  }

  public LendingRateThrift setBankCode(String bankCode) {
    this.bankCode = bankCode;
    return this;
  }

  public void unsetBankCode() {
    this.bankCode = null;
  }

  /** Returns true if field bankCode is set (has been assigned a value) and false otherwise */
  public boolean isSetBankCode() {
    return this.bankCode != null;
  }

  public void setBankCodeIsSet(boolean value) {
    if (!value) {
      this.bankCode = null;
    }
  }

  public String getBankName() {
    return this.bankName;
  }

  public LendingRateThrift setBankName(String bankName) {
    this.bankName = bankName;
    return this;
  }

  public void unsetBankName() {
    this.bankName = null;
  }

  /** Returns true if field bankName is set (has been assigned a value) and false otherwise */
  public boolean isSetBankName() {
    return this.bankName != null;
  }

  public void setBankNameIsSet(boolean value) {
    if (!value) {
      this.bankName = null;
    }
  }

  public double getYear3ToYear5() {
    return this.year3ToYear5;
  }

  public LendingRateThrift setYear3ToYear5(double year3ToYear5) {
    this.year3ToYear5 = year3ToYear5;
    setYear3ToYear5IsSet(true);
    return this;
  }

  public void unsetYear3ToYear5() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __YEAR3TOYEAR5_ISSET_ID);
  }

  /** Returns true if field year3ToYear5 is set (has been assigned a value) and false otherwise */
  public boolean isSetYear3ToYear5() {
    return EncodingUtils.testBit(__isset_bitfield, __YEAR3TOYEAR5_ISSET_ID);
  }

  public void setYear3ToYear5IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __YEAR3TOYEAR5_ISSET_ID, value);
  }

  public double getMonth6ToYear1() {
    return this.month6ToYear1;
  }

  public LendingRateThrift setMonth6ToYear1(double month6ToYear1) {
    this.month6ToYear1 = month6ToYear1;
    setMonth6ToYear1IsSet(true);
    return this;
  }

  public void unsetMonth6ToYear1() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONTH6TOYEAR1_ISSET_ID);
  }

  /** Returns true if field month6ToYear1 is set (has been assigned a value) and false otherwise */
  public boolean isSetMonth6ToYear1() {
    return EncodingUtils.testBit(__isset_bitfield, __MONTH6TOYEAR1_ISSET_ID);
  }

  public void setMonth6ToYear1IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONTH6TOYEAR1_ISSET_ID, value);
  }

  public long getUpdateTime() {
    return this.updateTime;
  }

  public LendingRateThrift setUpdateTime(long updateTime) {
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    return this;
  }

  public void unsetUpdateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  public void setUpdateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATETIME_ISSET_ID, value);
  }

  public double getMonth6Below() {
    return this.month6Below;
  }

  public LendingRateThrift setMonth6Below(double month6Below) {
    this.month6Below = month6Below;
    setMonth6BelowIsSet(true);
    return this;
  }

  public void unsetMonth6Below() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONTH6BELOW_ISSET_ID);
  }

  /** Returns true if field month6Below is set (has been assigned a value) and false otherwise */
  public boolean isSetMonth6Below() {
    return EncodingUtils.testBit(__isset_bitfield, __MONTH6BELOW_ISSET_ID);
  }

  public void setMonth6BelowIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONTH6BELOW_ISSET_ID, value);
  }

  public double getYear1ToYear3() {
    return this.year1ToYear3;
  }

  public LendingRateThrift setYear1ToYear3(double year1ToYear3) {
    this.year1ToYear3 = year1ToYear3;
    setYear1ToYear3IsSet(true);
    return this;
  }

  public void unsetYear1ToYear3() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __YEAR1TOYEAR3_ISSET_ID);
  }

  /** Returns true if field year1ToYear3 is set (has been assigned a value) and false otherwise */
  public boolean isSetYear1ToYear3() {
    return EncodingUtils.testBit(__isset_bitfield, __YEAR1TOYEAR3_ISSET_ID);
  }

  public void setYear1ToYear3IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __YEAR1TOYEAR3_ISSET_ID, value);
  }

  public int getId() {
    return this.id;
  }

  public LendingRateThrift setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public double getYear5Above() {
    return this.year5Above;
  }

  public LendingRateThrift setYear5Above(double year5Above) {
    this.year5Above = year5Above;
    setYear5AboveIsSet(true);
    return this;
  }

  public void unsetYear5Above() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __YEAR5ABOVE_ISSET_ID);
  }

  /** Returns true if field year5Above is set (has been assigned a value) and false otherwise */
  public boolean isSetYear5Above() {
    return EncodingUtils.testBit(__isset_bitfield, __YEAR5ABOVE_ISSET_ID);
  }

  public void setYear5AboveIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __YEAR5ABOVE_ISSET_ID, value);
  }

  public double getYear5Below() {
    return this.year5Below;
  }

  public LendingRateThrift setYear5Below(double year5Below) {
    this.year5Below = year5Below;
    setYear5BelowIsSet(true);
    return this;
  }

  public void unsetYear5Below() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __YEAR5BELOW_ISSET_ID);
  }

  /** Returns true if field year5Below is set (has been assigned a value) and false otherwise */
  public boolean isSetYear5Below() {
    return EncodingUtils.testBit(__isset_bitfield, __YEAR5BELOW_ISSET_ID);
  }

  public void setYear5BelowIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __YEAR5BELOW_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BANK_CODE:
      if (value == null) {
        unsetBankCode();
      } else {
        setBankCode((String)value);
      }
      break;

    case BANK_NAME:
      if (value == null) {
        unsetBankName();
      } else {
        setBankName((String)value);
      }
      break;

    case YEAR3_TO_YEAR5:
      if (value == null) {
        unsetYear3ToYear5();
      } else {
        setYear3ToYear5((Double)value);
      }
      break;

    case MONTH6_TO_YEAR1:
      if (value == null) {
        unsetMonth6ToYear1();
      } else {
        setMonth6ToYear1((Double)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((Long)value);
      }
      break;

    case MONTH6_BELOW:
      if (value == null) {
        unsetMonth6Below();
      } else {
        setMonth6Below((Double)value);
      }
      break;

    case YEAR1_TO_YEAR3:
      if (value == null) {
        unsetYear1ToYear3();
      } else {
        setYear1ToYear3((Double)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case YEAR5_ABOVE:
      if (value == null) {
        unsetYear5Above();
      } else {
        setYear5Above((Double)value);
      }
      break;

    case YEAR5_BELOW:
      if (value == null) {
        unsetYear5Below();
      } else {
        setYear5Below((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BANK_CODE:
      return getBankCode();

    case BANK_NAME:
      return getBankName();

    case YEAR3_TO_YEAR5:
      return Double.valueOf(getYear3ToYear5());

    case MONTH6_TO_YEAR1:
      return Double.valueOf(getMonth6ToYear1());

    case UPDATE_TIME:
      return Long.valueOf(getUpdateTime());

    case MONTH6_BELOW:
      return Double.valueOf(getMonth6Below());

    case YEAR1_TO_YEAR3:
      return Double.valueOf(getYear1ToYear3());

    case ID:
      return Integer.valueOf(getId());

    case YEAR5_ABOVE:
      return Double.valueOf(getYear5Above());

    case YEAR5_BELOW:
      return Double.valueOf(getYear5Below());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BANK_CODE:
      return isSetBankCode();
    case BANK_NAME:
      return isSetBankName();
    case YEAR3_TO_YEAR5:
      return isSetYear3ToYear5();
    case MONTH6_TO_YEAR1:
      return isSetMonth6ToYear1();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case MONTH6_BELOW:
      return isSetMonth6Below();
    case YEAR1_TO_YEAR3:
      return isSetYear1ToYear3();
    case ID:
      return isSetId();
    case YEAR5_ABOVE:
      return isSetYear5Above();
    case YEAR5_BELOW:
      return isSetYear5Below();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LendingRateThrift)
      return this.equals((LendingRateThrift)that);
    return false;
  }

  public boolean equals(LendingRateThrift that) {
    if (that == null)
      return false;

    boolean this_present_bankCode = true && this.isSetBankCode();
    boolean that_present_bankCode = true && that.isSetBankCode();
    if (this_present_bankCode || that_present_bankCode) {
      if (!(this_present_bankCode && that_present_bankCode))
        return false;
      if (!this.bankCode.equals(that.bankCode))
        return false;
    }

    boolean this_present_bankName = true && this.isSetBankName();
    boolean that_present_bankName = true && that.isSetBankName();
    if (this_present_bankName || that_present_bankName) {
      if (!(this_present_bankName && that_present_bankName))
        return false;
      if (!this.bankName.equals(that.bankName))
        return false;
    }

    boolean this_present_year3ToYear5 = true;
    boolean that_present_year3ToYear5 = true;
    if (this_present_year3ToYear5 || that_present_year3ToYear5) {
      if (!(this_present_year3ToYear5 && that_present_year3ToYear5))
        return false;
      if (this.year3ToYear5 != that.year3ToYear5)
        return false;
    }

    boolean this_present_month6ToYear1 = true;
    boolean that_present_month6ToYear1 = true;
    if (this_present_month6ToYear1 || that_present_month6ToYear1) {
      if (!(this_present_month6ToYear1 && that_present_month6ToYear1))
        return false;
      if (this.month6ToYear1 != that.month6ToYear1)
        return false;
    }

    boolean this_present_updateTime = true;
    boolean that_present_updateTime = true;
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (this.updateTime != that.updateTime)
        return false;
    }

    boolean this_present_month6Below = true;
    boolean that_present_month6Below = true;
    if (this_present_month6Below || that_present_month6Below) {
      if (!(this_present_month6Below && that_present_month6Below))
        return false;
      if (this.month6Below != that.month6Below)
        return false;
    }

    boolean this_present_year1ToYear3 = true;
    boolean that_present_year1ToYear3 = true;
    if (this_present_year1ToYear3 || that_present_year1ToYear3) {
      if (!(this_present_year1ToYear3 && that_present_year1ToYear3))
        return false;
      if (this.year1ToYear3 != that.year1ToYear3)
        return false;
    }

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_year5Above = true;
    boolean that_present_year5Above = true;
    if (this_present_year5Above || that_present_year5Above) {
      if (!(this_present_year5Above && that_present_year5Above))
        return false;
      if (this.year5Above != that.year5Above)
        return false;
    }

    boolean this_present_year5Below = true;
    boolean that_present_year5Below = true;
    if (this_present_year5Below || that_present_year5Below) {
      if (!(this_present_year5Below && that_present_year5Below))
        return false;
      if (this.year5Below != that.year5Below)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(LendingRateThrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBankCode()).compareTo(other.isSetBankCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankCode, other.bankCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankName()).compareTo(other.isSetBankName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankName, other.bankName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYear3ToYear5()).compareTo(other.isSetYear3ToYear5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYear3ToYear5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.year3ToYear5, other.year3ToYear5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonth6ToYear1()).compareTo(other.isSetMonth6ToYear1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonth6ToYear1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.month6ToYear1, other.month6ToYear1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonth6Below()).compareTo(other.isSetMonth6Below());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonth6Below()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.month6Below, other.month6Below);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYear1ToYear3()).compareTo(other.isSetYear1ToYear3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYear1ToYear3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.year1ToYear3, other.year1ToYear3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYear5Above()).compareTo(other.isSetYear5Above());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYear5Above()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.year5Above, other.year5Above);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYear5Below()).compareTo(other.isSetYear5Below());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYear5Below()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.year5Below, other.year5Below);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LendingRateThrift(");
    boolean first = true;

    sb.append("bankCode:");
    if (this.bankCode == null) {
      sb.append("null");
    } else {
      sb.append(this.bankCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankName:");
    if (this.bankName == null) {
      sb.append("null");
    } else {
      sb.append(this.bankName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("year3ToYear5:");
    sb.append(this.year3ToYear5);
    first = false;
    if (!first) sb.append(", ");
    sb.append("month6ToYear1:");
    sb.append(this.month6ToYear1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTime:");
    sb.append(this.updateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("month6Below:");
    sb.append(this.month6Below);
    first = false;
    if (!first) sb.append(", ");
    sb.append("year1ToYear3:");
    sb.append(this.year1ToYear3);
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("year5Above:");
    sb.append(this.year5Above);
    first = false;
    if (!first) sb.append(", ");
    sb.append("year5Below:");
    sb.append(this.year5Below);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LendingRateThriftStandardSchemeFactory implements SchemeFactory {
    public LendingRateThriftStandardScheme getScheme() {
      return new LendingRateThriftStandardScheme();
    }
  }

  private static class LendingRateThriftStandardScheme extends StandardScheme<LendingRateThrift> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LendingRateThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BANK_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankCode = iprot.readString();
              struct.setBankCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BANK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankName = iprot.readString();
              struct.setBankNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // YEAR3_TO_YEAR5
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.year3ToYear5 = iprot.readDouble();
              struct.setYear3ToYear5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MONTH6_TO_YEAR1
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.month6ToYear1 = iprot.readDouble();
              struct.setMonth6ToYear1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updateTime = iprot.readI64();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MONTH6_BELOW
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.month6Below = iprot.readDouble();
              struct.setMonth6BelowIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // YEAR1_TO_YEAR3
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.year1ToYear3 = iprot.readDouble();
              struct.setYear1ToYear3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // YEAR5_ABOVE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.year5Above = iprot.readDouble();
              struct.setYear5AboveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // YEAR5_BELOW
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.year5Below = iprot.readDouble();
              struct.setYear5BelowIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LendingRateThrift struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.bankCode != null) {
        oprot.writeFieldBegin(BANK_CODE_FIELD_DESC);
        oprot.writeString(struct.bankCode);
        oprot.writeFieldEnd();
      }
      if (struct.bankName != null) {
        oprot.writeFieldBegin(BANK_NAME_FIELD_DESC);
        oprot.writeString(struct.bankName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(YEAR3_TO_YEAR5_FIELD_DESC);
      oprot.writeDouble(struct.year3ToYear5);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MONTH6_TO_YEAR1_FIELD_DESC);
      oprot.writeDouble(struct.month6ToYear1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.updateTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MONTH6_BELOW_FIELD_DESC);
      oprot.writeDouble(struct.month6Below);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(YEAR1_TO_YEAR3_FIELD_DESC);
      oprot.writeDouble(struct.year1ToYear3);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(YEAR5_ABOVE_FIELD_DESC);
      oprot.writeDouble(struct.year5Above);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(YEAR5_BELOW_FIELD_DESC);
      oprot.writeDouble(struct.year5Below);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LendingRateThriftTupleSchemeFactory implements SchemeFactory {
    public LendingRateThriftTupleScheme getScheme() {
      return new LendingRateThriftTupleScheme();
    }
  }

  private static class LendingRateThriftTupleScheme extends TupleScheme<LendingRateThrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LendingRateThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBankCode()) {
        optionals.set(0);
      }
      if (struct.isSetBankName()) {
        optionals.set(1);
      }
      if (struct.isSetYear3ToYear5()) {
        optionals.set(2);
      }
      if (struct.isSetMonth6ToYear1()) {
        optionals.set(3);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(4);
      }
      if (struct.isSetMonth6Below()) {
        optionals.set(5);
      }
      if (struct.isSetYear1ToYear3()) {
        optionals.set(6);
      }
      if (struct.isSetId()) {
        optionals.set(7);
      }
      if (struct.isSetYear5Above()) {
        optionals.set(8);
      }
      if (struct.isSetYear5Below()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetBankCode()) {
        oprot.writeString(struct.bankCode);
      }
      if (struct.isSetBankName()) {
        oprot.writeString(struct.bankName);
      }
      if (struct.isSetYear3ToYear5()) {
        oprot.writeDouble(struct.year3ToYear5);
      }
      if (struct.isSetMonth6ToYear1()) {
        oprot.writeDouble(struct.month6ToYear1);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeI64(struct.updateTime);
      }
      if (struct.isSetMonth6Below()) {
        oprot.writeDouble(struct.month6Below);
      }
      if (struct.isSetYear1ToYear3()) {
        oprot.writeDouble(struct.year1ToYear3);
      }
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetYear5Above()) {
        oprot.writeDouble(struct.year5Above);
      }
      if (struct.isSetYear5Below()) {
        oprot.writeDouble(struct.year5Below);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LendingRateThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.bankCode = iprot.readString();
        struct.setBankCodeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.bankName = iprot.readString();
        struct.setBankNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.year3ToYear5 = iprot.readDouble();
        struct.setYear3ToYear5IsSet(true);
      }
      if (incoming.get(3)) {
        struct.month6ToYear1 = iprot.readDouble();
        struct.setMonth6ToYear1IsSet(true);
      }
      if (incoming.get(4)) {
        struct.updateTime = iprot.readI64();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.month6Below = iprot.readDouble();
        struct.setMonth6BelowIsSet(true);
      }
      if (incoming.get(6)) {
        struct.year1ToYear3 = iprot.readDouble();
        struct.setYear1ToYear3IsSet(true);
      }
      if (incoming.get(7)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.year5Above = iprot.readDouble();
        struct.setYear5AboveIsSet(true);
      }
      if (incoming.get(9)) {
        struct.year5Below = iprot.readDouble();
        struct.setYear5BelowIsSet(true);
      }
    }
  }

}

