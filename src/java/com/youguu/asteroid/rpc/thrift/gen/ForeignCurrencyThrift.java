/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.youguu.asteroid.rpc.thrift.gen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 外汇汇率表
 */
public class ForeignCurrencyThrift implements org.apache.thrift.TBase<ForeignCurrencyThrift, ForeignCurrencyThrift._Fields>, java.io.Serializable, Cloneable, Comparable<ForeignCurrencyThrift> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ForeignCurrencyThrift");

  private static final org.apache.thrift.protocol.TField BEFORE_MONEY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("beforeMoneyCode", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField BEFORE_MONEY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("beforeMoneyName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField AFTER_MONEY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("afterMoneyCode", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField AFTER_MONEY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("afterMoneyName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CONVERT_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("convertRate", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ForeignCurrencyThriftStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ForeignCurrencyThriftTupleSchemeFactory());
  }

  public String beforeMoneyCode; // required
  public String beforeMoneyName; // required
  public String afterMoneyCode; // required
  public String afterMoneyName; // required
  public double convertRate; // required
  public long updateTime; // required
  public int id; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BEFORE_MONEY_CODE((short)1, "beforeMoneyCode"),
    BEFORE_MONEY_NAME((short)2, "beforeMoneyName"),
    AFTER_MONEY_CODE((short)3, "afterMoneyCode"),
    AFTER_MONEY_NAME((short)4, "afterMoneyName"),
    CONVERT_RATE((short)5, "convertRate"),
    UPDATE_TIME((short)6, "updateTime"),
    ID((short)7, "id");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BEFORE_MONEY_CODE
          return BEFORE_MONEY_CODE;
        case 2: // BEFORE_MONEY_NAME
          return BEFORE_MONEY_NAME;
        case 3: // AFTER_MONEY_CODE
          return AFTER_MONEY_CODE;
        case 4: // AFTER_MONEY_NAME
          return AFTER_MONEY_NAME;
        case 5: // CONVERT_RATE
          return CONVERT_RATE;
        case 6: // UPDATE_TIME
          return UPDATE_TIME;
        case 7: // ID
          return ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CONVERTRATE_ISSET_ID = 0;
  private static final int __UPDATETIME_ISSET_ID = 1;
  private static final int __ID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BEFORE_MONEY_CODE, new org.apache.thrift.meta_data.FieldMetaData("beforeMoneyCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BEFORE_MONEY_NAME, new org.apache.thrift.meta_data.FieldMetaData("beforeMoneyName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AFTER_MONEY_CODE, new org.apache.thrift.meta_data.FieldMetaData("afterMoneyCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AFTER_MONEY_NAME, new org.apache.thrift.meta_data.FieldMetaData("afterMoneyName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONVERT_RATE, new org.apache.thrift.meta_data.FieldMetaData("convertRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ForeignCurrencyThrift.class, metaDataMap);
  }

  public ForeignCurrencyThrift() {
  }

  public ForeignCurrencyThrift(
    String beforeMoneyCode,
    String beforeMoneyName,
    String afterMoneyCode,
    String afterMoneyName,
    double convertRate,
    long updateTime,
    int id)
  {
    this();
    this.beforeMoneyCode = beforeMoneyCode;
    this.beforeMoneyName = beforeMoneyName;
    this.afterMoneyCode = afterMoneyCode;
    this.afterMoneyName = afterMoneyName;
    this.convertRate = convertRate;
    setConvertRateIsSet(true);
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    this.id = id;
    setIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ForeignCurrencyThrift(ForeignCurrencyThrift other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBeforeMoneyCode()) {
      this.beforeMoneyCode = other.beforeMoneyCode;
    }
    if (other.isSetBeforeMoneyName()) {
      this.beforeMoneyName = other.beforeMoneyName;
    }
    if (other.isSetAfterMoneyCode()) {
      this.afterMoneyCode = other.afterMoneyCode;
    }
    if (other.isSetAfterMoneyName()) {
      this.afterMoneyName = other.afterMoneyName;
    }
    this.convertRate = other.convertRate;
    this.updateTime = other.updateTime;
    this.id = other.id;
  }

  public ForeignCurrencyThrift deepCopy() {
    return new ForeignCurrencyThrift(this);
  }

  @Override
  public void clear() {
    this.beforeMoneyCode = null;
    this.beforeMoneyName = null;
    this.afterMoneyCode = null;
    this.afterMoneyName = null;
    setConvertRateIsSet(false);
    this.convertRate = 0.0;
    setUpdateTimeIsSet(false);
    this.updateTime = 0;
    setIdIsSet(false);
    this.id = 0;
  }

  public String getBeforeMoneyCode() {
    return this.beforeMoneyCode;
  }

  public ForeignCurrencyThrift setBeforeMoneyCode(String beforeMoneyCode) {
    this.beforeMoneyCode = beforeMoneyCode;
    return this;
  }

  public void unsetBeforeMoneyCode() {
    this.beforeMoneyCode = null;
  }

  /** Returns true if field beforeMoneyCode is set (has been assigned a value) and false otherwise */
  public boolean isSetBeforeMoneyCode() {
    return this.beforeMoneyCode != null;
  }

  public void setBeforeMoneyCodeIsSet(boolean value) {
    if (!value) {
      this.beforeMoneyCode = null;
    }
  }

  public String getBeforeMoneyName() {
    return this.beforeMoneyName;
  }

  public ForeignCurrencyThrift setBeforeMoneyName(String beforeMoneyName) {
    this.beforeMoneyName = beforeMoneyName;
    return this;
  }

  public void unsetBeforeMoneyName() {
    this.beforeMoneyName = null;
  }

  /** Returns true if field beforeMoneyName is set (has been assigned a value) and false otherwise */
  public boolean isSetBeforeMoneyName() {
    return this.beforeMoneyName != null;
  }

  public void setBeforeMoneyNameIsSet(boolean value) {
    if (!value) {
      this.beforeMoneyName = null;
    }
  }

  public String getAfterMoneyCode() {
    return this.afterMoneyCode;
  }

  public ForeignCurrencyThrift setAfterMoneyCode(String afterMoneyCode) {
    this.afterMoneyCode = afterMoneyCode;
    return this;
  }

  public void unsetAfterMoneyCode() {
    this.afterMoneyCode = null;
  }

  /** Returns true if field afterMoneyCode is set (has been assigned a value) and false otherwise */
  public boolean isSetAfterMoneyCode() {
    return this.afterMoneyCode != null;
  }

  public void setAfterMoneyCodeIsSet(boolean value) {
    if (!value) {
      this.afterMoneyCode = null;
    }
  }

  public String getAfterMoneyName() {
    return this.afterMoneyName;
  }

  public ForeignCurrencyThrift setAfterMoneyName(String afterMoneyName) {
    this.afterMoneyName = afterMoneyName;
    return this;
  }

  public void unsetAfterMoneyName() {
    this.afterMoneyName = null;
  }

  /** Returns true if field afterMoneyName is set (has been assigned a value) and false otherwise */
  public boolean isSetAfterMoneyName() {
    return this.afterMoneyName != null;
  }

  public void setAfterMoneyNameIsSet(boolean value) {
    if (!value) {
      this.afterMoneyName = null;
    }
  }

  public double getConvertRate() {
    return this.convertRate;
  }

  public ForeignCurrencyThrift setConvertRate(double convertRate) {
    this.convertRate = convertRate;
    setConvertRateIsSet(true);
    return this;
  }

  public void unsetConvertRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONVERTRATE_ISSET_ID);
  }

  /** Returns true if field convertRate is set (has been assigned a value) and false otherwise */
  public boolean isSetConvertRate() {
    return EncodingUtils.testBit(__isset_bitfield, __CONVERTRATE_ISSET_ID);
  }

  public void setConvertRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONVERTRATE_ISSET_ID, value);
  }

  public long getUpdateTime() {
    return this.updateTime;
  }

  public ForeignCurrencyThrift setUpdateTime(long updateTime) {
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    return this;
  }

  public void unsetUpdateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  public void setUpdateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATETIME_ISSET_ID, value);
  }

  public int getId() {
    return this.id;
  }

  public ForeignCurrencyThrift setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BEFORE_MONEY_CODE:
      if (value == null) {
        unsetBeforeMoneyCode();
      } else {
        setBeforeMoneyCode((String)value);
      }
      break;

    case BEFORE_MONEY_NAME:
      if (value == null) {
        unsetBeforeMoneyName();
      } else {
        setBeforeMoneyName((String)value);
      }
      break;

    case AFTER_MONEY_CODE:
      if (value == null) {
        unsetAfterMoneyCode();
      } else {
        setAfterMoneyCode((String)value);
      }
      break;

    case AFTER_MONEY_NAME:
      if (value == null) {
        unsetAfterMoneyName();
      } else {
        setAfterMoneyName((String)value);
      }
      break;

    case CONVERT_RATE:
      if (value == null) {
        unsetConvertRate();
      } else {
        setConvertRate((Double)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((Long)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BEFORE_MONEY_CODE:
      return getBeforeMoneyCode();

    case BEFORE_MONEY_NAME:
      return getBeforeMoneyName();

    case AFTER_MONEY_CODE:
      return getAfterMoneyCode();

    case AFTER_MONEY_NAME:
      return getAfterMoneyName();

    case CONVERT_RATE:
      return Double.valueOf(getConvertRate());

    case UPDATE_TIME:
      return Long.valueOf(getUpdateTime());

    case ID:
      return Integer.valueOf(getId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BEFORE_MONEY_CODE:
      return isSetBeforeMoneyCode();
    case BEFORE_MONEY_NAME:
      return isSetBeforeMoneyName();
    case AFTER_MONEY_CODE:
      return isSetAfterMoneyCode();
    case AFTER_MONEY_NAME:
      return isSetAfterMoneyName();
    case CONVERT_RATE:
      return isSetConvertRate();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case ID:
      return isSetId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ForeignCurrencyThrift)
      return this.equals((ForeignCurrencyThrift)that);
    return false;
  }

  public boolean equals(ForeignCurrencyThrift that) {
    if (that == null)
      return false;

    boolean this_present_beforeMoneyCode = true && this.isSetBeforeMoneyCode();
    boolean that_present_beforeMoneyCode = true && that.isSetBeforeMoneyCode();
    if (this_present_beforeMoneyCode || that_present_beforeMoneyCode) {
      if (!(this_present_beforeMoneyCode && that_present_beforeMoneyCode))
        return false;
      if (!this.beforeMoneyCode.equals(that.beforeMoneyCode))
        return false;
    }

    boolean this_present_beforeMoneyName = true && this.isSetBeforeMoneyName();
    boolean that_present_beforeMoneyName = true && that.isSetBeforeMoneyName();
    if (this_present_beforeMoneyName || that_present_beforeMoneyName) {
      if (!(this_present_beforeMoneyName && that_present_beforeMoneyName))
        return false;
      if (!this.beforeMoneyName.equals(that.beforeMoneyName))
        return false;
    }

    boolean this_present_afterMoneyCode = true && this.isSetAfterMoneyCode();
    boolean that_present_afterMoneyCode = true && that.isSetAfterMoneyCode();
    if (this_present_afterMoneyCode || that_present_afterMoneyCode) {
      if (!(this_present_afterMoneyCode && that_present_afterMoneyCode))
        return false;
      if (!this.afterMoneyCode.equals(that.afterMoneyCode))
        return false;
    }

    boolean this_present_afterMoneyName = true && this.isSetAfterMoneyName();
    boolean that_present_afterMoneyName = true && that.isSetAfterMoneyName();
    if (this_present_afterMoneyName || that_present_afterMoneyName) {
      if (!(this_present_afterMoneyName && that_present_afterMoneyName))
        return false;
      if (!this.afterMoneyName.equals(that.afterMoneyName))
        return false;
    }

    boolean this_present_convertRate = true;
    boolean that_present_convertRate = true;
    if (this_present_convertRate || that_present_convertRate) {
      if (!(this_present_convertRate && that_present_convertRate))
        return false;
      if (this.convertRate != that.convertRate)
        return false;
    }

    boolean this_present_updateTime = true;
    boolean that_present_updateTime = true;
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (this.updateTime != that.updateTime)
        return false;
    }

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ForeignCurrencyThrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBeforeMoneyCode()).compareTo(other.isSetBeforeMoneyCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeforeMoneyCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beforeMoneyCode, other.beforeMoneyCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBeforeMoneyName()).compareTo(other.isSetBeforeMoneyName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeforeMoneyName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beforeMoneyName, other.beforeMoneyName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAfterMoneyCode()).compareTo(other.isSetAfterMoneyCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAfterMoneyCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.afterMoneyCode, other.afterMoneyCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAfterMoneyName()).compareTo(other.isSetAfterMoneyName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAfterMoneyName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.afterMoneyName, other.afterMoneyName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConvertRate()).compareTo(other.isSetConvertRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConvertRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.convertRate, other.convertRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ForeignCurrencyThrift(");
    boolean first = true;

    sb.append("beforeMoneyCode:");
    if (this.beforeMoneyCode == null) {
      sb.append("null");
    } else {
      sb.append(this.beforeMoneyCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("beforeMoneyName:");
    if (this.beforeMoneyName == null) {
      sb.append("null");
    } else {
      sb.append(this.beforeMoneyName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("afterMoneyCode:");
    if (this.afterMoneyCode == null) {
      sb.append("null");
    } else {
      sb.append(this.afterMoneyCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("afterMoneyName:");
    if (this.afterMoneyName == null) {
      sb.append("null");
    } else {
      sb.append(this.afterMoneyName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("convertRate:");
    sb.append(this.convertRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTime:");
    sb.append(this.updateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    sb.append(this.id);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ForeignCurrencyThriftStandardSchemeFactory implements SchemeFactory {
    public ForeignCurrencyThriftStandardScheme getScheme() {
      return new ForeignCurrencyThriftStandardScheme();
    }
  }

  private static class ForeignCurrencyThriftStandardScheme extends StandardScheme<ForeignCurrencyThrift> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ForeignCurrencyThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BEFORE_MONEY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.beforeMoneyCode = iprot.readString();
              struct.setBeforeMoneyCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BEFORE_MONEY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.beforeMoneyName = iprot.readString();
              struct.setBeforeMoneyNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AFTER_MONEY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.afterMoneyCode = iprot.readString();
              struct.setAfterMoneyCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AFTER_MONEY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.afterMoneyName = iprot.readString();
              struct.setAfterMoneyNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CONVERT_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.convertRate = iprot.readDouble();
              struct.setConvertRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updateTime = iprot.readI64();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ForeignCurrencyThrift struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.beforeMoneyCode != null) {
        oprot.writeFieldBegin(BEFORE_MONEY_CODE_FIELD_DESC);
        oprot.writeString(struct.beforeMoneyCode);
        oprot.writeFieldEnd();
      }
      if (struct.beforeMoneyName != null) {
        oprot.writeFieldBegin(BEFORE_MONEY_NAME_FIELD_DESC);
        oprot.writeString(struct.beforeMoneyName);
        oprot.writeFieldEnd();
      }
      if (struct.afterMoneyCode != null) {
        oprot.writeFieldBegin(AFTER_MONEY_CODE_FIELD_DESC);
        oprot.writeString(struct.afterMoneyCode);
        oprot.writeFieldEnd();
      }
      if (struct.afterMoneyName != null) {
        oprot.writeFieldBegin(AFTER_MONEY_NAME_FIELD_DESC);
        oprot.writeString(struct.afterMoneyName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CONVERT_RATE_FIELD_DESC);
      oprot.writeDouble(struct.convertRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.updateTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ForeignCurrencyThriftTupleSchemeFactory implements SchemeFactory {
    public ForeignCurrencyThriftTupleScheme getScheme() {
      return new ForeignCurrencyThriftTupleScheme();
    }
  }

  private static class ForeignCurrencyThriftTupleScheme extends TupleScheme<ForeignCurrencyThrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ForeignCurrencyThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBeforeMoneyCode()) {
        optionals.set(0);
      }
      if (struct.isSetBeforeMoneyName()) {
        optionals.set(1);
      }
      if (struct.isSetAfterMoneyCode()) {
        optionals.set(2);
      }
      if (struct.isSetAfterMoneyName()) {
        optionals.set(3);
      }
      if (struct.isSetConvertRate()) {
        optionals.set(4);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(5);
      }
      if (struct.isSetId()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetBeforeMoneyCode()) {
        oprot.writeString(struct.beforeMoneyCode);
      }
      if (struct.isSetBeforeMoneyName()) {
        oprot.writeString(struct.beforeMoneyName);
      }
      if (struct.isSetAfterMoneyCode()) {
        oprot.writeString(struct.afterMoneyCode);
      }
      if (struct.isSetAfterMoneyName()) {
        oprot.writeString(struct.afterMoneyName);
      }
      if (struct.isSetConvertRate()) {
        oprot.writeDouble(struct.convertRate);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeI64(struct.updateTime);
      }
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ForeignCurrencyThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.beforeMoneyCode = iprot.readString();
        struct.setBeforeMoneyCodeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.beforeMoneyName = iprot.readString();
        struct.setBeforeMoneyNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.afterMoneyCode = iprot.readString();
        struct.setAfterMoneyCodeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.afterMoneyName = iprot.readString();
        struct.setAfterMoneyNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.convertRate = iprot.readDouble();
        struct.setConvertRateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.updateTime = iprot.readI64();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
    }
  }

}

